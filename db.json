{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/capser/source/css/darkmode.css","path":"css/darkmode.css","modified":0,"renderable":1},{"_id":"themes/capser/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/capser/source/css/allinonecss.min.css","path":"css/allinonecss.min.css","modified":0,"renderable":1},{"_id":"themes/capser/source/css/markdown.css","path":"css/markdown.css","modified":0,"renderable":1},{"_id":"themes/capser/source/css/screen.css","path":"css/screen.css","modified":0,"renderable":1},{"_id":"themes/capser/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/capser/source/js/allinone.js","path":"js/allinone.js","modified":0,"renderable":1},{"_id":"themes/capser/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/capser/source/js/post.js","path":"js/post.js","modified":0,"renderable":1},{"_id":"themes/capser/source/js/allinone.min.js","path":"js/allinone.min.js","modified":0,"renderable":1},{"_id":"themes/capser/source/js/lightgallery.js","path":"js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/capser/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/capser/source/js/sw-test.js","path":"js/sw-test.js","modified":0,"renderable":1},{"_id":"themes/capser/source/photoswipe/photoswipe.css","path":"photoswipe/photoswipe.css","modified":0,"renderable":1},{"_id":"themes/capser/source/photoswipe/photoswipe.min.js","path":"photoswipe/photoswipe.min.js","modified":0,"renderable":1},{"_id":"themes/capser/source/js/smooth-scroll.polyfills.js","path":"js/smooth-scroll.polyfills.js","modified":0,"renderable":1},{"_id":"themes/capser/source/photoswipe/photoswipe-ui-default.min.js","path":"photoswipe/photoswipe-ui-default.min.js","modified":0,"renderable":1},{"_id":"themes/capser/source/photoswipe/default-skin/default-skin.png","path":"photoswipe/default-skin/default-skin.png","modified":0,"renderable":1},{"_id":"themes/capser/source/photoswipe/default-skin/default-skin.css","path":"photoswipe/default-skin/default-skin.css","modified":0,"renderable":1},{"_id":"themes/capser/source/photoswipe/default-skin/preloader.gif","path":"photoswipe/default-skin/preloader.gif","modified":0,"renderable":1},{"_id":"themes/capser/source/photoswipe/default-skin/default-skin.svg","path":"photoswipe/default-skin/default-skin.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"b055ec8bc97eb4c92e0be2316c28b680400f6489","modified":1581559542537},{"_id":"source/.DS_Store","hash":"bada5c0bab29eb49af93c7643fe0cf553c89e758","modified":1579079607540},{"_id":"themes/capser/README.md","hash":"6adc89bf101235b3ed67c6ce65345977ccfc5d26","modified":1581523418412},{"_id":"themes/capser/_config.yml","hash":"f9f90ffcadf7a0f3c20b974513bcf1529c131996","modified":1581734585465},{"_id":"source/_posts/Kebernets 进行集群部署.md","hash":"fcef031238c18a87bfd32e3d258bf7642692e1e5","modified":1581561704144},{"_id":"source/_posts/LC周赛-2019-09-15.md","hash":"27da3596820f3a29145773bfbcafa1f44f22d308","modified":1581561652222},{"_id":"source/_posts/初探Anna.md","hash":"5ed8acdf707afa58afd174046066619e79b5d74a","modified":1581908892599},{"_id":"source/_posts/TCP-IP-阅读笔记-1.md","hash":"7ec8f5072067ecfec9be98893297f7bd6e6e3ba4","modified":1581561547072},{"_id":"source/_posts/c-新特性.md","hash":"4cb2ae1eeaa4bcbf953d491de5454302982e79e5","modified":1581561757237},{"_id":"source/_posts/leetcode-周赛20191005.md","hash":"b4b3c3082858700293015b27b3e42473a5ae79c1","modified":1581561589702},{"_id":"source/_posts/杂谈-鸡血帖.md","hash":"78f90c9f4c6e968aff40ecc982c21830d73724e2","modified":1581561444124},{"_id":"source/_posts/数据库整理-索引.md","hash":"e78c3043e2fc5bf63b8356cf8cf580564d5dd35f","modified":1581561351473},{"_id":"source/_posts/设计模式-单例.md","hash":"aec9f1397a08de23afd0448470e6ac4ad9de2d14","modified":1581561302944},{"_id":"source/_posts/背包问题.md","hash":"e1693278749480847474dcb36eb76e3eda2485cf","modified":1581560700051},{"_id":"source/about/index-1.md","hash":"6b1c0aa476b77c1dee52e91bb46ad4016ee9a6c4","modified":1581560795840},{"_id":"source/about/index.md","hash":"2b8aa9dfd1d859a2b47e01ef0512c6703bbbdb16","modified":1579079607566},{"_id":"source/categories/index.md","hash":"406e8056606b737006aa0a3d501adfe6f24d3554","modified":1579079607567},{"_id":"source/tags/index.md","hash":"5fd023d29a245b254d11512bd2f9e06fd35b094e","modified":1579079607568},{"_id":"themes/capser/languages/default.yml","hash":"0727744d43e06abe5780bb0d8ebe428d216cac38","modified":1581523418415},{"_id":"themes/capser/languages/fr.yml","hash":"5628a766e38663f45e288a7fb0ce578941dc4e79","modified":1581523418415},{"_id":"themes/capser/languages/nl.yml","hash":"865639ff72be884c40bbcc1ea2477d50a3549b12","modified":1581523418417},{"_id":"themes/capser/languages/no.yml","hash":"637efbc95bc1386d3bb3edfb1a0942524bc6bc8c","modified":1581523418419},{"_id":"themes/capser/languages/zh-CN.yml","hash":"d219b9301ea4375b25675703fa14d1db8ca8bd9e","modified":1581523418426},{"_id":"themes/capser/languages/ru.yml","hash":"3d7e0d5429f9a88a01a08940f2ea44546b01ce42","modified":1581523418423},{"_id":"themes/capser/layout/_layout.swig","hash":"9823c88e783d9a18284ca4058cc87c1e37d82559","modified":1581523418428},{"_id":"themes/capser/languages/zh-TW.yml","hash":"949fa7fbc005b14e487f43eb85e77875bffcb39b","modified":1581523418427},{"_id":"themes/capser/layout/archive.swig","hash":"7cf2b42bdc60676b2d8426b636448622ab10e48e","modified":1581523418446},{"_id":"themes/capser/layout/category.swig","hash":"1d34d688741debf67066a598c0b7d6eacdc1805e","modified":1581523418447},{"_id":"themes/capser/layout/index.swig","hash":"bfee92ccc3f412977fc6382dbca1f18b6e948056","modified":1581523418448},{"_id":"themes/capser/layout/page.swig","hash":"b99287ffe8565bb3d6e48d66061a6b171b20bc91","modified":1581523418449},{"_id":"themes/capser/layout/post.swig","hash":"85b2916c8c4c798435e799ae5d902ff8f5d5ac93","modified":1581523418451},{"_id":"themes/capser/scripts/index.js","hash":"5cebc1b954875fa3c8612005858246321b242736","modified":1581523418456},{"_id":"themes/capser/layout/tag.swig","hash":"1358b7cbf816196d4cc00503e065d4f5cf0404af","modified":1581523418454},{"_id":"themes/capser/layout/_partials/about.swig","hash":"8449158a6ab22fa487b6071a2f21c1b49134c407","modified":1581523418430},{"_id":"themes/capser/layout/_partials/footer.swig","hash":"e0b70e788ac861424beffe40b40e23a9d434766a","modified":1581523418431},{"_id":"themes/capser/layout/_partials/head.swig","hash":"70559c8425e2b001555a765a0dfc3ec5fc4508ca","modified":1581523418432},{"_id":"themes/capser/layout/_partials/header.swig","hash":"c0bf5c7405a025a6b8bbc6d10f5a3c5e6bb9d75c","modified":1581523418437},{"_id":"themes/capser/layout/_partials/index.swig","hash":"29d311f58b466c0aaae63341700b25d538542c10","modified":1581523418438},{"_id":"themes/capser/layout/_partials/javascript.swig","hash":"dd0e2a1e04b0220fc7f2e3e19e9dae207ea98e35","modified":1581523418439},{"_id":"themes/capser/layout/_partials/page.swig","hash":"a710ef0850bda5a02df50460717cefc024498c64","modified":1581523418440},{"_id":"themes/capser/layout/_partials/post.swig","hash":"02e2d9e676f25ba6bf59468c0fb874350c4d24e7","modified":1581523418441},{"_id":"themes/capser/layout/_partials/search.swig","hash":"5b5ef454b103c992d5a4f0d36ee7f1d68895ed8b","modified":1581523418442},{"_id":"themes/capser/layout/_partials/widget.swig","hash":"131f2b9540d5f837fe1c7f64ac7005f48ecf14ab","modified":1581523418443},{"_id":"themes/capser/source/css/darkmode.css","hash":"d4918321342ed21988443d3fce80a9de7c9bd168","modified":1581523418464},{"_id":"themes/capser/source/css/highlight.css","hash":"b0ac34d55b27ec05fa079833cffd54196fa9c7d3","modified":1581523418467},{"_id":"themes/capser/source/css/allinonecss.min.css","hash":"c9ad9b92f54a16c5f2915d2160db72e5bf269077","modified":1581523418460},{"_id":"themes/capser/source/css/markdown.css","hash":"2622ac5c4b9a9b28912693a840a2dfd7b80c985b","modified":1581523418468},{"_id":"themes/capser/source/css/screen.css","hash":"90c21e67906163d19713278ae3aeb57b7b2940e8","modified":1581523418469},{"_id":"themes/capser/source/css/style.css","hash":"e945e68ac43494163216deec78d01e56aaa4620e","modified":1581523418472},{"_id":"themes/capser/source/js/allinone.js","hash":"ec5f830049400e0655f3e1ff4b3991d29644bc5a","modified":1581523418474},{"_id":"themes/capser/source/js/lazyload.js","hash":"0b31dabace05042ee29f5989b0191e7e4072a88f","modified":1581523418477},{"_id":"themes/capser/source/js/post.js","hash":"68e226c1490203fe1ca3ce772573094d934dfcf8","modified":1581523418479},{"_id":"themes/capser/source/js/allinone.min.js","hash":"6cd5819d38499c58a82f13de28d9b803632746ac","modified":1581523418476},{"_id":"themes/capser/source/js/lightgallery.js","hash":"57a853900da8f46223ad2f29b969dce06fd4fe24","modified":1581523418478},{"_id":"themes/capser/source/js/local-search.js","hash":"82af5e8bc2f751b004438e73cc13561c271d242e","modified":1581523418478},{"_id":"themes/capser/source/js/sw-test.js","hash":"d01a7f14328e73f3578240e2a391c209e275912b","modified":1581523418482},{"_id":"themes/capser/source/photoswipe/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1581523418504},{"_id":"themes/capser/source/photoswipe/photoswipe.min.js","hash":"f89bad36f939a1d885991580ceb064fc668db7a2","modified":1581523418508},{"_id":"themes/capser/source/js/smooth-scroll.polyfills.js","hash":"a4a399675aaede5c460b15560c0c8a15c3caa78b","modified":1581523418480},{"_id":"themes/capser/source/photoswipe/photoswipe-ui-default.min.js","hash":"9c3514916601f8eb3a45cd4a25f9fa040889d6ba","modified":1581523418498},{"_id":"themes/capser/layout/_partials/public/fload-header.swig","hash":"f3cb22283ca44c60f02927c3019aedfdc6df14b7","modified":1573647054000},{"_id":"themes/capser/layout/_partials/public/photoswipe.swig","hash":"4b88ce70fa1a2c0b3fd85874a542a658e0de763e","modified":1573647054000},{"_id":"themes/capser/layout/_partials/public/nav.swig","hash":"f2fd5a1e6e453168efac6bf1b57feb3c8505476a","modified":1573647054000},{"_id":"themes/capser/layout/_partials/public/toc.swig","hash":"30c6c3ca74d7b496e03ec856e8342515f73386d3","modified":1573647054000},{"_id":"themes/capser/layout/_partials/widget/category.swig","hash":"2f2c9b58020106505e163150e6afd45fdcea1a02","modified":1581523418444},{"_id":"themes/capser/layout/_partials/public/json-ld.swig","hash":"6291126b46158701a51171d5f62973d57ca0dd21","modified":1573647054000},{"_id":"themes/capser/layout/_partials/widget/recent_posts.swig","hash":"9a08423189bf44d7a19ae6bf6314c5d537453291","modified":1581523418445},{"_id":"themes/capser/layout/_partials/public/social.swig","hash":"5c0d27bd616d38f32a8fbfeabf7eb1fe6a4fe8cd","modified":1573647054000},{"_id":"themes/capser/layout/_partials/widget/tagcloud.swig","hash":"c8ba0c98d608ffc8e0ef829b060d642ee175bd37","modified":1581523418445},{"_id":"themes/capser/source/photoswipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1581523418487},{"_id":"themes/capser/source/photoswipe/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1581523418486},{"_id":"themes/capser/source/photoswipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1581523418492},{"_id":"themes/capser/source/photoswipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1581523418488},{"_id":"themes/capser/layout/_partials/public/icons/avatar.svg","hash":"86217ef513f535a9864b59a93aa0bc2f9ab85378","modified":1573647054000},{"_id":"themes/capser/layout/_partials/public/icons/bilibili.svg","hash":"1c01318c13bf5440e305354992a7558e8ed02b26","modified":1573647054000},{"_id":"themes/capser/layout/_partials/public/icons/github.svg","hash":"21d7913a530ad2a835ba521e0c152f35cbaab4c1","modified":1573647054000},{"_id":"themes/capser/layout/_partials/public/icons/facebook.svg","hash":"c0addca4f00b849929b1ad5fa56663a12c11677a","modified":1573647054000},{"_id":"themes/capser/layout/_partials/public/icons/telegram.svg","hash":"7ffdcca47a2de0c33deee9c6aa6cc77b48bc700b","modified":1573647054000},{"_id":"themes/capser/layout/_partials/public/icons/youtube.svg","hash":"d6a5cf004954676b2114a491e498936f9333ef7e","modified":1573647054000},{"_id":"themes/capser/layout/_partials/public/icons/twitter.svg","hash":"540aa3b11d93e9677acd16211e8cdc5de817688e","modified":1573647054000},{"_id":"themes/capser/layout/_partials/public/icons/weibo.svg","hash":"89796272786fd0983f0c956ef39efb52e5956669","modified":1573647054000}],"Category":[{"name":"算法","_id":"ck6pvpq5r0007u6s6ur3234vy"},{"name":"杂谈","_id":"ck6pvpq60000eu6s6j5yaayo0"},{"name":"笔记","_id":"ck6pvpq66000ku6s6atzobrvw"},{"name":"服务","_id":"ck6pvpq6c000su6s6a54ophby"}],"Data":[],"Page":[{"title":"about","date":"2020-02-13T02:26:35.000Z","_content":"","source":"about/index-1.md","raw":"---\ntitle: about\ndate: 2020-02-13 10:26:35\n---\n","updated":"2020-02-13T02:26:35.840Z","path":"about/index-1.html","comments":1,"layout":"page","_id":"ck6pvpq5g0001u6s6m5r0250n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于我\ntype: \"about\"\n---","date":"2020-01-15T09:13:27.566Z","updated":"2020-01-15T09:13:27.566Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck6pvpq5k0003u6s65i6piiem","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-09-01T13:26:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-09-01 21:26:04\ntype: \"categories\"\n---\n","updated":"2020-01-15T09:13:27.567Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck6pvpq5p0006u6s62ha3gmor","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-09-01T13:26:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-09-01 21:26:03\ntype: \"tags\"\n---\n","updated":"2020-01-15T09:13:27.568Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck6pvpq5t0009u6s6v74073xy","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"初探Anna","date":"2020-02-17T03:05:56.000Z","cover_img":"https://images.unsplash.com/photo-1551342909-187e24a5797d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=675&q=80","feature_img":"https://images.unsplash.com/photo-1517999349371-c43520457b23?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","description":"由伯克利开发的新一代数据库引擎","keywords":null,"_content":"\n## 初探Anna\n\n解决目标：\n\n- *data scaling* ：牵涉到数据分片 **partition**\n- *workload scaling* ：牵涉到 **multi-master replication**\n- 硬件最大化利用 & 多核计算机性能 ：**wait-free execution** (每一个core尽可能让他们一直工作)\n- 无协调的一致性 **coordination-free consistency model**\n  - 一致性哈希 & 哈希环\n\n> ##### Lattice 晶格\n>\n> 离散里面的一种偏序结构. 整个图里面只有一个起点和一个终点\n>\n> 达到的事务级别 ：**read-committed transaction**\n\n#### 可用的分布式状态模型类别\n\n- 共享内存\n  - Lattice也不能解决异步请求的数据同步问题\n- 消息传递\n  - **Single-Master**\n    - Key值只有一个副本，可以有比较好的一致性；\n    - 速度不能超过一个node ，这是一个瓶颈\n  - **Multi-Master**\n    - Key值存在多个副本\n\n> **Anna** 使用的是无协调的 *multi-master replication* ，并且基于 **lattice** 来进行一致性的保证\n\n","source":"_posts/初探Anna.md","raw":"---\ntitle: 初探Anna\ndate: 2020-02-17 11:05:56\ntags: 笔记\ncover_img: https://images.unsplash.com/photo-1551342909-187e24a5797d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=675&q=80\nfeature_img: https://images.unsplash.com/photo-1517999349371-c43520457b23?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\ndescription: 由伯克利开发的新一代数据库引擎\nkeywords:\n---\n\n## 初探Anna\n\n解决目标：\n\n- *data scaling* ：牵涉到数据分片 **partition**\n- *workload scaling* ：牵涉到 **multi-master replication**\n- 硬件最大化利用 & 多核计算机性能 ：**wait-free execution** (每一个core尽可能让他们一直工作)\n- 无协调的一致性 **coordination-free consistency model**\n  - 一致性哈希 & 哈希环\n\n> ##### Lattice 晶格\n>\n> 离散里面的一种偏序结构. 整个图里面只有一个起点和一个终点\n>\n> 达到的事务级别 ：**read-committed transaction**\n\n#### 可用的分布式状态模型类别\n\n- 共享内存\n  - Lattice也不能解决异步请求的数据同步问题\n- 消息传递\n  - **Single-Master**\n    - Key值只有一个副本，可以有比较好的一致性；\n    - 速度不能超过一个node ，这是一个瓶颈\n  - **Multi-Master**\n    - Key值存在多个副本\n\n> **Anna** 使用的是无协调的 *multi-master replication* ，并且基于 **lattice** 来进行一致性的保证\n\n","slug":"初探Anna","published":1,"updated":"2020-02-17T03:08:12.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6pvpq5a0000u6s69l5k80vr","content":"<h2 id=\"初探Anna\"><a href=\"#初探Anna\" class=\"headerlink\" title=\"初探Anna\"></a>初探Anna</h2><p>解决目标：</p>\n<ul>\n<li><em>data scaling</em> ：牵涉到数据分片 <strong>partition</strong></li>\n<li><em>workload scaling</em> ：牵涉到 <strong>multi-master replication</strong></li>\n<li>硬件最大化利用 &amp; 多核计算机性能 ：<strong>wait-free execution</strong> (每一个core尽可能让他们一直工作)</li>\n<li>无协调的一致性 <strong>coordination-free consistency model</strong><ul>\n<li>一致性哈希 &amp; 哈希环</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h5 id=\"Lattice-晶格\"><a href=\"#Lattice-晶格\" class=\"headerlink\" title=\"Lattice 晶格\"></a>Lattice 晶格</h5><p>离散里面的一种偏序结构. 整个图里面只有一个起点和一个终点</p>\n<p>达到的事务级别 ：<strong>read-committed transaction</strong></p>\n</blockquote>\n<h4 id=\"可用的分布式状态模型类别\"><a href=\"#可用的分布式状态模型类别\" class=\"headerlink\" title=\"可用的分布式状态模型类别\"></a>可用的分布式状态模型类别</h4><ul>\n<li>共享内存<ul>\n<li>Lattice也不能解决异步请求的数据同步问题</li>\n</ul>\n</li>\n<li>消息传递<ul>\n<li><strong>Single-Master</strong><ul>\n<li>Key值只有一个副本，可以有比较好的一致性；</li>\n<li>速度不能超过一个node ，这是一个瓶颈</li>\n</ul>\n</li>\n<li><strong>Multi-Master</strong><ul>\n<li>Key值存在多个副本</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Anna</strong> 使用的是无协调的 <em>multi-master replication</em> ，并且基于 <strong>lattice</strong> 来进行一致性的保证</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"初探Anna\"><a href=\"#初探Anna\" class=\"headerlink\" title=\"初探Anna\"></a>初探Anna</h2><p>解决目标：</p>\n<ul>\n<li><em>data scaling</em> ：牵涉到数据分片 <strong>partition</strong></li>\n<li><em>workload scaling</em> ：牵涉到 <strong>multi-master replication</strong></li>\n<li>硬件最大化利用 &amp; 多核计算机性能 ：<strong>wait-free execution</strong> (每一个core尽可能让他们一直工作)</li>\n<li>无协调的一致性 <strong>coordination-free consistency model</strong><ul>\n<li>一致性哈希 &amp; 哈希环</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h5 id=\"Lattice-晶格\"><a href=\"#Lattice-晶格\" class=\"headerlink\" title=\"Lattice 晶格\"></a>Lattice 晶格</h5><p>离散里面的一种偏序结构. 整个图里面只有一个起点和一个终点</p>\n<p>达到的事务级别 ：<strong>read-committed transaction</strong></p>\n</blockquote>\n<h4 id=\"可用的分布式状态模型类别\"><a href=\"#可用的分布式状态模型类别\" class=\"headerlink\" title=\"可用的分布式状态模型类别\"></a>可用的分布式状态模型类别</h4><ul>\n<li>共享内存<ul>\n<li>Lattice也不能解决异步请求的数据同步问题</li>\n</ul>\n</li>\n<li>消息传递<ul>\n<li><strong>Single-Master</strong><ul>\n<li>Key值只有一个副本，可以有比较好的一致性；</li>\n<li>速度不能超过一个node ，这是一个瓶颈</li>\n</ul>\n</li>\n<li><strong>Multi-Master</strong><ul>\n<li>Key值存在多个副本</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Anna</strong> 使用的是无协调的 <em>multi-master replication</em> ，并且基于 <strong>lattice</strong> 来进行一致性的保证</p>\n</blockquote>\n"},{"title":"LC周赛 2019-09-15","date":"2019-09-15T08:41:44.000Z","description":"20190915周赛记录","cover_img":"https://images.unsplash.com/photo-1516575448682-93a05df8bf59?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","feature_img":"https://images.unsplash.com/photo-1484278786775-527ac0d0b608?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=956&q=80","_content":"\n## 1. 寻找字符串中Balloon个数\n\n给你一个字符串 `text`，你需要使用 `text` 中的字母来拼凑尽可能多的单词 **\"balloon\"（气球）**。\n\n字符串 `text` 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 **\"balloon\"**。\n\n### 思路：\n\n很快可以通过哈希表来建立一个 `字符到字符在text中出现次数`的映射, 然后根据`ballon ` 来进行对照得出最终结果: 一定是 { `b` 出现次数 , `a` 出现次数 , `n` 出现次数 , `l` 出现次数的一半 , `o` 出现次数的一半 } 中的最小值, 即满足\n\n\n\n```java\npublic int maxNumberOfBalloons(String text) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < text.length(); ++i) {\n            map.put(text.charAt(i), map.getOrDefault(text.charAt(i), 0) + 1);\n        }\n        int b = map.getOrDefault('b', 0),\n                a = map.getOrDefault('a', 0),\n                l = map.getOrDefault('l', 0) / 2,\n                o = map.getOrDefault('o', 0) / 2,\n                n = map.getOrDefault('n', 0);\n        return Math.min(b, Math.min(a, Math.min(l, Math.min(o, n))));\n    }\n```\n\n##  2. 反转每对括号间的子串\n\n给出一个字符串 `s`（仅含有小写英文字母和括号）。\n\n请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。\n\n注意，您的结果中 **不应** 包含任何括号。\n\n### 思路：\n\n很明显这是一个 **递归** 问题. 举例说明\n\n```\n输入：s = \"(u(love)i)\"\n```\n\n我们需要先找出 **最小匹配括号子串** , 将其翻转之后, 再对其父级的子串进行翻转. \n\n\n\n但是有一个比较坑的点, 测试用例里面有这样的 `a()b(((c)))de` ， 也就是说，可以存在平级的括号. 这一点当时没想到. 从这里我们需要改变想法：\n\n- 当遇到同级的括号，先处理过当前的 `()` 对，然后继续使用 ReverseParentheses 来对后续同级括号进行翻转. 这个属于迭代式的处理\n- 当遇到子级括号, 也就是正常的 `(d(c))`这样的情况，就使用递归函数解决\n\n```java\n    public String reverseParentheses(String s) {\n        int begin = 0;\n        int end;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(')\n                begin = i;\n            if (s.charAt(i) == ')') {\n                end = i;\n                String temp = s.substring(begin + 1, end);//最小 ()\n                return reverseParentheses(s.substring(0, begin) + reverseString(temp) + s.substring(end + 1));\n            }\n        }\n        return s;\n    }\n\n    String reverseString(String s) {\n        char[] temp = s.toCharArray();\n        StringBuilder r = new StringBuilder();\n        for (int i = temp.length - 1; i >= 0; i--)\n            r.append(temp[i]);\n\n        return r.toString();\n    }\n```\n\n## 3. k次串联数组之后的最大子数组之和\n\n给你一个整数数组 `arr` 和一个整数 `k`。\n\n首先，我们要对该数组进行修改，即把原数组 `arr` 重复 `k` 次。\n\n> 举个例子，如果 `arr = [1, 2]` 且 `k = 3`，那么修改后的数组就是 `[1, 2, 1, 2, 1, 2]`。\n\n然后，请你返回修改后的数组中的最大的子数组之和。\n\n注意，子数组长度可以是 `0`，在这种情况下它的总和也是 `0`。\n\n由于 **结果可能会很大**，所以需要 **模（mod）** `10^9 + 7` 后再返回。 \n\n### 思路：\n\n一看，这个不就是最大子数组的翻版吗 hhh , 那么直接贪心上啊 \n\n```java\nprivate static final long MOD = 1000_000_007;\n\nprivate int sumHelper(int[] arr, int k) {\n        int totalLen = arr.length * k;\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < totalLen; ++i) {\n            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);\n            if (sum < 0) {\n                sum = 0;\n            } else {\n                max = Math.max(sum, max);\n            }\n        }\n        return max;\n    }\n```\n\n那么问题来了，**TLE** 了. 也就是说，这个算法不容忍 **O(N)** 的时间复杂度. 我们需要找到数组在进行串联的时候的一个和数关系来进行快速获取答案.\n\n#### 分析：\n\n前缀和判断，一共如下可能\n\n- 答案为 0\n\n- 答案仅从当前不串联的数组中得到, 即 k = 1时的最大子数组和\n\n- 答案从 k = 2 的串联结果得到，第一部分的后缀和的最大值加上第二部分的前缀和的最大值。\n\n- 答案从整个串联 k > 2 次后的结果得到，且一定是第一部分的后缀和的最大值，中间部分的总和，加上最后一部分的前缀和的最大值。\n\n第二种可能从**当前前缀和**减去**当前前缀和的最小值**得到。\n\n前缀和的最大值直接可以维护出来，后缀和的最大值可以通过总和减去前缀和的最小值得到。\n\n#### 实现\n\n需要维护数组的 **总和**, **最大前缀和** , **最小前缀和**\n\n```java\n    private static final long MOD = 1000_000_007;\n\n    public int kConcatenationMaxSum(int[] arr, int k) {\n        int n = arr.length;\n        if (k == 1)\n            return sumHelper(arr);\n        long[] sum = new long[n + 1];\n        long[] maxL = new long[n + 1];\n        long[] minL = new long[n + 1];\n        for (int i = 1; i < n + 1; ++i) {\n            sum[i] = sum[i - 1] + arr[i];\n            maxL[i] = Math.max(maxL[i - 1], sum[i]);\n            minL[i] = Math.min(minL[i - 1], sum[i]);\n        }\n        long ans = 0;\n        return (int) (Math.max(ans,\n                Math.max(\n                        sum[n] - minL[n] + maxL[n],\n                        sum[n] - minL[n] + maxL[n] + sum[n] * (k - 2)\n                )\n        ) % MOD);\n    }\n\n    private int sumHelper(int[] arr) {\n        int totalLen = arr.length;\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < totalLen; ++i) {\n            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);\n            if (sum < 0) {\n                sum = 0;\n            } else {\n                max = Math.max(sum, max);\n            }\n        }\n        return max;\n    }\n```\n\n## 4. 查找集群内的「关键连接」\n\n力扣数据中心有 `n` 台服务器，分别按从 `0` 到 `n-1` 的方式进行了编号。\n\n它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接 `connections` 是无向的。\n\n从形式上讲，`connections[i] = [a, b]` 表示服务器 `a` 和 `b` 之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。\n\n「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。\n\n请你以任意顺序返回该集群内的所有 「关键连接」。\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png)","source":"_posts/LC周赛-2019-09-15.md","raw":"---\ntitle: LC周赛 2019-09-15\ndate: 2019-09-15 16:41:44\ntags: \n  - competition\ncategories: \n  - 算法\ndescription: 20190915周赛记录\ncover_img: https://images.unsplash.com/photo-1516575448682-93a05df8bf59?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\nfeature_img: https://images.unsplash.com/photo-1484278786775-527ac0d0b608?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=956&q=80\n---\n\n## 1. 寻找字符串中Balloon个数\n\n给你一个字符串 `text`，你需要使用 `text` 中的字母来拼凑尽可能多的单词 **\"balloon\"（气球）**。\n\n字符串 `text` 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 **\"balloon\"**。\n\n### 思路：\n\n很快可以通过哈希表来建立一个 `字符到字符在text中出现次数`的映射, 然后根据`ballon ` 来进行对照得出最终结果: 一定是 { `b` 出现次数 , `a` 出现次数 , `n` 出现次数 , `l` 出现次数的一半 , `o` 出现次数的一半 } 中的最小值, 即满足\n\n\n\n```java\npublic int maxNumberOfBalloons(String text) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < text.length(); ++i) {\n            map.put(text.charAt(i), map.getOrDefault(text.charAt(i), 0) + 1);\n        }\n        int b = map.getOrDefault('b', 0),\n                a = map.getOrDefault('a', 0),\n                l = map.getOrDefault('l', 0) / 2,\n                o = map.getOrDefault('o', 0) / 2,\n                n = map.getOrDefault('n', 0);\n        return Math.min(b, Math.min(a, Math.min(l, Math.min(o, n))));\n    }\n```\n\n##  2. 反转每对括号间的子串\n\n给出一个字符串 `s`（仅含有小写英文字母和括号）。\n\n请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。\n\n注意，您的结果中 **不应** 包含任何括号。\n\n### 思路：\n\n很明显这是一个 **递归** 问题. 举例说明\n\n```\n输入：s = \"(u(love)i)\"\n```\n\n我们需要先找出 **最小匹配括号子串** , 将其翻转之后, 再对其父级的子串进行翻转. \n\n\n\n但是有一个比较坑的点, 测试用例里面有这样的 `a()b(((c)))de` ， 也就是说，可以存在平级的括号. 这一点当时没想到. 从这里我们需要改变想法：\n\n- 当遇到同级的括号，先处理过当前的 `()` 对，然后继续使用 ReverseParentheses 来对后续同级括号进行翻转. 这个属于迭代式的处理\n- 当遇到子级括号, 也就是正常的 `(d(c))`这样的情况，就使用递归函数解决\n\n```java\n    public String reverseParentheses(String s) {\n        int begin = 0;\n        int end;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(')\n                begin = i;\n            if (s.charAt(i) == ')') {\n                end = i;\n                String temp = s.substring(begin + 1, end);//最小 ()\n                return reverseParentheses(s.substring(0, begin) + reverseString(temp) + s.substring(end + 1));\n            }\n        }\n        return s;\n    }\n\n    String reverseString(String s) {\n        char[] temp = s.toCharArray();\n        StringBuilder r = new StringBuilder();\n        for (int i = temp.length - 1; i >= 0; i--)\n            r.append(temp[i]);\n\n        return r.toString();\n    }\n```\n\n## 3. k次串联数组之后的最大子数组之和\n\n给你一个整数数组 `arr` 和一个整数 `k`。\n\n首先，我们要对该数组进行修改，即把原数组 `arr` 重复 `k` 次。\n\n> 举个例子，如果 `arr = [1, 2]` 且 `k = 3`，那么修改后的数组就是 `[1, 2, 1, 2, 1, 2]`。\n\n然后，请你返回修改后的数组中的最大的子数组之和。\n\n注意，子数组长度可以是 `0`，在这种情况下它的总和也是 `0`。\n\n由于 **结果可能会很大**，所以需要 **模（mod）** `10^9 + 7` 后再返回。 \n\n### 思路：\n\n一看，这个不就是最大子数组的翻版吗 hhh , 那么直接贪心上啊 \n\n```java\nprivate static final long MOD = 1000_000_007;\n\nprivate int sumHelper(int[] arr, int k) {\n        int totalLen = arr.length * k;\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < totalLen; ++i) {\n            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);\n            if (sum < 0) {\n                sum = 0;\n            } else {\n                max = Math.max(sum, max);\n            }\n        }\n        return max;\n    }\n```\n\n那么问题来了，**TLE** 了. 也就是说，这个算法不容忍 **O(N)** 的时间复杂度. 我们需要找到数组在进行串联的时候的一个和数关系来进行快速获取答案.\n\n#### 分析：\n\n前缀和判断，一共如下可能\n\n- 答案为 0\n\n- 答案仅从当前不串联的数组中得到, 即 k = 1时的最大子数组和\n\n- 答案从 k = 2 的串联结果得到，第一部分的后缀和的最大值加上第二部分的前缀和的最大值。\n\n- 答案从整个串联 k > 2 次后的结果得到，且一定是第一部分的后缀和的最大值，中间部分的总和，加上最后一部分的前缀和的最大值。\n\n第二种可能从**当前前缀和**减去**当前前缀和的最小值**得到。\n\n前缀和的最大值直接可以维护出来，后缀和的最大值可以通过总和减去前缀和的最小值得到。\n\n#### 实现\n\n需要维护数组的 **总和**, **最大前缀和** , **最小前缀和**\n\n```java\n    private static final long MOD = 1000_000_007;\n\n    public int kConcatenationMaxSum(int[] arr, int k) {\n        int n = arr.length;\n        if (k == 1)\n            return sumHelper(arr);\n        long[] sum = new long[n + 1];\n        long[] maxL = new long[n + 1];\n        long[] minL = new long[n + 1];\n        for (int i = 1; i < n + 1; ++i) {\n            sum[i] = sum[i - 1] + arr[i];\n            maxL[i] = Math.max(maxL[i - 1], sum[i]);\n            minL[i] = Math.min(minL[i - 1], sum[i]);\n        }\n        long ans = 0;\n        return (int) (Math.max(ans,\n                Math.max(\n                        sum[n] - minL[n] + maxL[n],\n                        sum[n] - minL[n] + maxL[n] + sum[n] * (k - 2)\n                )\n        ) % MOD);\n    }\n\n    private int sumHelper(int[] arr) {\n        int totalLen = arr.length;\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < totalLen; ++i) {\n            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);\n            if (sum < 0) {\n                sum = 0;\n            } else {\n                max = Math.max(sum, max);\n            }\n        }\n        return max;\n    }\n```\n\n## 4. 查找集群内的「关键连接」\n\n力扣数据中心有 `n` 台服务器，分别按从 `0` 到 `n-1` 的方式进行了编号。\n\n它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接 `connections` 是无向的。\n\n从形式上讲，`connections[i] = [a, b]` 表示服务器 `a` 和 `b` 之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。\n\n「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。\n\n请你以任意顺序返回该集群内的所有 「关键连接」。\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png)","slug":"LC周赛-2019-09-15","published":1,"updated":"2020-02-13T02:40:52.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6pvpq5h0002u6s6034jb9u8","content":"<h2 id=\"1-寻找字符串中Balloon个数\"><a href=\"#1-寻找字符串中Balloon个数\" class=\"headerlink\" title=\"1. 寻找字符串中Balloon个数\"></a>1. 寻找字符串中Balloon个数</h2><p>给你一个字符串 <code>text</code>，你需要使用 <code>text</code> 中的字母来拼凑尽可能多的单词 <strong>“balloon”（气球）</strong>。</p>\n<p>字符串 <code>text</code> 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 <strong>“balloon”</strong>。</p>\n<h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>很快可以通过哈希表来建立一个 <code>字符到字符在text中出现次数</code>的映射, 然后根据<code>ballon</code> 来进行对照得出最终结果: 一定是 { <code>b</code> 出现次数 , <code>a</code> 出现次数 , <code>n</code> 出现次数 , <code>l</code> 出现次数的一半 , <code>o</code> 出现次数的一半 } 中的最小值, 即满足</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxNumberOfBalloons</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; text.length(); ++i) &#123;</span><br><span class=\"line\">            map.put(text.charAt(i), map.getOrDefault(text.charAt(i), <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = map.getOrDefault(<span class=\"string\">'b'</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">                a = map.getOrDefault(<span class=\"string\">'a'</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">                l = map.getOrDefault(<span class=\"string\">'l'</span>, <span class=\"number\">0</span>) / <span class=\"number\">2</span>,</span><br><span class=\"line\">                o = map.getOrDefault(<span class=\"string\">'o'</span>, <span class=\"number\">0</span>) / <span class=\"number\">2</span>,</span><br><span class=\"line\">                n = map.getOrDefault(<span class=\"string\">'n'</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.min(b, Math.min(a, Math.min(l, Math.min(o, n))));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-反转每对括号间的子串\"><a href=\"#2-反转每对括号间的子串\" class=\"headerlink\" title=\"2. 反转每对括号间的子串\"></a>2. 反转每对括号间的子串</h2><p>给出一个字符串 <code>s</code>（仅含有小写英文字母和括号）。</p>\n<p>请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。</p>\n<p>注意，您的结果中 <strong>不应</strong> 包含任何括号。</p>\n<h3 id=\"思路：-1\"><a href=\"#思路：-1\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>很明显这是一个 <strong>递归</strong> 问题. 举例说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;(u(love)i)&quot;</span><br></pre></td></tr></table></figure>\n\n<p>我们需要先找出 <strong>最小匹配括号子串</strong> , 将其翻转之后, 再对其父级的子串进行翻转. </p>\n<p>但是有一个比较坑的点, 测试用例里面有这样的 <code>a()b(((c)))de</code> ， 也就是说，可以存在平级的括号. 这一点当时没想到. 从这里我们需要改变想法：</p>\n<ul>\n<li>当遇到同级的括号，先处理过当前的 <code>()</code> 对，然后继续使用 ReverseParentheses 来对后续同级括号进行翻转. 这个属于迭代式的处理</li>\n<li>当遇到子级括号, 也就是正常的 <code>(d(c))</code>这样的情况，就使用递归函数解决</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">reverseParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(i) == <span class=\"string\">'('</span>)</span><br><span class=\"line\">            begin = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(i) == <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">            end = i;</span><br><span class=\"line\">            String temp = s.substring(begin + <span class=\"number\">1</span>, end);<span class=\"comment\">//最小 ()</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> reverseParentheses(s.substring(<span class=\"number\">0</span>, begin) + reverseString(temp) + s.substring(end + <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">reverseString</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] temp = s.toCharArray();</span><br><span class=\"line\">    StringBuilder r = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = temp.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        r.append(temp[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> r.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-k次串联数组之后的最大子数组之和\"><a href=\"#3-k次串联数组之后的最大子数组之和\" class=\"headerlink\" title=\"3. k次串联数组之后的最大子数组之和\"></a>3. k次串联数组之后的最大子数组之和</h2><p>给你一个整数数组 <code>arr</code> 和一个整数 <code>k</code>。</p>\n<p>首先，我们要对该数组进行修改，即把原数组 <code>arr</code> 重复 <code>k</code> 次。</p>\n<blockquote>\n<p>举个例子，如果 <code>arr = [1, 2]</code> 且 <code>k = 3</code>，那么修改后的数组就是 <code>[1, 2, 1, 2, 1, 2]</code>。</p>\n</blockquote>\n<p>然后，请你返回修改后的数组中的最大的子数组之和。</p>\n<p>注意，子数组长度可以是 <code>0</code>，在这种情况下它的总和也是 <code>0</code>。</p>\n<p>由于 <strong>结果可能会很大</strong>，所以需要 <strong>模（mod）</strong> <code>10^9 + 7</code> 后再返回。 </p>\n<h3 id=\"思路：-2\"><a href=\"#思路：-2\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>一看，这个不就是最大子数组的翻版吗 hhh , 那么直接贪心上啊 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MOD = <span class=\"number\">1000_000_007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">sumHelper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalLen = arr.length * k;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; totalLen; ++i) &#123;</span><br><span class=\"line\">            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                max = Math.max(sum, max);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么问题来了，<strong>TLE</strong> 了. 也就是说，这个算法不容忍 <strong>O(N)</strong> 的时间复杂度. 我们需要找到数组在进行串联的时候的一个和数关系来进行快速获取答案.</p>\n<h4 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>前缀和判断，一共如下可能</p>\n<ul>\n<li><p>答案为 0</p>\n</li>\n<li><p>答案仅从当前不串联的数组中得到, 即 k = 1时的最大子数组和</p>\n</li>\n<li><p>答案从 k = 2 的串联结果得到，第一部分的后缀和的最大值加上第二部分的前缀和的最大值。</p>\n</li>\n<li><p>答案从整个串联 k &gt; 2 次后的结果得到，且一定是第一部分的后缀和的最大值，中间部分的总和，加上最后一部分的前缀和的最大值。</p>\n</li>\n</ul>\n<p>第二种可能从<strong>当前前缀和</strong>减去<strong>当前前缀和的最小值</strong>得到。</p>\n<p>前缀和的最大值直接可以维护出来，后缀和的最大值可以通过总和减去前缀和的最小值得到。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>需要维护数组的 <strong>总和</strong>, <strong>最大前缀和</strong> , <strong>最小前缀和</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MOD = <span class=\"number\">1000_000_007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kConcatenationMaxSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sumHelper(arr);</span><br><span class=\"line\">    <span class=\"keyword\">long</span>[] sum = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span>[] maxL = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span>[] minL = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n + <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">        sum[i] = sum[i - <span class=\"number\">1</span>] + arr[i];</span><br><span class=\"line\">        maxL[i] = Math.max(maxL[i - <span class=\"number\">1</span>], sum[i]);</span><br><span class=\"line\">        minL[i] = Math.min(minL[i - <span class=\"number\">1</span>], sum[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (Math.max(ans,</span><br><span class=\"line\">            Math.max(</span><br><span class=\"line\">                    sum[n] - minL[n] + maxL[n],</span><br><span class=\"line\">                    sum[n] - minL[n] + maxL[n] + sum[n] * (k - <span class=\"number\">2</span>)</span><br><span class=\"line\">            )</span><br><span class=\"line\">    ) % MOD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">sumHelper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> totalLen = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; totalLen; ++i) &#123;</span><br><span class=\"line\">        sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            max = Math.max(sum, max);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-查找集群内的「关键连接」\"><a href=\"#4-查找集群内的「关键连接」\" class=\"headerlink\" title=\"4. 查找集群内的「关键连接」\"></a>4. 查找集群内的「关键连接」</h2><p>力扣数据中心有 <code>n</code> 台服务器，分别按从 <code>0</code> 到 <code>n-1</code> 的方式进行了编号。</p>\n<p>它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接 <code>connections</code> 是无向的。</p>\n<p>从形式上讲，<code>connections[i] = [a, b]</code> 表示服务器 <code>a</code> 和 <code>b</code> 之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。</p>\n<p>「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。</p>\n<p>请你以任意顺序返回该集群内的所有 「关键连接」。</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-寻找字符串中Balloon个数\"><a href=\"#1-寻找字符串中Balloon个数\" class=\"headerlink\" title=\"1. 寻找字符串中Balloon个数\"></a>1. 寻找字符串中Balloon个数</h2><p>给你一个字符串 <code>text</code>，你需要使用 <code>text</code> 中的字母来拼凑尽可能多的单词 <strong>“balloon”（气球）</strong>。</p>\n<p>字符串 <code>text</code> 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 <strong>“balloon”</strong>。</p>\n<h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>很快可以通过哈希表来建立一个 <code>字符到字符在text中出现次数</code>的映射, 然后根据<code>ballon</code> 来进行对照得出最终结果: 一定是 { <code>b</code> 出现次数 , <code>a</code> 出现次数 , <code>n</code> 出现次数 , <code>l</code> 出现次数的一半 , <code>o</code> 出现次数的一半 } 中的最小值, 即满足</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxNumberOfBalloons</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; text.length(); ++i) &#123;</span><br><span class=\"line\">            map.put(text.charAt(i), map.getOrDefault(text.charAt(i), <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = map.getOrDefault(<span class=\"string\">'b'</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">                a = map.getOrDefault(<span class=\"string\">'a'</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">                l = map.getOrDefault(<span class=\"string\">'l'</span>, <span class=\"number\">0</span>) / <span class=\"number\">2</span>,</span><br><span class=\"line\">                o = map.getOrDefault(<span class=\"string\">'o'</span>, <span class=\"number\">0</span>) / <span class=\"number\">2</span>,</span><br><span class=\"line\">                n = map.getOrDefault(<span class=\"string\">'n'</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.min(b, Math.min(a, Math.min(l, Math.min(o, n))));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-反转每对括号间的子串\"><a href=\"#2-反转每对括号间的子串\" class=\"headerlink\" title=\"2. 反转每对括号间的子串\"></a>2. 反转每对括号间的子串</h2><p>给出一个字符串 <code>s</code>（仅含有小写英文字母和括号）。</p>\n<p>请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。</p>\n<p>注意，您的结果中 <strong>不应</strong> 包含任何括号。</p>\n<h3 id=\"思路：-1\"><a href=\"#思路：-1\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>很明显这是一个 <strong>递归</strong> 问题. 举例说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;(u(love)i)&quot;</span><br></pre></td></tr></table></figure>\n\n<p>我们需要先找出 <strong>最小匹配括号子串</strong> , 将其翻转之后, 再对其父级的子串进行翻转. </p>\n<p>但是有一个比较坑的点, 测试用例里面有这样的 <code>a()b(((c)))de</code> ， 也就是说，可以存在平级的括号. 这一点当时没想到. 从这里我们需要改变想法：</p>\n<ul>\n<li>当遇到同级的括号，先处理过当前的 <code>()</code> 对，然后继续使用 ReverseParentheses 来对后续同级括号进行翻转. 这个属于迭代式的处理</li>\n<li>当遇到子级括号, 也就是正常的 <code>(d(c))</code>这样的情况，就使用递归函数解决</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">reverseParentheses</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(i) == <span class=\"string\">'('</span>)</span><br><span class=\"line\">            begin = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(i) == <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">            end = i;</span><br><span class=\"line\">            String temp = s.substring(begin + <span class=\"number\">1</span>, end);<span class=\"comment\">//最小 ()</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> reverseParentheses(s.substring(<span class=\"number\">0</span>, begin) + reverseString(temp) + s.substring(end + <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">reverseString</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] temp = s.toCharArray();</span><br><span class=\"line\">    StringBuilder r = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = temp.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        r.append(temp[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> r.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-k次串联数组之后的最大子数组之和\"><a href=\"#3-k次串联数组之后的最大子数组之和\" class=\"headerlink\" title=\"3. k次串联数组之后的最大子数组之和\"></a>3. k次串联数组之后的最大子数组之和</h2><p>给你一个整数数组 <code>arr</code> 和一个整数 <code>k</code>。</p>\n<p>首先，我们要对该数组进行修改，即把原数组 <code>arr</code> 重复 <code>k</code> 次。</p>\n<blockquote>\n<p>举个例子，如果 <code>arr = [1, 2]</code> 且 <code>k = 3</code>，那么修改后的数组就是 <code>[1, 2, 1, 2, 1, 2]</code>。</p>\n</blockquote>\n<p>然后，请你返回修改后的数组中的最大的子数组之和。</p>\n<p>注意，子数组长度可以是 <code>0</code>，在这种情况下它的总和也是 <code>0</code>。</p>\n<p>由于 <strong>结果可能会很大</strong>，所以需要 <strong>模（mod）</strong> <code>10^9 + 7</code> 后再返回。 </p>\n<h3 id=\"思路：-2\"><a href=\"#思路：-2\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>一看，这个不就是最大子数组的翻版吗 hhh , 那么直接贪心上啊 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MOD = <span class=\"number\">1000_000_007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">sumHelper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalLen = arr.length * k;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; totalLen; ++i) &#123;</span><br><span class=\"line\">            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                max = Math.max(sum, max);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么问题来了，<strong>TLE</strong> 了. 也就是说，这个算法不容忍 <strong>O(N)</strong> 的时间复杂度. 我们需要找到数组在进行串联的时候的一个和数关系来进行快速获取答案.</p>\n<h4 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>前缀和判断，一共如下可能</p>\n<ul>\n<li><p>答案为 0</p>\n</li>\n<li><p>答案仅从当前不串联的数组中得到, 即 k = 1时的最大子数组和</p>\n</li>\n<li><p>答案从 k = 2 的串联结果得到，第一部分的后缀和的最大值加上第二部分的前缀和的最大值。</p>\n</li>\n<li><p>答案从整个串联 k &gt; 2 次后的结果得到，且一定是第一部分的后缀和的最大值，中间部分的总和，加上最后一部分的前缀和的最大值。</p>\n</li>\n</ul>\n<p>第二种可能从<strong>当前前缀和</strong>减去<strong>当前前缀和的最小值</strong>得到。</p>\n<p>前缀和的最大值直接可以维护出来，后缀和的最大值可以通过总和减去前缀和的最小值得到。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>需要维护数组的 <strong>总和</strong>, <strong>最大前缀和</strong> , <strong>最小前缀和</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> MOD = <span class=\"number\">1000_000_007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">kConcatenationMaxSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sumHelper(arr);</span><br><span class=\"line\">    <span class=\"keyword\">long</span>[] sum = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span>[] maxL = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span>[] minL = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n + <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">        sum[i] = sum[i - <span class=\"number\">1</span>] + arr[i];</span><br><span class=\"line\">        maxL[i] = Math.max(maxL[i - <span class=\"number\">1</span>], sum[i]);</span><br><span class=\"line\">        minL[i] = Math.min(minL[i - <span class=\"number\">1</span>], sum[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (Math.max(ans,</span><br><span class=\"line\">            Math.max(</span><br><span class=\"line\">                    sum[n] - minL[n] + maxL[n],</span><br><span class=\"line\">                    sum[n] - minL[n] + maxL[n] + sum[n] * (k - <span class=\"number\">2</span>)</span><br><span class=\"line\">            )</span><br><span class=\"line\">    ) % MOD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">sumHelper</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> totalLen = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; totalLen; ++i) &#123;</span><br><span class=\"line\">        sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            max = Math.max(sum, max);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-查找集群内的「关键连接」\"><a href=\"#4-查找集群内的「关键连接」\" class=\"headerlink\" title=\"4. 查找集群内的「关键连接」\"></a>4. 查找集群内的「关键连接」</h2><p>力扣数据中心有 <code>n</code> 台服务器，分别按从 <code>0</code> 到 <code>n-1</code> 的方式进行了编号。</p>\n<p>它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接 <code>connections</code> 是无向的。</p>\n<p>从形式上讲，<code>connections[i] = [a, b]</code> 表示服务器 <code>a</code> 和 <code>b</code> 之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。</p>\n<p>「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。</p>\n<p>请你以任意顺序返回该集群内的所有 「关键连接」。</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png\" alt=\"img\"></p>\n"},{"title":"TCP/IP 阅读笔记(1)","date":"2019-12-14T14:24:04.000Z","description":"TCP协议基本内容","cover_img":"https://images.unsplash.com/photo-1465447142348-e9952c393450?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=968&q=80","feature_img":"https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","_content":"\n### TCP连接形式\n\nTCP连接使用了一对套接字 (`socket`) 来进行唯一表示，也就是把 `IP` 头部的源和目的IP地址，携同TCP头部的源端口号和目的端口号，来进行一个标识。\n\n### Seq 与 Ack\n\n序列号与响应号是通信双方进行确认判定的依据。每一次报文中的响应号就是上一次报文的序列号  + 1 ，表示了接收方想要接收的下一个序列号。\n\n我们所熟知的三次握手，其实本质上就是发送方和接收方的序列号交换：\n\n> 第一次报文发送：SYN表明是客户端期望进行序列号同步，并且发送自己的序列号\n>\n> 第二次报文发送：SYN表示是服务端期望进行序列号同步，返回之前客户端的序列号 + 1 , 表示此时客户端序列号已经同步。此时还需要发送服务端自己的序列号，等待客户端是否给予最后一次响应。\n>\n> 第三次报文发送：ACK确实就是服务端序列号 + 1 的话，那么表明服务端的序列号也已经同步。至此通过三次报文交换来实现全双工通信的两端序列号同步。\n\n对于四次挥手，其实也是序列号的交换问题。\n\n书上的问题给出了进一步的思考：如果出现同时建立连接和同时断开连接，报文发送个数是多少？\n\n- 对于同时建立连接的情况，一开始同时就会有两次报文发送，这时候两个报文都是 SYN，期望同步自己的序列号。此时连接两端的两个 `socket` 其实都只需要得到自己想要的 `ACK` 就可以了。这时候就是四次报文交换\n- 对于同时断开连接的情况，和上面完全一样，也是四次\n\n### TIME_WAIT问题\n\n四次挥手结束之后，连接断开的发起者还会继续等待 `2MSL` 的时间长度，这种做法能够避免最后一次 **ACK** 因为网络问题没有发送到，给 **被动断开方** 时间进行超时重传。\n\n在发起者还在等待的时候，其实两端的端口还是在连接的状态。问题就来了——端口占用问题。\n\n也就是说，如果我们这时候在服务端或者客户端，断开 `socket` 却又立即重启，这时候就会出现端口占用的情况，导致我们的连接被拒绝。\n\n","source":"_posts/TCP-IP-阅读笔记-1.md","raw":"---\ntitle: TCP/IP 阅读笔记(1)\ndate: 2019-12-14 22:24:04\ntags: 读书笔记\ndescription: TCP协议基本内容\ncover_img: https://images.unsplash.com/photo-1465447142348-e9952c393450?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=968&q=80\nfeature_img: https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\n---\n\n### TCP连接形式\n\nTCP连接使用了一对套接字 (`socket`) 来进行唯一表示，也就是把 `IP` 头部的源和目的IP地址，携同TCP头部的源端口号和目的端口号，来进行一个标识。\n\n### Seq 与 Ack\n\n序列号与响应号是通信双方进行确认判定的依据。每一次报文中的响应号就是上一次报文的序列号  + 1 ，表示了接收方想要接收的下一个序列号。\n\n我们所熟知的三次握手，其实本质上就是发送方和接收方的序列号交换：\n\n> 第一次报文发送：SYN表明是客户端期望进行序列号同步，并且发送自己的序列号\n>\n> 第二次报文发送：SYN表示是服务端期望进行序列号同步，返回之前客户端的序列号 + 1 , 表示此时客户端序列号已经同步。此时还需要发送服务端自己的序列号，等待客户端是否给予最后一次响应。\n>\n> 第三次报文发送：ACK确实就是服务端序列号 + 1 的话，那么表明服务端的序列号也已经同步。至此通过三次报文交换来实现全双工通信的两端序列号同步。\n\n对于四次挥手，其实也是序列号的交换问题。\n\n书上的问题给出了进一步的思考：如果出现同时建立连接和同时断开连接，报文发送个数是多少？\n\n- 对于同时建立连接的情况，一开始同时就会有两次报文发送，这时候两个报文都是 SYN，期望同步自己的序列号。此时连接两端的两个 `socket` 其实都只需要得到自己想要的 `ACK` 就可以了。这时候就是四次报文交换\n- 对于同时断开连接的情况，和上面完全一样，也是四次\n\n### TIME_WAIT问题\n\n四次挥手结束之后，连接断开的发起者还会继续等待 `2MSL` 的时间长度，这种做法能够避免最后一次 **ACK** 因为网络问题没有发送到，给 **被动断开方** 时间进行超时重传。\n\n在发起者还在等待的时候，其实两端的端口还是在连接的状态。问题就来了——端口占用问题。\n\n也就是说，如果我们这时候在服务端或者客户端，断开 `socket` 却又立即重启，这时候就会出现端口占用的情况，导致我们的连接被拒绝。\n\n","slug":"TCP-IP-阅读笔记-1","published":1,"updated":"2020-02-13T02:39:07.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6pvpq5o0005u6s66pg2gai9","content":"<h3 id=\"TCP连接形式\"><a href=\"#TCP连接形式\" class=\"headerlink\" title=\"TCP连接形式\"></a>TCP连接形式</h3><p>TCP连接使用了一对套接字 (<code>socket</code>) 来进行唯一表示，也就是把 <code>IP</code> 头部的源和目的IP地址，携同TCP头部的源端口号和目的端口号，来进行一个标识。</p>\n<h3 id=\"Seq-与-Ack\"><a href=\"#Seq-与-Ack\" class=\"headerlink\" title=\"Seq 与 Ack\"></a>Seq 与 Ack</h3><p>序列号与响应号是通信双方进行确认判定的依据。每一次报文中的响应号就是上一次报文的序列号  + 1 ，表示了接收方想要接收的下一个序列号。</p>\n<p>我们所熟知的三次握手，其实本质上就是发送方和接收方的序列号交换：</p>\n<blockquote>\n<p>第一次报文发送：SYN表明是客户端期望进行序列号同步，并且发送自己的序列号</p>\n<p>第二次报文发送：SYN表示是服务端期望进行序列号同步，返回之前客户端的序列号 + 1 , 表示此时客户端序列号已经同步。此时还需要发送服务端自己的序列号，等待客户端是否给予最后一次响应。</p>\n<p>第三次报文发送：ACK确实就是服务端序列号 + 1 的话，那么表明服务端的序列号也已经同步。至此通过三次报文交换来实现全双工通信的两端序列号同步。</p>\n</blockquote>\n<p>对于四次挥手，其实也是序列号的交换问题。</p>\n<p>书上的问题给出了进一步的思考：如果出现同时建立连接和同时断开连接，报文发送个数是多少？</p>\n<ul>\n<li>对于同时建立连接的情况，一开始同时就会有两次报文发送，这时候两个报文都是 SYN，期望同步自己的序列号。此时连接两端的两个 <code>socket</code> 其实都只需要得到自己想要的 <code>ACK</code> 就可以了。这时候就是四次报文交换</li>\n<li>对于同时断开连接的情况，和上面完全一样，也是四次</li>\n</ul>\n<h3 id=\"TIME-WAIT问题\"><a href=\"#TIME-WAIT问题\" class=\"headerlink\" title=\"TIME_WAIT问题\"></a>TIME_WAIT问题</h3><p>四次挥手结束之后，连接断开的发起者还会继续等待 <code>2MSL</code> 的时间长度，这种做法能够避免最后一次 <strong>ACK</strong> 因为网络问题没有发送到，给 <strong>被动断开方</strong> 时间进行超时重传。</p>\n<p>在发起者还在等待的时候，其实两端的端口还是在连接的状态。问题就来了——端口占用问题。</p>\n<p>也就是说，如果我们这时候在服务端或者客户端，断开 <code>socket</code> 却又立即重启，这时候就会出现端口占用的情况，导致我们的连接被拒绝。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"TCP连接形式\"><a href=\"#TCP连接形式\" class=\"headerlink\" title=\"TCP连接形式\"></a>TCP连接形式</h3><p>TCP连接使用了一对套接字 (<code>socket</code>) 来进行唯一表示，也就是把 <code>IP</code> 头部的源和目的IP地址，携同TCP头部的源端口号和目的端口号，来进行一个标识。</p>\n<h3 id=\"Seq-与-Ack\"><a href=\"#Seq-与-Ack\" class=\"headerlink\" title=\"Seq 与 Ack\"></a>Seq 与 Ack</h3><p>序列号与响应号是通信双方进行确认判定的依据。每一次报文中的响应号就是上一次报文的序列号  + 1 ，表示了接收方想要接收的下一个序列号。</p>\n<p>我们所熟知的三次握手，其实本质上就是发送方和接收方的序列号交换：</p>\n<blockquote>\n<p>第一次报文发送：SYN表明是客户端期望进行序列号同步，并且发送自己的序列号</p>\n<p>第二次报文发送：SYN表示是服务端期望进行序列号同步，返回之前客户端的序列号 + 1 , 表示此时客户端序列号已经同步。此时还需要发送服务端自己的序列号，等待客户端是否给予最后一次响应。</p>\n<p>第三次报文发送：ACK确实就是服务端序列号 + 1 的话，那么表明服务端的序列号也已经同步。至此通过三次报文交换来实现全双工通信的两端序列号同步。</p>\n</blockquote>\n<p>对于四次挥手，其实也是序列号的交换问题。</p>\n<p>书上的问题给出了进一步的思考：如果出现同时建立连接和同时断开连接，报文发送个数是多少？</p>\n<ul>\n<li>对于同时建立连接的情况，一开始同时就会有两次报文发送，这时候两个报文都是 SYN，期望同步自己的序列号。此时连接两端的两个 <code>socket</code> 其实都只需要得到自己想要的 <code>ACK</code> 就可以了。这时候就是四次报文交换</li>\n<li>对于同时断开连接的情况，和上面完全一样，也是四次</li>\n</ul>\n<h3 id=\"TIME-WAIT问题\"><a href=\"#TIME-WAIT问题\" class=\"headerlink\" title=\"TIME_WAIT问题\"></a>TIME_WAIT问题</h3><p>四次挥手结束之后，连接断开的发起者还会继续等待 <code>2MSL</code> 的时间长度，这种做法能够避免最后一次 <strong>ACK</strong> 因为网络问题没有发送到，给 <strong>被动断开方</strong> 时间进行超时重传。</p>\n<p>在发起者还在等待的时候，其实两端的端口还是在连接的状态。问题就来了——端口占用问题。</p>\n<p>也就是说，如果我们这时候在服务端或者客户端，断开 <code>socket</code> 却又立即重启，这时候就会出现端口占用的情况，导致我们的连接被拒绝。</p>\n"},{"title":"杂谈-沉思帖","date":"2019-12-22T15:35:20.000Z","description":"总结2019经历","cover_img":"https://images.unsplash.com/photo-1526285592708-e83cf5365929?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","feature_img":"https://images.unsplash.com/photo-1495539406979-bf61750d38ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","_content":"\n> 多尝试新的方向，不浮躁地随波逐流；\n>\n> 有一个自己喜爱的方向是如此地难能可贵\n\n## 杂谈-沉思帖\n\n2019 秋季这个课表算是无法无天了，虽然在春季就做了一些心理预设，但是当它到来的时候，特别是到了现在考试周将近，还是压得人喘不过气。\n\n前一段时间一直在各处投递简历。在打消了出国打算、ML的打算之后，我从暑期就开始对自己的方向进行了思考，留给我试错的时间已经不多了，在后续的一年半时间中，我是需要针对一桩事业真正投入地进行付出，并且能够有一定的产出的。在我各处找着实习的时候，字节一面后十分钟的拒信给了我巨大的打击——\n\n> 基础不牢，地动山摇\n\n面试官丢给我的几乎每一个计网问题我都招架不来，可以说上个学期学的内容全数奉还给了老师。内心千万个声音在警戒着我：你的基础根本不牢固，做了种种项目又有什么用？\n\n图森的面试官告诉我，如果这些基本的网络知识不过关，如何能够在出错的时候进行精准的错误排查？特别是在客户流量比较大的情况下，网络阻塞、丢包这些错误屡见不鲜，如何可以最大限度地减少经济损失？\n\n> 网络协议中每一层的网络攻击可以有哪些？\n\n这个问题我可能一辈子也不忘了，图森的二面官这么一个问题丢过来，我当时的反应就是：一个也没有。\n\n后续的结果也显而易见，又是一封拒信。虽然 `coding` 过关，但是基础过于不扎实而不会要我。\n\n所以，基础 基础 基础！！！\n\n什么叫做基础呢？\n\n其实这些问题，老师课上也没有系统性的说过。我丢失了大一的时候看书的习惯，大二只是对课堂内的东西进行机械接受。最讽刺的就是，当字节面试官问“你觉得计网是一门怎么样的课”的时候，我第一反应回答就是“一门背书的课”。我现在回顾过来，真想好好打当时的自己一个巴掌。不过事实的确如此，我在大二下就是背书来学计网的，当时的我根本没有心思听老师讲课，只想着多做一些项目美滋滋。\n\n现在就到了要亡羊补牢的时候了，11月上旬的样子吧，我开始恶补我之前的 `JVM`, 计网，多线程，`linux` 内核相关的知识。加上后续几个面试的逼迫，我可以说拼了老命在学 (这么紧的课程还要面试，真的会折磨我自己)\n\n`12.21` ，*TX* 的面试官突然打来电话，约了一面。可以说这次是我把握比较好的一次面试了。说着，人的确就是一个犯贱的种，需要一些外力压迫来威胁自己去学习。还有一个很重要的点就是，我真的过于浮躁了，急于求成想去学 *ML* 但是发现真实资源如此贫乏(一整个院搞什么ML? 我们又不是人工智能学院！) 没有一个前辈带领的路走得真心艰苦，没有方向，没有可以去追随的人，于是放弃。现在是时候好好静下心去听听自己了。\n\n> 冬至已至。\n>\n> 希望新的一年，能够笃定，坚毅。","source":"_posts/杂谈-鸡血帖.md","raw":"---\ntitle: 杂谈-沉思帖\ndate: 2019-12-22 23:35:20\ntags: \n  - UpUp\ncategories: \n  - 杂谈\ndescription: 总结2019经历\ncover_img: https://images.unsplash.com/photo-1526285592708-e83cf5365929?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\nfeature_img: https://images.unsplash.com/photo-1495539406979-bf61750d38ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\n---\n\n> 多尝试新的方向，不浮躁地随波逐流；\n>\n> 有一个自己喜爱的方向是如此地难能可贵\n\n## 杂谈-沉思帖\n\n2019 秋季这个课表算是无法无天了，虽然在春季就做了一些心理预设，但是当它到来的时候，特别是到了现在考试周将近，还是压得人喘不过气。\n\n前一段时间一直在各处投递简历。在打消了出国打算、ML的打算之后，我从暑期就开始对自己的方向进行了思考，留给我试错的时间已经不多了，在后续的一年半时间中，我是需要针对一桩事业真正投入地进行付出，并且能够有一定的产出的。在我各处找着实习的时候，字节一面后十分钟的拒信给了我巨大的打击——\n\n> 基础不牢，地动山摇\n\n面试官丢给我的几乎每一个计网问题我都招架不来，可以说上个学期学的内容全数奉还给了老师。内心千万个声音在警戒着我：你的基础根本不牢固，做了种种项目又有什么用？\n\n图森的面试官告诉我，如果这些基本的网络知识不过关，如何能够在出错的时候进行精准的错误排查？特别是在客户流量比较大的情况下，网络阻塞、丢包这些错误屡见不鲜，如何可以最大限度地减少经济损失？\n\n> 网络协议中每一层的网络攻击可以有哪些？\n\n这个问题我可能一辈子也不忘了，图森的二面官这么一个问题丢过来，我当时的反应就是：一个也没有。\n\n后续的结果也显而易见，又是一封拒信。虽然 `coding` 过关，但是基础过于不扎实而不会要我。\n\n所以，基础 基础 基础！！！\n\n什么叫做基础呢？\n\n其实这些问题，老师课上也没有系统性的说过。我丢失了大一的时候看书的习惯，大二只是对课堂内的东西进行机械接受。最讽刺的就是，当字节面试官问“你觉得计网是一门怎么样的课”的时候，我第一反应回答就是“一门背书的课”。我现在回顾过来，真想好好打当时的自己一个巴掌。不过事实的确如此，我在大二下就是背书来学计网的，当时的我根本没有心思听老师讲课，只想着多做一些项目美滋滋。\n\n现在就到了要亡羊补牢的时候了，11月上旬的样子吧，我开始恶补我之前的 `JVM`, 计网，多线程，`linux` 内核相关的知识。加上后续几个面试的逼迫，我可以说拼了老命在学 (这么紧的课程还要面试，真的会折磨我自己)\n\n`12.21` ，*TX* 的面试官突然打来电话，约了一面。可以说这次是我把握比较好的一次面试了。说着，人的确就是一个犯贱的种，需要一些外力压迫来威胁自己去学习。还有一个很重要的点就是，我真的过于浮躁了，急于求成想去学 *ML* 但是发现真实资源如此贫乏(一整个院搞什么ML? 我们又不是人工智能学院！) 没有一个前辈带领的路走得真心艰苦，没有方向，没有可以去追随的人，于是放弃。现在是时候好好静下心去听听自己了。\n\n> 冬至已至。\n>\n> 希望新的一年，能够笃定，坚毅。","slug":"杂谈-鸡血帖","published":1,"updated":"2020-02-13T02:37:24.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6pvpq5r0008u6s6k73bzz5n","content":"<blockquote>\n<p>多尝试新的方向，不浮躁地随波逐流；</p>\n<p>有一个自己喜爱的方向是如此地难能可贵</p>\n</blockquote>\n<h2 id=\"杂谈-沉思帖\"><a href=\"#杂谈-沉思帖\" class=\"headerlink\" title=\"杂谈-沉思帖\"></a>杂谈-沉思帖</h2><p>2019 秋季这个课表算是无法无天了，虽然在春季就做了一些心理预设，但是当它到来的时候，特别是到了现在考试周将近，还是压得人喘不过气。</p>\n<p>前一段时间一直在各处投递简历。在打消了出国打算、ML的打算之后，我从暑期就开始对自己的方向进行了思考，留给我试错的时间已经不多了，在后续的一年半时间中，我是需要针对一桩事业真正投入地进行付出，并且能够有一定的产出的。在我各处找着实习的时候，字节一面后十分钟的拒信给了我巨大的打击——</p>\n<blockquote>\n<p>基础不牢，地动山摇</p>\n</blockquote>\n<p>面试官丢给我的几乎每一个计网问题我都招架不来，可以说上个学期学的内容全数奉还给了老师。内心千万个声音在警戒着我：你的基础根本不牢固，做了种种项目又有什么用？</p>\n<p>图森的面试官告诉我，如果这些基本的网络知识不过关，如何能够在出错的时候进行精准的错误排查？特别是在客户流量比较大的情况下，网络阻塞、丢包这些错误屡见不鲜，如何可以最大限度地减少经济损失？</p>\n<blockquote>\n<p>网络协议中每一层的网络攻击可以有哪些？</p>\n</blockquote>\n<p>这个问题我可能一辈子也不忘了，图森的二面官这么一个问题丢过来，我当时的反应就是：一个也没有。</p>\n<p>后续的结果也显而易见，又是一封拒信。虽然 <code>coding</code> 过关，但是基础过于不扎实而不会要我。</p>\n<p>所以，基础 基础 基础！！！</p>\n<p>什么叫做基础呢？</p>\n<p>其实这些问题，老师课上也没有系统性的说过。我丢失了大一的时候看书的习惯，大二只是对课堂内的东西进行机械接受。最讽刺的就是，当字节面试官问“你觉得计网是一门怎么样的课”的时候，我第一反应回答就是“一门背书的课”。我现在回顾过来，真想好好打当时的自己一个巴掌。不过事实的确如此，我在大二下就是背书来学计网的，当时的我根本没有心思听老师讲课，只想着多做一些项目美滋滋。</p>\n<p>现在就到了要亡羊补牢的时候了，11月上旬的样子吧，我开始恶补我之前的 <code>JVM</code>, 计网，多线程，<code>linux</code> 内核相关的知识。加上后续几个面试的逼迫，我可以说拼了老命在学 (这么紧的课程还要面试，真的会折磨我自己)</p>\n<p><code>12.21</code> ，<em>TX</em> 的面试官突然打来电话，约了一面。可以说这次是我把握比较好的一次面试了。说着，人的确就是一个犯贱的种，需要一些外力压迫来威胁自己去学习。还有一个很重要的点就是，我真的过于浮躁了，急于求成想去学 <em>ML</em> 但是发现真实资源如此贫乏(一整个院搞什么ML? 我们又不是人工智能学院！) 没有一个前辈带领的路走得真心艰苦，没有方向，没有可以去追随的人，于是放弃。现在是时候好好静下心去听听自己了。</p>\n<blockquote>\n<p>冬至已至。</p>\n<p>希望新的一年，能够笃定，坚毅。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>多尝试新的方向，不浮躁地随波逐流；</p>\n<p>有一个自己喜爱的方向是如此地难能可贵</p>\n</blockquote>\n<h2 id=\"杂谈-沉思帖\"><a href=\"#杂谈-沉思帖\" class=\"headerlink\" title=\"杂谈-沉思帖\"></a>杂谈-沉思帖</h2><p>2019 秋季这个课表算是无法无天了，虽然在春季就做了一些心理预设，但是当它到来的时候，特别是到了现在考试周将近，还是压得人喘不过气。</p>\n<p>前一段时间一直在各处投递简历。在打消了出国打算、ML的打算之后，我从暑期就开始对自己的方向进行了思考，留给我试错的时间已经不多了，在后续的一年半时间中，我是需要针对一桩事业真正投入地进行付出，并且能够有一定的产出的。在我各处找着实习的时候，字节一面后十分钟的拒信给了我巨大的打击——</p>\n<blockquote>\n<p>基础不牢，地动山摇</p>\n</blockquote>\n<p>面试官丢给我的几乎每一个计网问题我都招架不来，可以说上个学期学的内容全数奉还给了老师。内心千万个声音在警戒着我：你的基础根本不牢固，做了种种项目又有什么用？</p>\n<p>图森的面试官告诉我，如果这些基本的网络知识不过关，如何能够在出错的时候进行精准的错误排查？特别是在客户流量比较大的情况下，网络阻塞、丢包这些错误屡见不鲜，如何可以最大限度地减少经济损失？</p>\n<blockquote>\n<p>网络协议中每一层的网络攻击可以有哪些？</p>\n</blockquote>\n<p>这个问题我可能一辈子也不忘了，图森的二面官这么一个问题丢过来，我当时的反应就是：一个也没有。</p>\n<p>后续的结果也显而易见，又是一封拒信。虽然 <code>coding</code> 过关，但是基础过于不扎实而不会要我。</p>\n<p>所以，基础 基础 基础！！！</p>\n<p>什么叫做基础呢？</p>\n<p>其实这些问题，老师课上也没有系统性的说过。我丢失了大一的时候看书的习惯，大二只是对课堂内的东西进行机械接受。最讽刺的就是，当字节面试官问“你觉得计网是一门怎么样的课”的时候，我第一反应回答就是“一门背书的课”。我现在回顾过来，真想好好打当时的自己一个巴掌。不过事实的确如此，我在大二下就是背书来学计网的，当时的我根本没有心思听老师讲课，只想着多做一些项目美滋滋。</p>\n<p>现在就到了要亡羊补牢的时候了，11月上旬的样子吧，我开始恶补我之前的 <code>JVM</code>, 计网，多线程，<code>linux</code> 内核相关的知识。加上后续几个面试的逼迫，我可以说拼了老命在学 (这么紧的课程还要面试，真的会折磨我自己)</p>\n<p><code>12.21</code> ，<em>TX</em> 的面试官突然打来电话，约了一面。可以说这次是我把握比较好的一次面试了。说着，人的确就是一个犯贱的种，需要一些外力压迫来威胁自己去学习。还有一个很重要的点就是，我真的过于浮躁了，急于求成想去学 <em>ML</em> 但是发现真实资源如此贫乏(一整个院搞什么ML? 我们又不是人工智能学院！) 没有一个前辈带领的路走得真心艰苦，没有方向，没有可以去追随的人，于是放弃。现在是时候好好静下心去听听自己了。</p>\n<blockquote>\n<p>冬至已至。</p>\n<p>希望新的一年，能够笃定，坚毅。</p>\n</blockquote>\n"},{"title":"LC周赛 2019-10-05","date":"2019-10-08T01:57:04.000Z","description":"20191005周赛记录","cover_img":"https://images.unsplash.com/photo-1492366254240-43affaefc3e3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=602&q=80","feature_img":"https://images.unsplash.com/photo-1495539406979-bf61750d38ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","_content":"\n## 1. Play with Chips\n\n### 描述\n\nThere are some chips, and the i-th chip is at position `chips[i]`.\n\nYou can perform any of the two following types of moves **any number of times** (possibly zero) **on any chip**:\n\n- Move the `i`-th chip by 2 units to the left or to the right with a cost of **0**.\n- Move the `i`-th chip by 1 unit to the left or to the right with a cost of **1**.\n\nThere can be two or more chips at the same position initially.\n\nReturn the minimum cost needed to move all the chips to the same position (any position).\n\n### 思路 \n\n如果两个chip的位置相差为偶数, 则 `cost = 0`. 否则 `coust = 1 `\n\n我们预先获取chip的一个哈希来进行缓存, 之后遍历哈希中的每一个数, 作为 **目的地**.\n\n那么我们的问题就变成 ： 找出那一个 **目的地** , 使得 `cost` 最小即可\n\n```java\n    public int minCostToMoveChips(int[] chips) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : chips) {\n            set.add(num);\n        }\n        int min = Integer.MAX_VALUE;\n        for (int num : set) {\n            int sum = 0;\n            for (int chip : chips) {\n                int dis = Math.abs(num - chip);\n                sum += dis % 2;\n                if (sum > min) break;\n            }\n            min = Math.min(sum, min);\n        }\n        return min;\n    }\n```\n\n## 2. Longest Arithmetic Subsequence of Given Difference\n\n### 描述\n\nGiven an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.\n\n**Example 1:**\n\n```\nInput: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].\n```\n\n**Example 2:**\n\n```\nInput: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.\n```\n\n**Example 3:**\n\n```\nInput: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].\n```\n\n### 思路\n\n一开始很明显想到用 `DP` 来解决. 每一步前进的同时需要缓存下当前位置, 便于后续的查找\n\n我们缓存如下的内容：\n\n- 每一个数字和它所处可能位置 `Set` 的哈希映射\n- DP 数组，用于当前 `dp[i]` 的确定\n\n一开始就这样做了，但是 error 了一次. 原因就是这里的 dp 数组并不是单调上升，因为可能会出现中间断层的情况，例如 `[1,2,3,1,2,3,4]` , 中间的 `1` 位置就是断层的出现点. (之后一想，其实也可以通过自己的维护来进行避免，问题不大)\n\n最终代码如下\n\n```java\n public int longestSubsequence(int[] arr, int difference) {\n        int n = arr.length;\n        int[] dp = new int[n];\n        Map<Integer, Set<Integer>> map = new HashMap<>();\n        dp[0] = 1;\n        Set<Integer> set = new HashSet<>();\n        set.add(0);\n        map.put(arr[0], set);\n        for (int i = 1; i < n; ++i) {\n            if (!map.containsKey(arr[i])) {\n                set = new HashSet<>();\n                set.add(i);\n                map.put(arr[i], set);\n            } else {\n                set = map.get(arr[i]);\n                set.add(i);\n                map.put(arr[i], set);\n            }\n\n            int target = arr[i] - difference;\n            if (!map.containsKey(target)) { //不包含前一个数\n                dp[i] = 1;\n            } else {\n                set = map.get(target);\n                int maxLen = 0;\n                for (int num : set) {\n                    maxLen = Math.max(maxLen, dp[num]);\n                }\n                dp[i] = maxLen + 1;\n            }\n        }\n        int ans = 0;\n        for (int num : dp) {\n            ans = Math.max(num, ans);\n        }\n        return ans;\n    }\n```\n\n## 3. Path with Maximum Gold\n\n### 描述\n\nIn a gold mine `grid` of size `m * n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.\n\nReturn the maximum amount of gold you can collect under the conditions:\n\n- Every time you are located in a cell you will collect all the gold in that cell.\n- From your position you can walk one step to the left, right, up or down.\n- You can't visit the same cell more than once.\n- Never visit a cell with `0` gold.\n- You can start and stop collecting gold from **any** position in the grid that has some gold. \n\n**Example 1:**\n\n```\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.\n```\n\n**Example 2:**\n\n```\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.\n```\n\n### 思路\n\n很简单的 DFS 算法实现, 没什么好说的\n\n```java\npublic int getMaximumGold(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int max = 0;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] != 0) {\n                    max = Math.max(max, dfs(grid, new int[]{i, j}, 0));\n                }\n            }\n        }\n        return max;\n    }\n\n    private int dfs(int[][] grid, int[] startPos, int gold) {\n        int m = grid.length, n = grid[0].length;\n        int r = startPos[0], c = startPos[1];\n        if (r < 0 || c < 0 || r >= m || c >= n || grid[r][c] == 0) return gold;\n        gold += grid[r][c];\n        int[][] nums = new int[m][n];\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                nums[i][j] = grid[i][j];\n            }\n        }\n        nums[r][c] = 0;             //Get the gold\n        int a1 = dfs(nums, new int[]{r, c + 1}, gold);\n        int b1 = dfs(nums, new int[]{r, c - 1}, gold);\n        int c1 = dfs(nums, new int[]{r + 1, c}, gold);\n        int d1 = dfs(nums, new int[]{r - 1, c}, gold);\n        return Arrays.stream(new int[]{a1, b1, c1, d1}).max().getAsInt();\n    }\n```\n\n## 4. Count Vowels Permutation\n\n### 描述\n\nGiven an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\n\n- Each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\n- Each vowel `'a'` may only be followed by an `'e'`.\n- Each vowel `'e'` may only be followed by an `'a'` or an `'i'`.\n- Each vowel `'i'` **may not** be followed by another `'i'`.\n- Each vowel `'o'` may only be followed by an `'i'` or a `'u'`.\n- Each vowel `'u'` may only be followed by an `'a'.`\n\nSince the answer may be too large, return it modulo `10^9 + 7.`\n\n**Example 1:**\n\n```\nInput: n = 1\nOutput: 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".\n```\n\n**Example 2:**\n\n```\nInput: n = 2\nOutput: 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".\n```\n\n**Example 3:** \n\n```\nInput: n = 5\nOutput: 68\n```\n\n### 思路\n\n假定某一步的最末位中, ‘a’ , ‘e’ , ‘i’ , ‘o’ , ‘u’ 的个数分别是 a , e , i , o , u ，那么下一步末位的个数就分别是 `u+e+i`, `a + i`, `e + o` , `i` , `o +i` \n\n我这里用了一个hash来保存 (小声：这个hard题是简单题的赶脚233)\n\n```java\nclass Solution {\nprivate final long mod = 1_000_000_007;\n    public int countVowelPermutation(int n) {\n        Map<Character, Long> map = new HashMap<>();\n        map.put('a', 1L);\n        map.put('e', 1L);\n        map.put('i', 1L);\n        map.put('o', 1L);\n        map.put('u', 1L);\n        for (int i = 1; i < n; ++i) {\n            Map<Character, Long> tmp = new HashMap<>();\n            tmp.put('a', (map.get('u') + map.get('e') + map.get('i')) % mod);\n            tmp.put('e', (map.get('a') + map.get('i')) % mod);\n            tmp.put('i', (map.get('e') + map.get('o')) % mod);\n            tmp.put('o', (map.get('i')) % mod);\n            tmp.put('u', (map.get('o') + map.get('i')) % mod);\n\n            map = tmp;\n        }\n        return (int) (map.values().stream().reduce(Long::sum).get() % mod);\n    }\n}\n```\n\n## 结语\n\n这次周赛4个题目全部 AC , RANK  740","source":"_posts/leetcode-周赛20191005.md","raw":"---\ntitle: LC周赛 2019-10-05\ndate: 2019-10-08 09:57:04\ntags: \n  - competition\ncategories: \n  - 算法\ndescription: 20191005周赛记录\ncover_img: https://images.unsplash.com/photo-1492366254240-43affaefc3e3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=602&q=80\nfeature_img: https://images.unsplash.com/photo-1495539406979-bf61750d38ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\n---\n\n## 1. Play with Chips\n\n### 描述\n\nThere are some chips, and the i-th chip is at position `chips[i]`.\n\nYou can perform any of the two following types of moves **any number of times** (possibly zero) **on any chip**:\n\n- Move the `i`-th chip by 2 units to the left or to the right with a cost of **0**.\n- Move the `i`-th chip by 1 unit to the left or to the right with a cost of **1**.\n\nThere can be two or more chips at the same position initially.\n\nReturn the minimum cost needed to move all the chips to the same position (any position).\n\n### 思路 \n\n如果两个chip的位置相差为偶数, 则 `cost = 0`. 否则 `coust = 1 `\n\n我们预先获取chip的一个哈希来进行缓存, 之后遍历哈希中的每一个数, 作为 **目的地**.\n\n那么我们的问题就变成 ： 找出那一个 **目的地** , 使得 `cost` 最小即可\n\n```java\n    public int minCostToMoveChips(int[] chips) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : chips) {\n            set.add(num);\n        }\n        int min = Integer.MAX_VALUE;\n        for (int num : set) {\n            int sum = 0;\n            for (int chip : chips) {\n                int dis = Math.abs(num - chip);\n                sum += dis % 2;\n                if (sum > min) break;\n            }\n            min = Math.min(sum, min);\n        }\n        return min;\n    }\n```\n\n## 2. Longest Arithmetic Subsequence of Given Difference\n\n### 描述\n\nGiven an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.\n\n**Example 1:**\n\n```\nInput: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].\n```\n\n**Example 2:**\n\n```\nInput: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.\n```\n\n**Example 3:**\n\n```\nInput: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].\n```\n\n### 思路\n\n一开始很明显想到用 `DP` 来解决. 每一步前进的同时需要缓存下当前位置, 便于后续的查找\n\n我们缓存如下的内容：\n\n- 每一个数字和它所处可能位置 `Set` 的哈希映射\n- DP 数组，用于当前 `dp[i]` 的确定\n\n一开始就这样做了，但是 error 了一次. 原因就是这里的 dp 数组并不是单调上升，因为可能会出现中间断层的情况，例如 `[1,2,3,1,2,3,4]` , 中间的 `1` 位置就是断层的出现点. (之后一想，其实也可以通过自己的维护来进行避免，问题不大)\n\n最终代码如下\n\n```java\n public int longestSubsequence(int[] arr, int difference) {\n        int n = arr.length;\n        int[] dp = new int[n];\n        Map<Integer, Set<Integer>> map = new HashMap<>();\n        dp[0] = 1;\n        Set<Integer> set = new HashSet<>();\n        set.add(0);\n        map.put(arr[0], set);\n        for (int i = 1; i < n; ++i) {\n            if (!map.containsKey(arr[i])) {\n                set = new HashSet<>();\n                set.add(i);\n                map.put(arr[i], set);\n            } else {\n                set = map.get(arr[i]);\n                set.add(i);\n                map.put(arr[i], set);\n            }\n\n            int target = arr[i] - difference;\n            if (!map.containsKey(target)) { //不包含前一个数\n                dp[i] = 1;\n            } else {\n                set = map.get(target);\n                int maxLen = 0;\n                for (int num : set) {\n                    maxLen = Math.max(maxLen, dp[num]);\n                }\n                dp[i] = maxLen + 1;\n            }\n        }\n        int ans = 0;\n        for (int num : dp) {\n            ans = Math.max(num, ans);\n        }\n        return ans;\n    }\n```\n\n## 3. Path with Maximum Gold\n\n### 描述\n\nIn a gold mine `grid` of size `m * n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.\n\nReturn the maximum amount of gold you can collect under the conditions:\n\n- Every time you are located in a cell you will collect all the gold in that cell.\n- From your position you can walk one step to the left, right, up or down.\n- You can't visit the same cell more than once.\n- Never visit a cell with `0` gold.\n- You can start and stop collecting gold from **any** position in the grid that has some gold. \n\n**Example 1:**\n\n```\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.\n```\n\n**Example 2:**\n\n```\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.\n```\n\n### 思路\n\n很简单的 DFS 算法实现, 没什么好说的\n\n```java\npublic int getMaximumGold(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int max = 0;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] != 0) {\n                    max = Math.max(max, dfs(grid, new int[]{i, j}, 0));\n                }\n            }\n        }\n        return max;\n    }\n\n    private int dfs(int[][] grid, int[] startPos, int gold) {\n        int m = grid.length, n = grid[0].length;\n        int r = startPos[0], c = startPos[1];\n        if (r < 0 || c < 0 || r >= m || c >= n || grid[r][c] == 0) return gold;\n        gold += grid[r][c];\n        int[][] nums = new int[m][n];\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                nums[i][j] = grid[i][j];\n            }\n        }\n        nums[r][c] = 0;             //Get the gold\n        int a1 = dfs(nums, new int[]{r, c + 1}, gold);\n        int b1 = dfs(nums, new int[]{r, c - 1}, gold);\n        int c1 = dfs(nums, new int[]{r + 1, c}, gold);\n        int d1 = dfs(nums, new int[]{r - 1, c}, gold);\n        return Arrays.stream(new int[]{a1, b1, c1, d1}).max().getAsInt();\n    }\n```\n\n## 4. Count Vowels Permutation\n\n### 描述\n\nGiven an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\n\n- Each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\n- Each vowel `'a'` may only be followed by an `'e'`.\n- Each vowel `'e'` may only be followed by an `'a'` or an `'i'`.\n- Each vowel `'i'` **may not** be followed by another `'i'`.\n- Each vowel `'o'` may only be followed by an `'i'` or a `'u'`.\n- Each vowel `'u'` may only be followed by an `'a'.`\n\nSince the answer may be too large, return it modulo `10^9 + 7.`\n\n**Example 1:**\n\n```\nInput: n = 1\nOutput: 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".\n```\n\n**Example 2:**\n\n```\nInput: n = 2\nOutput: 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".\n```\n\n**Example 3:** \n\n```\nInput: n = 5\nOutput: 68\n```\n\n### 思路\n\n假定某一步的最末位中, ‘a’ , ‘e’ , ‘i’ , ‘o’ , ‘u’ 的个数分别是 a , e , i , o , u ，那么下一步末位的个数就分别是 `u+e+i`, `a + i`, `e + o` , `i` , `o +i` \n\n我这里用了一个hash来保存 (小声：这个hard题是简单题的赶脚233)\n\n```java\nclass Solution {\nprivate final long mod = 1_000_000_007;\n    public int countVowelPermutation(int n) {\n        Map<Character, Long> map = new HashMap<>();\n        map.put('a', 1L);\n        map.put('e', 1L);\n        map.put('i', 1L);\n        map.put('o', 1L);\n        map.put('u', 1L);\n        for (int i = 1; i < n; ++i) {\n            Map<Character, Long> tmp = new HashMap<>();\n            tmp.put('a', (map.get('u') + map.get('e') + map.get('i')) % mod);\n            tmp.put('e', (map.get('a') + map.get('i')) % mod);\n            tmp.put('i', (map.get('e') + map.get('o')) % mod);\n            tmp.put('o', (map.get('i')) % mod);\n            tmp.put('u', (map.get('o') + map.get('i')) % mod);\n\n            map = tmp;\n        }\n        return (int) (map.values().stream().reduce(Long::sum).get() % mod);\n    }\n}\n```\n\n## 结语\n\n这次周赛4个题目全部 AC , RANK  740","slug":"leetcode-周赛20191005","published":1,"updated":"2020-02-13T02:39:49.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6pvpq5u000au6s6omiv9sqi","content":"<h2 id=\"1-Play-with-Chips\"><a href=\"#1-Play-with-Chips\" class=\"headerlink\" title=\"1. Play with Chips\"></a>1. Play with Chips</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>There are some chips, and the i-th chip is at position <code>chips[i]</code>.</p>\n<p>You can perform any of the two following types of moves <strong>any number of times</strong> (possibly zero) <strong>on any chip</strong>:</p>\n<ul>\n<li>Move the <code>i</code>-th chip by 2 units to the left or to the right with a cost of <strong>0</strong>.</li>\n<li>Move the <code>i</code>-th chip by 1 unit to the left or to the right with a cost of <strong>1</strong>.</li>\n</ul>\n<p>There can be two or more chips at the same position initially.</p>\n<p>Return the minimum cost needed to move all the chips to the same position (any position).</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>如果两个chip的位置相差为偶数, 则 <code>cost = 0</code>. 否则 <code>coust = 1</code></p>\n<p>我们预先获取chip的一个哈希来进行缓存, 之后遍历哈希中的每一个数, 作为 <strong>目的地</strong>.</p>\n<p>那么我们的问题就变成 ： 找出那一个 <strong>目的地</strong> , 使得 <code>cost</code> 最小即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minCostToMoveChips</span><span class=\"params\">(<span class=\"keyword\">int</span>[] chips)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : chips) &#123;</span><br><span class=\"line\">        set.add(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : set) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> chip : chips) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> dis = Math.abs(num - chip);</span><br><span class=\"line\">            sum += dis % <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &gt; min) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        min = Math.min(sum, min);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Longest-Arithmetic-Subsequence-of-Given-Difference\"><a href=\"#2-Longest-Arithmetic-Subsequence-of-Given-Difference\" class=\"headerlink\" title=\"2. Longest Arithmetic Subsequence of Given Difference\"></a>2. Longest Arithmetic Subsequence of Given Difference</h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Given an integer array <code>arr</code> and an integer <code>difference</code>, return the length of the longest subsequence in <code>arr</code> which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals <code>difference</code>.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [1,2,3,4], difference = 1</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: The longest arithmetic subsequence is [1,2,3,4].</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [1,3,5,7], difference = 1</span><br><span class=\"line\">Output: 1</span><br><span class=\"line\">Explanation: The longest arithmetic subsequence is any single element.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: The longest arithmetic subsequence is [7,5,3,1].</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>一开始很明显想到用 <code>DP</code> 来解决. 每一步前进的同时需要缓存下当前位置, 便于后续的查找</p>\n<p>我们缓存如下的内容：</p>\n<ul>\n<li>每一个数字和它所处可能位置 <code>Set</code> 的哈希映射</li>\n<li>DP 数组，用于当前 <code>dp[i]</code> 的确定</li>\n</ul>\n<p>一开始就这样做了，但是 error 了一次. 原因就是这里的 dp 数组并不是单调上升，因为可能会出现中间断层的情况，例如 <code>[1,2,3,1,2,3,4]</code> , 中间的 <code>1</code> 位置就是断层的出现点. (之后一想，其实也可以通过自己的维护来进行避免，问题不大)</p>\n<p>最终代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestSubsequence</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> difference)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">       <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">       Map&lt;Integer, Set&lt;Integer&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">       dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">       Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">       set.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">       map.put(arr[<span class=\"number\">0</span>], set);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!map.containsKey(arr[i])) &#123;</span><br><span class=\"line\">               set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">               set.add(i);</span><br><span class=\"line\">               map.put(arr[i], set);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               set = map.get(arr[i]);</span><br><span class=\"line\">               set.add(i);</span><br><span class=\"line\">               map.put(arr[i], set);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">int</span> target = arr[i] - difference;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!map.containsKey(target)) &#123; <span class=\"comment\">//不包含前一个数</span></span><br><span class=\"line\">               dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               set = map.get(target);</span><br><span class=\"line\">               <span class=\"keyword\">int</span> maxLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : set) &#123;</span><br><span class=\"line\">                   maxLen = Math.max(maxLen, dp[num]);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               dp[i] = maxLen + <span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : dp) &#123;</span><br><span class=\"line\">           ans = Math.max(num, ans);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Path-with-Maximum-Gold\"><a href=\"#3-Path-with-Maximum-Gold\" class=\"headerlink\" title=\"3. Path with Maximum Gold\"></a>3. Path with Maximum Gold</h2><h3 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>In a gold mine <code>grid</code> of size <code>m * n</code>, each cell in this mine has an integer representing the amount of gold in that cell, <code>0</code> if it is empty.</p>\n<p>Return the maximum amount of gold you can collect under the conditions:</p>\n<ul>\n<li>Every time you are located in a cell you will collect all the gold in that cell.</li>\n<li>From your position you can walk one step to the left, right, up or down.</li>\n<li>You can’t visit the same cell more than once.</li>\n<li>Never visit a cell with <code>0</code> gold.</li>\n<li>You can start and stop collecting gold from <strong>any</strong> position in the grid that has some gold. </li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: grid = [[0,6,0],[5,8,7],[0,9,0]]</span><br><span class=\"line\">Output: 24</span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">[[0,6,0],</span><br><span class=\"line\"> [5,8,7],</span><br><span class=\"line\"> [0,9,0]]</span><br><span class=\"line\">Path to get the maximum gold, 9 -&gt; 8 -&gt; 7.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]</span><br><span class=\"line\">Output: 28</span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">[[1,0,7],</span><br><span class=\"line\"> [2,0,6],</span><br><span class=\"line\"> [3,4,5],</span><br><span class=\"line\"> [0,3,0],</span><br><span class=\"line\"> [9,0,20]]</span><br><span class=\"line\">Path to get the maximum gold, 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>很简单的 DFS 算法实现, 没什么好说的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaximumGold</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    max = Math.max(max, dfs(grid, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i, j&#125;, <span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid, <span class=\"keyword\">int</span>[] startPos, <span class=\"keyword\">int</span> gold)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = grid.length, n = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = startPos[<span class=\"number\">0</span>], c = startPos[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &lt; <span class=\"number\">0</span> || c &lt; <span class=\"number\">0</span> || r &gt;= m || c &gt;= n || grid[r][c] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> gold;</span><br><span class=\"line\">        gold += grid[r][c];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] nums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                nums[i][j] = grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[r][c] = <span class=\"number\">0</span>;             <span class=\"comment\">//Get the gold</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a1 = dfs(nums, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;r, c + <span class=\"number\">1</span>&#125;, gold);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b1 = dfs(nums, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;r, c - <span class=\"number\">1</span>&#125;, gold);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c1 = dfs(nums, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;r + <span class=\"number\">1</span>, c&#125;, gold);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d1 = dfs(nums, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;r - <span class=\"number\">1</span>, c&#125;, gold);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.stream(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;a1, b1, c1, d1&#125;).max().getAsInt();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Count-Vowels-Permutation\"><a href=\"#4-Count-Vowels-Permutation\" class=\"headerlink\" title=\"4. Count Vowels Permutation\"></a>4. Count Vowels Permutation</h2><h3 id=\"描述-3\"><a href=\"#描述-3\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Given an integer <code>n</code>, your task is to count how many strings of length <code>n</code> can be formed under the following rules:</p>\n<ul>\n<li>Each character is a lower case vowel (<code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>)</li>\n<li>Each vowel <code>&#39;a&#39;</code> may only be followed by an <code>&#39;e&#39;</code>.</li>\n<li>Each vowel <code>&#39;e&#39;</code> may only be followed by an <code>&#39;a&#39;</code> or an <code>&#39;i&#39;</code>.</li>\n<li>Each vowel <code>&#39;i&#39;</code> <strong>may not</strong> be followed by another <code>&#39;i&#39;</code>.</li>\n<li>Each vowel <code>&#39;o&#39;</code> may only be followed by an <code>&#39;i&#39;</code> or a <code>&#39;u&#39;</code>.</li>\n<li>Each vowel <code>&#39;u&#39;</code> may only be followed by an <code>&#39;a&#39;.</code></li>\n</ul>\n<p>Since the answer may be too large, return it modulo <code>10^9 + 7.</code></p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n = 1</span><br><span class=\"line\">Output: 5</span><br><span class=\"line\">Explanation: All possible strings are: &quot;a&quot;, &quot;e&quot;, &quot;i&quot; , &quot;o&quot; and &quot;u&quot;.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n = 2</span><br><span class=\"line\">Output: 10</span><br><span class=\"line\">Explanation: All possible strings are: &quot;ae&quot;, &quot;ea&quot;, &quot;ei&quot;, &quot;ia&quot;, &quot;ie&quot;, &quot;io&quot;, &quot;iu&quot;, &quot;oi&quot;, &quot;ou&quot; and &quot;ua&quot;.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n = 5</span><br><span class=\"line\">Output: 68</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>假定某一步的最末位中, ‘a’ , ‘e’ , ‘i’ , ‘o’ , ‘u’ 的个数分别是 a , e , i , o , u ，那么下一步末位的个数就分别是 <code>u+e+i</code>, <code>a + i</code>, <code>e + o</code> , <code>i</code> , <code>o +i</code> </p>\n<p>我这里用了一个hash来保存 (小声：这个hard题是简单题的赶脚233)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> mod = <span class=\"number\">1_000_000_007</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">countVowelPermutation</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;Character, Long&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">'a'</span>, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'e'</span>, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'i'</span>, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'o'</span>, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'u'</span>, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            Map&lt;Character, Long&gt; tmp = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            tmp.put(<span class=\"string\">'a'</span>, (map.get(<span class=\"string\">'u'</span>) + map.get(<span class=\"string\">'e'</span>) + map.get(<span class=\"string\">'i'</span>)) % mod);</span><br><span class=\"line\">            tmp.put(<span class=\"string\">'e'</span>, (map.get(<span class=\"string\">'a'</span>) + map.get(<span class=\"string\">'i'</span>)) % mod);</span><br><span class=\"line\">            tmp.put(<span class=\"string\">'i'</span>, (map.get(<span class=\"string\">'e'</span>) + map.get(<span class=\"string\">'o'</span>)) % mod);</span><br><span class=\"line\">            tmp.put(<span class=\"string\">'o'</span>, (map.get(<span class=\"string\">'i'</span>)) % mod);</span><br><span class=\"line\">            tmp.put(<span class=\"string\">'u'</span>, (map.get(<span class=\"string\">'o'</span>) + map.get(<span class=\"string\">'i'</span>)) % mod);</span><br><span class=\"line\"></span><br><span class=\"line\">            map = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (map.values().stream().reduce(Long::sum).get() % mod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这次周赛4个题目全部 AC , RANK  740</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Play-with-Chips\"><a href=\"#1-Play-with-Chips\" class=\"headerlink\" title=\"1. Play with Chips\"></a>1. Play with Chips</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>There are some chips, and the i-th chip is at position <code>chips[i]</code>.</p>\n<p>You can perform any of the two following types of moves <strong>any number of times</strong> (possibly zero) <strong>on any chip</strong>:</p>\n<ul>\n<li>Move the <code>i</code>-th chip by 2 units to the left or to the right with a cost of <strong>0</strong>.</li>\n<li>Move the <code>i</code>-th chip by 1 unit to the left or to the right with a cost of <strong>1</strong>.</li>\n</ul>\n<p>There can be two or more chips at the same position initially.</p>\n<p>Return the minimum cost needed to move all the chips to the same position (any position).</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>如果两个chip的位置相差为偶数, 则 <code>cost = 0</code>. 否则 <code>coust = 1</code></p>\n<p>我们预先获取chip的一个哈希来进行缓存, 之后遍历哈希中的每一个数, 作为 <strong>目的地</strong>.</p>\n<p>那么我们的问题就变成 ： 找出那一个 <strong>目的地</strong> , 使得 <code>cost</code> 最小即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minCostToMoveChips</span><span class=\"params\">(<span class=\"keyword\">int</span>[] chips)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : chips) &#123;</span><br><span class=\"line\">        set.add(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : set) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> chip : chips) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> dis = Math.abs(num - chip);</span><br><span class=\"line\">            sum += dis % <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &gt; min) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        min = Math.min(sum, min);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Longest-Arithmetic-Subsequence-of-Given-Difference\"><a href=\"#2-Longest-Arithmetic-Subsequence-of-Given-Difference\" class=\"headerlink\" title=\"2. Longest Arithmetic Subsequence of Given Difference\"></a>2. Longest Arithmetic Subsequence of Given Difference</h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Given an integer array <code>arr</code> and an integer <code>difference</code>, return the length of the longest subsequence in <code>arr</code> which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals <code>difference</code>.</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [1,2,3,4], difference = 1</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: The longest arithmetic subsequence is [1,2,3,4].</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [1,3,5,7], difference = 1</span><br><span class=\"line\">Output: 1</span><br><span class=\"line\">Explanation: The longest arithmetic subsequence is any single element.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: The longest arithmetic subsequence is [7,5,3,1].</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>一开始很明显想到用 <code>DP</code> 来解决. 每一步前进的同时需要缓存下当前位置, 便于后续的查找</p>\n<p>我们缓存如下的内容：</p>\n<ul>\n<li>每一个数字和它所处可能位置 <code>Set</code> 的哈希映射</li>\n<li>DP 数组，用于当前 <code>dp[i]</code> 的确定</li>\n</ul>\n<p>一开始就这样做了，但是 error 了一次. 原因就是这里的 dp 数组并不是单调上升，因为可能会出现中间断层的情况，例如 <code>[1,2,3,1,2,3,4]</code> , 中间的 <code>1</code> 位置就是断层的出现点. (之后一想，其实也可以通过自己的维护来进行避免，问题不大)</p>\n<p>最终代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestSubsequence</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> difference)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> n = arr.length;</span><br><span class=\"line\">       <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">       Map&lt;Integer, Set&lt;Integer&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">       dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">       Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">       set.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">       map.put(arr[<span class=\"number\">0</span>], set);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!map.containsKey(arr[i])) &#123;</span><br><span class=\"line\">               set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">               set.add(i);</span><br><span class=\"line\">               map.put(arr[i], set);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               set = map.get(arr[i]);</span><br><span class=\"line\">               set.add(i);</span><br><span class=\"line\">               map.put(arr[i], set);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">int</span> target = arr[i] - difference;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!map.containsKey(target)) &#123; <span class=\"comment\">//不包含前一个数</span></span><br><span class=\"line\">               dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               set = map.get(target);</span><br><span class=\"line\">               <span class=\"keyword\">int</span> maxLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : set) &#123;</span><br><span class=\"line\">                   maxLen = Math.max(maxLen, dp[num]);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               dp[i] = maxLen + <span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : dp) &#123;</span><br><span class=\"line\">           ans = Math.max(num, ans);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Path-with-Maximum-Gold\"><a href=\"#3-Path-with-Maximum-Gold\" class=\"headerlink\" title=\"3. Path with Maximum Gold\"></a>3. Path with Maximum Gold</h2><h3 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>In a gold mine <code>grid</code> of size <code>m * n</code>, each cell in this mine has an integer representing the amount of gold in that cell, <code>0</code> if it is empty.</p>\n<p>Return the maximum amount of gold you can collect under the conditions:</p>\n<ul>\n<li>Every time you are located in a cell you will collect all the gold in that cell.</li>\n<li>From your position you can walk one step to the left, right, up or down.</li>\n<li>You can’t visit the same cell more than once.</li>\n<li>Never visit a cell with <code>0</code> gold.</li>\n<li>You can start and stop collecting gold from <strong>any</strong> position in the grid that has some gold. </li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: grid = [[0,6,0],[5,8,7],[0,9,0]]</span><br><span class=\"line\">Output: 24</span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">[[0,6,0],</span><br><span class=\"line\"> [5,8,7],</span><br><span class=\"line\"> [0,9,0]]</span><br><span class=\"line\">Path to get the maximum gold, 9 -&gt; 8 -&gt; 7.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]</span><br><span class=\"line\">Output: 28</span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">[[1,0,7],</span><br><span class=\"line\"> [2,0,6],</span><br><span class=\"line\"> [3,4,5],</span><br><span class=\"line\"> [0,3,0],</span><br><span class=\"line\"> [9,0,20]]</span><br><span class=\"line\">Path to get the maximum gold, 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>很简单的 DFS 算法实现, 没什么好说的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaximumGold</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = grid.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    max = Math.max(max, dfs(grid, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i, j&#125;, <span class=\"number\">0</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid, <span class=\"keyword\">int</span>[] startPos, <span class=\"keyword\">int</span> gold)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = grid.length, n = grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = startPos[<span class=\"number\">0</span>], c = startPos[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r &lt; <span class=\"number\">0</span> || c &lt; <span class=\"number\">0</span> || r &gt;= m || c &gt;= n || grid[r][c] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> gold;</span><br><span class=\"line\">        gold += grid[r][c];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] nums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                nums[i][j] = grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[r][c] = <span class=\"number\">0</span>;             <span class=\"comment\">//Get the gold</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a1 = dfs(nums, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;r, c + <span class=\"number\">1</span>&#125;, gold);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b1 = dfs(nums, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;r, c - <span class=\"number\">1</span>&#125;, gold);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c1 = dfs(nums, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;r + <span class=\"number\">1</span>, c&#125;, gold);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d1 = dfs(nums, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;r - <span class=\"number\">1</span>, c&#125;, gold);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.stream(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;a1, b1, c1, d1&#125;).max().getAsInt();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Count-Vowels-Permutation\"><a href=\"#4-Count-Vowels-Permutation\" class=\"headerlink\" title=\"4. Count Vowels Permutation\"></a>4. Count Vowels Permutation</h2><h3 id=\"描述-3\"><a href=\"#描述-3\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Given an integer <code>n</code>, your task is to count how many strings of length <code>n</code> can be formed under the following rules:</p>\n<ul>\n<li>Each character is a lower case vowel (<code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>)</li>\n<li>Each vowel <code>&#39;a&#39;</code> may only be followed by an <code>&#39;e&#39;</code>.</li>\n<li>Each vowel <code>&#39;e&#39;</code> may only be followed by an <code>&#39;a&#39;</code> or an <code>&#39;i&#39;</code>.</li>\n<li>Each vowel <code>&#39;i&#39;</code> <strong>may not</strong> be followed by another <code>&#39;i&#39;</code>.</li>\n<li>Each vowel <code>&#39;o&#39;</code> may only be followed by an <code>&#39;i&#39;</code> or a <code>&#39;u&#39;</code>.</li>\n<li>Each vowel <code>&#39;u&#39;</code> may only be followed by an <code>&#39;a&#39;.</code></li>\n</ul>\n<p>Since the answer may be too large, return it modulo <code>10^9 + 7.</code></p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n = 1</span><br><span class=\"line\">Output: 5</span><br><span class=\"line\">Explanation: All possible strings are: &quot;a&quot;, &quot;e&quot;, &quot;i&quot; , &quot;o&quot; and &quot;u&quot;.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n = 2</span><br><span class=\"line\">Output: 10</span><br><span class=\"line\">Explanation: All possible strings are: &quot;ae&quot;, &quot;ea&quot;, &quot;ei&quot;, &quot;ia&quot;, &quot;ie&quot;, &quot;io&quot;, &quot;iu&quot;, &quot;oi&quot;, &quot;ou&quot; and &quot;ua&quot;.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 3:</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n = 5</span><br><span class=\"line\">Output: 68</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>假定某一步的最末位中, ‘a’ , ‘e’ , ‘i’ , ‘o’ , ‘u’ 的个数分别是 a , e , i , o , u ，那么下一步末位的个数就分别是 <code>u+e+i</code>, <code>a + i</code>, <code>e + o</code> , <code>i</code> , <code>o +i</code> </p>\n<p>我这里用了一个hash来保存 (小声：这个hard题是简单题的赶脚233)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> mod = <span class=\"number\">1_000_000_007</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">countVowelPermutation</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;Character, Long&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">'a'</span>, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'e'</span>, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'i'</span>, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'o'</span>, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">'u'</span>, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            Map&lt;Character, Long&gt; tmp = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">            tmp.put(<span class=\"string\">'a'</span>, (map.get(<span class=\"string\">'u'</span>) + map.get(<span class=\"string\">'e'</span>) + map.get(<span class=\"string\">'i'</span>)) % mod);</span><br><span class=\"line\">            tmp.put(<span class=\"string\">'e'</span>, (map.get(<span class=\"string\">'a'</span>) + map.get(<span class=\"string\">'i'</span>)) % mod);</span><br><span class=\"line\">            tmp.put(<span class=\"string\">'i'</span>, (map.get(<span class=\"string\">'e'</span>) + map.get(<span class=\"string\">'o'</span>)) % mod);</span><br><span class=\"line\">            tmp.put(<span class=\"string\">'o'</span>, (map.get(<span class=\"string\">'i'</span>)) % mod);</span><br><span class=\"line\">            tmp.put(<span class=\"string\">'u'</span>, (map.get(<span class=\"string\">'o'</span>) + map.get(<span class=\"string\">'i'</span>)) % mod);</span><br><span class=\"line\"></span><br><span class=\"line\">            map = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (map.values().stream().reduce(Long::sum).get() % mod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这次周赛4个题目全部 AC , RANK  740</p>\n"},{"title":"数据库-索引","date":"2019-12-05T13:54:56.000Z","author":"Caribou","description":"数据库索引相关内容","cover_img":"https://images.unsplash.com/photo-1533750204176-3b0d38e9ac1e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","feature_img":"https://images.unsplash.com/photo-1504639725590-34d0984388bd?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80","_content":"\n## 索引\n\n#### 页存储\n\n<img src=\"https://i.loli.net/2019/12/05/dQE6NVkHZJcWfye.png\" style=\"zoom:50%;\" />\n\n如上就是数据库在Disk Storage的一个存储方式。一个页包含若干 *Data Rows* , 通过 *Row directory* 来进行索引\n\n> A row in a table can be uniquely specified with the page number (P) and slot number (S).\n\n##### 位图索引\n\nhttps://www.cnblogs.com/LBSer/p/3322630.html\n\n位图索引中只维护distinct值，也就是说重复的值是不维护在树中\n\n对于每一个列建立一个\n\n- 位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，而身份证号这种类型不适合用位图索引。\n\n- 此外，位图索引适合静态数据，而不适合索引频繁更新的列\n\n##### 散列索引\n\n散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个槽中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。\n\n散列索引根据对应键的散列码来找到最终的索引项的技术，其实和B树就差不多，也就是一种索引之上的二级辅助索引，我理解散列索引都是二级或更高级的稀疏索引，否则桶就太多了，效率也不会很高\n\n##### 聚簇索引\n\n所谓聚簇索引，就是指**主索引文件**和**数据文件**为==同一份文件==，聚簇索引主要用在**Innodb**存储引擎中。在该索引实现方式中B+Tree的叶子节点上的data就是数据本身，key为主键，如果是一般索引的话，data便会指向对应的主索引，如下图所示：\n\n在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。\n\n##### 非聚簇索引\n\n聚簇索引的叶节点就是数据节点，而非聚簇索引的叶节点仍然是索引节点，并保留一个链接**指向对应数据块**。\n\n##### 辅助索引\n\n在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要**二次查找**。辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据叶，再通过数据叶中的Page Directory找到数据行\n\n##### 唯一索引\n\n表明此索引的==每一个索引值只对应唯一的数据记录==，对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复\n\n##### 主键索引\n\n在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问\n\n---\n\n数据库引擎 ：myISAM , innodb\n\nmyisam索引：因为myisam的索引和数据是分开存储存储的，myisam通过**key_buffer**把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因  \n\ninnodb索引：innodb的数据和索引放在一起，当找到索引也就找到了数据\n\n<img src=\"https://img-blog.csdn.net/20161102111454921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\" style=\"zoom:75%;\" />\n\n1.对于**非聚簇索引表**来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据。\n\n2.对于**聚簇索引表**来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)\n\n> ##### 聚簇索引的优点\n>\n> 1.当你需要取出==一定范围内==的数据时，用聚簇索引也比用非聚簇索引好。\n>\n> 2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。\n>\n> 3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。\n>\n> ##### 聚簇索引的缺点\n>\n> 1.**插入速度严重依赖于插入顺序**，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。\n>\n> 2.**更新主键的代价很高，因为将会导致被更新的行移动**。因此，对于InnoDB表，我们一般定义主键为不可更新。\n>\n> 3.**二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。**\n>\n> 二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。\n>\n> 4.**采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多**，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价。\n\n\n\n","source":"_posts/数据库整理-索引.md","raw":"---\ntitle: 数据库-索引\ndate: 2019-12-05 21:54:56\nauthor: Caribou\ntags: \n  - 笔记\ncategories: \n  - 笔记\ndescription: 数据库索引相关内容\ncover_img: https://images.unsplash.com/photo-1533750204176-3b0d38e9ac1e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\nfeature_img: https://images.unsplash.com/photo-1504639725590-34d0984388bd?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80\n---\n\n## 索引\n\n#### 页存储\n\n<img src=\"https://i.loli.net/2019/12/05/dQE6NVkHZJcWfye.png\" style=\"zoom:50%;\" />\n\n如上就是数据库在Disk Storage的一个存储方式。一个页包含若干 *Data Rows* , 通过 *Row directory* 来进行索引\n\n> A row in a table can be uniquely specified with the page number (P) and slot number (S).\n\n##### 位图索引\n\nhttps://www.cnblogs.com/LBSer/p/3322630.html\n\n位图索引中只维护distinct值，也就是说重复的值是不维护在树中\n\n对于每一个列建立一个\n\n- 位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，而身份证号这种类型不适合用位图索引。\n\n- 此外，位图索引适合静态数据，而不适合索引频繁更新的列\n\n##### 散列索引\n\n散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个槽中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。\n\n散列索引根据对应键的散列码来找到最终的索引项的技术，其实和B树就差不多，也就是一种索引之上的二级辅助索引，我理解散列索引都是二级或更高级的稀疏索引，否则桶就太多了，效率也不会很高\n\n##### 聚簇索引\n\n所谓聚簇索引，就是指**主索引文件**和**数据文件**为==同一份文件==，聚簇索引主要用在**Innodb**存储引擎中。在该索引实现方式中B+Tree的叶子节点上的data就是数据本身，key为主键，如果是一般索引的话，data便会指向对应的主索引，如下图所示：\n\n在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。\n\n##### 非聚簇索引\n\n聚簇索引的叶节点就是数据节点，而非聚簇索引的叶节点仍然是索引节点，并保留一个链接**指向对应数据块**。\n\n##### 辅助索引\n\n在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要**二次查找**。辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据叶，再通过数据叶中的Page Directory找到数据行\n\n##### 唯一索引\n\n表明此索引的==每一个索引值只对应唯一的数据记录==，对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复\n\n##### 主键索引\n\n在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问\n\n---\n\n数据库引擎 ：myISAM , innodb\n\nmyisam索引：因为myisam的索引和数据是分开存储存储的，myisam通过**key_buffer**把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因  \n\ninnodb索引：innodb的数据和索引放在一起，当找到索引也就找到了数据\n\n<img src=\"https://img-blog.csdn.net/20161102111454921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\" style=\"zoom:75%;\" />\n\n1.对于**非聚簇索引表**来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据。\n\n2.对于**聚簇索引表**来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)\n\n> ##### 聚簇索引的优点\n>\n> 1.当你需要取出==一定范围内==的数据时，用聚簇索引也比用非聚簇索引好。\n>\n> 2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。\n>\n> 3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。\n>\n> ##### 聚簇索引的缺点\n>\n> 1.**插入速度严重依赖于插入顺序**，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。\n>\n> 2.**更新主键的代价很高，因为将会导致被更新的行移动**。因此，对于InnoDB表，我们一般定义主键为不可更新。\n>\n> 3.**二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。**\n>\n> 二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。\n>\n> 4.**采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多**，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价。\n\n\n\n","slug":"数据库整理-索引","published":1,"updated":"2020-02-13T02:35:51.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6pvpq5x000du6s6asvvda4t","content":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h4 id=\"页存储\"><a href=\"#页存储\" class=\"headerlink\" title=\"页存储\"></a>页存储</h4><img src=\"https://i.loli.net/2019/12/05/dQE6NVkHZJcWfye.png\" style=\"zoom:50%;\">\n\n<p>如上就是数据库在Disk Storage的一个存储方式。一个页包含若干 <em>Data Rows</em> , 通过 <em>Row directory</em> 来进行索引</p>\n<blockquote>\n<p>A row in a table can be uniquely specified with the page number (P) and slot number (S).</p>\n</blockquote>\n<h5 id=\"位图索引\"><a href=\"#位图索引\" class=\"headerlink\" title=\"位图索引\"></a>位图索引</h5><p><a href=\"https://www.cnblogs.com/LBSer/p/3322630.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/LBSer/p/3322630.html</a></p>\n<p>位图索引中只维护distinct值，也就是说重复的值是不维护在树中</p>\n<p>对于每一个列建立一个</p>\n<ul>\n<li><p>位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，而身份证号这种类型不适合用位图索引。</p>\n</li>\n<li><p>此外，位图索引适合静态数据，而不适合索引频繁更新的列</p>\n</li>\n</ul>\n<h5 id=\"散列索引\"><a href=\"#散列索引\" class=\"headerlink\" title=\"散列索引\"></a>散列索引</h5><p>散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个槽中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。</p>\n<p>散列索引根据对应键的散列码来找到最终的索引项的技术，其实和B树就差不多，也就是一种索引之上的二级辅助索引，我理解散列索引都是二级或更高级的稀疏索引，否则桶就太多了，效率也不会很高</p>\n<h5 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h5><p>所谓聚簇索引，就是指<strong>主索引文件</strong>和<strong>数据文件</strong>为==同一份文件==，聚簇索引主要用在<strong>Innodb</strong>存储引擎中。在该索引实现方式中B+Tree的叶子节点上的data就是数据本身，key为主键，如果是一般索引的话，data便会指向对应的主索引，如下图所示：</p>\n<p>在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。</p>\n<h5 id=\"非聚簇索引\"><a href=\"#非聚簇索引\" class=\"headerlink\" title=\"非聚簇索引\"></a>非聚簇索引</h5><p>聚簇索引的叶节点就是数据节点，而非聚簇索引的叶节点仍然是索引节点，并保留一个链接<strong>指向对应数据块</strong>。</p>\n<h5 id=\"辅助索引\"><a href=\"#辅助索引\" class=\"headerlink\" title=\"辅助索引\"></a>辅助索引</h5><p>在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要<strong>二次查找</strong>。辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据叶，再通过数据叶中的Page Directory找到数据行</p>\n<h5 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h5><p>表明此索引的==每一个索引值只对应唯一的数据记录==，对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复</p>\n<h5 id=\"主键索引\"><a href=\"#主键索引\" class=\"headerlink\" title=\"主键索引\"></a>主键索引</h5><p>在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问</p>\n<hr>\n<p>数据库引擎 ：myISAM , innodb</p>\n<p>myisam索引：因为myisam的索引和数据是分开存储存储的，myisam通过<strong>key_buffer</strong>把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因  </p>\n<p>innodb索引：innodb的数据和索引放在一起，当找到索引也就找到了数据</p>\n<img src=\"https://img-blog.csdn.net/20161102111454921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\" style=\"zoom:75%;\">\n\n<p>1.对于<strong>非聚簇索引表</strong>来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据。</p>\n<p>2.对于<strong>聚簇索引表</strong>来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)</p>\n<blockquote>\n<h5 id=\"聚簇索引的优点\"><a href=\"#聚簇索引的优点\" class=\"headerlink\" title=\"聚簇索引的优点\"></a>聚簇索引的优点</h5><p>1.当你需要取出==一定范围内==的数据时，用聚簇索引也比用非聚簇索引好。</p>\n<p>2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。</p>\n<p>3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</p>\n<h5 id=\"聚簇索引的缺点\"><a href=\"#聚簇索引的缺点\" class=\"headerlink\" title=\"聚簇索引的缺点\"></a>聚簇索引的缺点</h5><p>1.<strong>插入速度严重依赖于插入顺序</strong>，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。</p>\n<p>2.<strong>更新主键的代价很高，因为将会导致被更新的行移动</strong>。因此，对于InnoDB表，我们一般定义主键为不可更新。</p>\n<p>3.<strong>二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。</strong></p>\n<p>二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。</p>\n<p>4.<strong>采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多</strong>，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h4 id=\"页存储\"><a href=\"#页存储\" class=\"headerlink\" title=\"页存储\"></a>页存储</h4><img src=\"https://i.loli.net/2019/12/05/dQE6NVkHZJcWfye.png\" style=\"zoom:50%;\">\n\n<p>如上就是数据库在Disk Storage的一个存储方式。一个页包含若干 <em>Data Rows</em> , 通过 <em>Row directory</em> 来进行索引</p>\n<blockquote>\n<p>A row in a table can be uniquely specified with the page number (P) and slot number (S).</p>\n</blockquote>\n<h5 id=\"位图索引\"><a href=\"#位图索引\" class=\"headerlink\" title=\"位图索引\"></a>位图索引</h5><p><a href=\"https://www.cnblogs.com/LBSer/p/3322630.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/LBSer/p/3322630.html</a></p>\n<p>位图索引中只维护distinct值，也就是说重复的值是不维护在树中</p>\n<p>对于每一个列建立一个</p>\n<ul>\n<li><p>位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，而身份证号这种类型不适合用位图索引。</p>\n</li>\n<li><p>此外，位图索引适合静态数据，而不适合索引频繁更新的列</p>\n</li>\n</ul>\n<h5 id=\"散列索引\"><a href=\"#散列索引\" class=\"headerlink\" title=\"散列索引\"></a>散列索引</h5><p>散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个槽中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。</p>\n<p>散列索引根据对应键的散列码来找到最终的索引项的技术，其实和B树就差不多，也就是一种索引之上的二级辅助索引，我理解散列索引都是二级或更高级的稀疏索引，否则桶就太多了，效率也不会很高</p>\n<h5 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h5><p>所谓聚簇索引，就是指<strong>主索引文件</strong>和<strong>数据文件</strong>为==同一份文件==，聚簇索引主要用在<strong>Innodb</strong>存储引擎中。在该索引实现方式中B+Tree的叶子节点上的data就是数据本身，key为主键，如果是一般索引的话，data便会指向对应的主索引，如下图所示：</p>\n<p>在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。</p>\n<h5 id=\"非聚簇索引\"><a href=\"#非聚簇索引\" class=\"headerlink\" title=\"非聚簇索引\"></a>非聚簇索引</h5><p>聚簇索引的叶节点就是数据节点，而非聚簇索引的叶节点仍然是索引节点，并保留一个链接<strong>指向对应数据块</strong>。</p>\n<h5 id=\"辅助索引\"><a href=\"#辅助索引\" class=\"headerlink\" title=\"辅助索引\"></a>辅助索引</h5><p>在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要<strong>二次查找</strong>。辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据叶，再通过数据叶中的Page Directory找到数据行</p>\n<h5 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h5><p>表明此索引的==每一个索引值只对应唯一的数据记录==，对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复</p>\n<h5 id=\"主键索引\"><a href=\"#主键索引\" class=\"headerlink\" title=\"主键索引\"></a>主键索引</h5><p>在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问</p>\n<hr>\n<p>数据库引擎 ：myISAM , innodb</p>\n<p>myisam索引：因为myisam的索引和数据是分开存储存储的，myisam通过<strong>key_buffer</strong>把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因  </p>\n<p>innodb索引：innodb的数据和索引放在一起，当找到索引也就找到了数据</p>\n<img src=\"https://img-blog.csdn.net/20161102111454921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\" style=\"zoom:75%;\">\n\n<p>1.对于<strong>非聚簇索引表</strong>来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据。</p>\n<p>2.对于<strong>聚簇索引表</strong>来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)</p>\n<blockquote>\n<h5 id=\"聚簇索引的优点\"><a href=\"#聚簇索引的优点\" class=\"headerlink\" title=\"聚簇索引的优点\"></a>聚簇索引的优点</h5><p>1.当你需要取出==一定范围内==的数据时，用聚簇索引也比用非聚簇索引好。</p>\n<p>2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。</p>\n<p>3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</p>\n<h5 id=\"聚簇索引的缺点\"><a href=\"#聚簇索引的缺点\" class=\"headerlink\" title=\"聚簇索引的缺点\"></a>聚簇索引的缺点</h5><p>1.<strong>插入速度严重依赖于插入顺序</strong>，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。</p>\n<p>2.<strong>更新主键的代价很高，因为将会导致被更新的行移动</strong>。因此，对于InnoDB表，我们一般定义主键为不可更新。</p>\n<p>3.<strong>二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。</strong></p>\n<p>二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。</p>\n<p>4.<strong>采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多</strong>，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价。</p>\n</blockquote>\n"},{"title":"背包问题","date":"2020-01-15T09:13:36.000Z","description":"关注背包九讲中的内容, 重点考察DP的思考想法","cover_img":"https://images.unsplash.com/photo-1581463455583-40abcfc90be7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80","feature_img":"https://images.unsplash.com/photo-1581463455583-40abcfc90be7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80","_content":"\n### 1. 01背包问题\n\n有 $N$ 件物品和一个容量是 $V$ 的背包。每件物品只能使用一次。\n\n分析：\n\n- 每一个背包只有 **拿出 or 不拿出** 两种情况\n- 对于 **dp** 数组，我们某一个状态 `dp[i][j]` 表示 **前i种背包的情况下，他们的总重量是 j 的最优解**\n  - 如果 **i** 背包不拿，那么 `dp[i][j] = dp[i - 1][j]`\n  - 如果 **i** 背包拿取，那么 `dp[i][j] = dp[i - 1][j - weights[i]] + values[i]`\n    - 也就是说，拿取之后，需要看剩下的部分最优解\n\n#### 算法优化\n\n根据之前的状态转移方程，我们可以约减一维的 **dp** 空间\n\n改进之后的 **dp** 状态转移方程如下：\n\n`dp[i] = max(dp[j], dp[j - weights[i]] + values[i])`\n\n> 为什么在内层循环，**j** 需要逆序？\n>\n> 在没有开始计算的时候，**dp[i]表示的是dp\\[i-1]\\[j]** 。而当我们需要计算 `dp[i] = max(dp[j], dp[j - weights[i]] + values[i])`的时候，需要保证 `dp[j - w[i]]` 是 **没有被改变的**。因此需要**从后往前**\n\n### 2. 完全背包问题\n\n每一件物品可以 **无限次** 拿取\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\nint main(){\n    int N , V;\n    cin >> N >> V;\n    vector<int> w(N + 1) , v(N + 1);\n    for(int i = 1 ; i <= N ; ++i) cin >> w[i] >> v[i];\n    \n    vector<vector<int>> dp(N + 1 , vector<int>(V + 1 , 0));\n    \n    for(int i = 1; i <= N ; ++i){\n        for(int j = 0 ;j <= V; ++j){\n            dp[i][j] = dp[i - 1][j];\n            for(int k = 0 ; k*w[i] <= j; ++k){\n                dp[i][j] = max(dp[i][j] , dp[i][j - k * w[i]] + k * v[i]);\n            }\n        }\n    }\n    \n    cout << dp[N][V] << endl;\n    \n}\n```\n\n最重要的状态转移方程对比\n\n- **01背包** ：`dp[i][j] = max(dp[i-1][j],dp[i - 1][j - w[i]] + v[i])`\n- **完全背包** ：`dp[i][j] = max(dp[i][j] , dp[i - 1][j - k * w[i]] + k * v[i]);`\n\n不难看出，两者其实非常的类似。根据下标我们可以给出压缩之后的优化版本完全背包解法\n\n> **01背包** 和 **完全背包** 的不同\n>\n> ```cpp\n> //01背包\n> for i  in 0 ... N\n>     for  j = V ... 0\n>         f[j] = max{f[j], f[j - weight[i]] + value[i]}\n> //完全背包\n> for i int 0 ... N\n>   \tfor\t j = 0 ... V\n>       \tf[j] = max{f[j] , f[j - weight[j]] + value[i]}\n> ```\n>\n> 可以看出，只有内层循环的执行顺序不同\n\n给出 **完全背包问题** 的优化方案\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n    int n , capacity;\n    cin >> n >> capacity;\n    vector<int> c(n + 1) , w(n + 1);\n    vector<int> dp(max(n , capacity));\n    for(int i = 1 ; i <= n ;++i) cin >> c[i] >> w[i];\n    \n    for(int i = 1; i <= n ;++i)\n        for(int j = c[i] ; j <= capacity ; ++j)\n            dp[j] = max(dp[j] , dp[j - c[i]] + w[i]);\n    \n    cout << dp[capacity];\n}\n```\n\n","source":"_posts/背包问题.md","raw":"---\ntitle: 背包问题\ndate: 2020-01-15 17:13:36\ntags: 算法\ndescription: 关注背包九讲中的内容, 重点考察DP的思考想法\ncover_img: https://images.unsplash.com/photo-1581463455583-40abcfc90be7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80\nfeature_img: https://images.unsplash.com/photo-1581463455583-40abcfc90be7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80\n---\n\n### 1. 01背包问题\n\n有 $N$ 件物品和一个容量是 $V$ 的背包。每件物品只能使用一次。\n\n分析：\n\n- 每一个背包只有 **拿出 or 不拿出** 两种情况\n- 对于 **dp** 数组，我们某一个状态 `dp[i][j]` 表示 **前i种背包的情况下，他们的总重量是 j 的最优解**\n  - 如果 **i** 背包不拿，那么 `dp[i][j] = dp[i - 1][j]`\n  - 如果 **i** 背包拿取，那么 `dp[i][j] = dp[i - 1][j - weights[i]] + values[i]`\n    - 也就是说，拿取之后，需要看剩下的部分最优解\n\n#### 算法优化\n\n根据之前的状态转移方程，我们可以约减一维的 **dp** 空间\n\n改进之后的 **dp** 状态转移方程如下：\n\n`dp[i] = max(dp[j], dp[j - weights[i]] + values[i])`\n\n> 为什么在内层循环，**j** 需要逆序？\n>\n> 在没有开始计算的时候，**dp[i]表示的是dp\\[i-1]\\[j]** 。而当我们需要计算 `dp[i] = max(dp[j], dp[j - weights[i]] + values[i])`的时候，需要保证 `dp[j - w[i]]` 是 **没有被改变的**。因此需要**从后往前**\n\n### 2. 完全背包问题\n\n每一件物品可以 **无限次** 拿取\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\nint main(){\n    int N , V;\n    cin >> N >> V;\n    vector<int> w(N + 1) , v(N + 1);\n    for(int i = 1 ; i <= N ; ++i) cin >> w[i] >> v[i];\n    \n    vector<vector<int>> dp(N + 1 , vector<int>(V + 1 , 0));\n    \n    for(int i = 1; i <= N ; ++i){\n        for(int j = 0 ;j <= V; ++j){\n            dp[i][j] = dp[i - 1][j];\n            for(int k = 0 ; k*w[i] <= j; ++k){\n                dp[i][j] = max(dp[i][j] , dp[i][j - k * w[i]] + k * v[i]);\n            }\n        }\n    }\n    \n    cout << dp[N][V] << endl;\n    \n}\n```\n\n最重要的状态转移方程对比\n\n- **01背包** ：`dp[i][j] = max(dp[i-1][j],dp[i - 1][j - w[i]] + v[i])`\n- **完全背包** ：`dp[i][j] = max(dp[i][j] , dp[i - 1][j - k * w[i]] + k * v[i]);`\n\n不难看出，两者其实非常的类似。根据下标我们可以给出压缩之后的优化版本完全背包解法\n\n> **01背包** 和 **完全背包** 的不同\n>\n> ```cpp\n> //01背包\n> for i  in 0 ... N\n>     for  j = V ... 0\n>         f[j] = max{f[j], f[j - weight[i]] + value[i]}\n> //完全背包\n> for i int 0 ... N\n>   \tfor\t j = 0 ... V\n>       \tf[j] = max{f[j] , f[j - weight[j]] + value[i]}\n> ```\n>\n> 可以看出，只有内层循环的执行顺序不同\n\n给出 **完全背包问题** 的优化方案\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n    int n , capacity;\n    cin >> n >> capacity;\n    vector<int> c(n + 1) , w(n + 1);\n    vector<int> dp(max(n , capacity));\n    for(int i = 1 ; i <= n ;++i) cin >> c[i] >> w[i];\n    \n    for(int i = 1; i <= n ;++i)\n        for(int j = c[i] ; j <= capacity ; ++j)\n            dp[j] = max(dp[j] , dp[j - c[i]] + w[i]);\n    \n    cout << dp[capacity];\n}\n```\n\n","slug":"背包问题","published":1,"updated":"2020-02-13T02:25:00.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6pvpq63000fu6s62ha916ze","content":"<h3 id=\"1-01背包问题\"><a href=\"#1-01背包问题\" class=\"headerlink\" title=\"1. 01背包问题\"></a>1. 01背包问题</h3><p>有 $N$ 件物品和一个容量是 $V$ 的背包。每件物品只能使用一次。</p>\n<p>分析：</p>\n<ul>\n<li>每一个背包只有 <strong>拿出 or 不拿出</strong> 两种情况</li>\n<li>对于 <strong>dp</strong> 数组，我们某一个状态 <code>dp[i][j]</code> 表示 <strong>前i种背包的情况下，他们的总重量是 j 的最优解</strong><ul>\n<li>如果 <strong>i</strong> 背包不拿，那么 <code>dp[i][j] = dp[i - 1][j]</code></li>\n<li>如果 <strong>i</strong> 背包拿取，那么 <code>dp[i][j] = dp[i - 1][j - weights[i]] + values[i]</code><ul>\n<li>也就是说，拿取之后，需要看剩下的部分最优解</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"算法优化\"><a href=\"#算法优化\" class=\"headerlink\" title=\"算法优化\"></a>算法优化</h4><p>根据之前的状态转移方程，我们可以约减一维的 <strong>dp</strong> 空间</p>\n<p>改进之后的 <strong>dp</strong> 状态转移方程如下：</p>\n<p><code>dp[i] = max(dp[j], dp[j - weights[i]] + values[i])</code></p>\n<blockquote>\n<p>为什么在内层循环，<strong>j</strong> 需要逆序？</p>\n<p>在没有开始计算的时候，<strong>dp[i]表示的是dp[i-1][j]</strong> 。而当我们需要计算 <code>dp[i] = max(dp[j], dp[j - weights[i]] + values[i])</code>的时候，需要保证 <code>dp[j - w[i]]</code> 是 <strong>没有被改变的</strong>。因此需要<strong>从后往前</strong></p>\n</blockquote>\n<h3 id=\"2-完全背包问题\"><a href=\"#2-完全背包问题\" class=\"headerlink\" title=\"2. 完全背包问题\"></a>2. 完全背包问题</h3><p>每一件物品可以 <strong>无限次</strong> 拿取</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N , V;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; N &gt;&gt; V;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; w(N + <span class=\"number\">1</span>) , v(N + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt;= N ; ++i) <span class=\"built_in\">cin</span> &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; dp(N + <span class=\"number\">1</span> , <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(V + <span class=\"number\">1</span> , <span class=\"number\">0</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N ; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span> ;j &lt;= V; ++j)&#123;</span><br><span class=\"line\">            dp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span> ; k*w[i] &lt;= j; ++k)&#123;</span><br><span class=\"line\">                dp[i][j] = max(dp[i][j] , dp[i][j - k * w[i]] + k * v[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dp[N][V] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最重要的状态转移方程对比</p>\n<ul>\n<li><strong>01背包</strong> ：<code>dp[i][j] = max(dp[i-1][j],dp[i - 1][j - w[i]] + v[i])</code></li>\n<li><strong>完全背包</strong> ：<code>dp[i][j] = max(dp[i][j] , dp[i - 1][j - k * w[i]] + k * v[i]);</code></li>\n</ul>\n<p>不难看出，两者其实非常的类似。根据下标我们可以给出压缩之后的优化版本完全背包解法</p>\n<blockquote>\n<p><strong>01背包</strong> 和 <strong>完全背包</strong> 的不同</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">//01背包</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">for</span> i  in <span class=\"number\">0</span> ... N</span><br><span class=\"line\">&gt;     <span class=\"keyword\">for</span>  j = V ... <span class=\"number\">0</span></span><br><span class=\"line\">&gt;         f[j] = max&#123;f[j], f[j - weight[i]] + value[i]&#125;</span><br><span class=\"line\">&gt; <span class=\"comment\">//完全背包</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">for</span> i <span class=\"keyword\">int</span> <span class=\"number\">0</span> ... N</span><br><span class=\"line\">&gt;   \t<span class=\"keyword\">for</span>\t j = <span class=\"number\">0</span> ... V</span><br><span class=\"line\">&gt;       \tf[j] = max&#123;f[j] , f[j - weight[j]] + value[i]&#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>可以看出，只有内层循环的执行顺序不同</p>\n</blockquote>\n<p>给出 <strong>完全背包问题</strong> 的优化方案</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n , capacity;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; capacity;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; c(n + <span class=\"number\">1</span>) , w(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dp(max(n , capacity));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ;++i) <span class=\"built_in\">cin</span> &gt;&gt; c[i] &gt;&gt; w[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n ;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c[i] ; j &lt;= capacity ; ++j)</span><br><span class=\"line\">            dp[j] = max(dp[j] , dp[j - c[i]] + w[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dp[capacity];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-01背包问题\"><a href=\"#1-01背包问题\" class=\"headerlink\" title=\"1. 01背包问题\"></a>1. 01背包问题</h3><p>有 $N$ 件物品和一个容量是 $V$ 的背包。每件物品只能使用一次。</p>\n<p>分析：</p>\n<ul>\n<li>每一个背包只有 <strong>拿出 or 不拿出</strong> 两种情况</li>\n<li>对于 <strong>dp</strong> 数组，我们某一个状态 <code>dp[i][j]</code> 表示 <strong>前i种背包的情况下，他们的总重量是 j 的最优解</strong><ul>\n<li>如果 <strong>i</strong> 背包不拿，那么 <code>dp[i][j] = dp[i - 1][j]</code></li>\n<li>如果 <strong>i</strong> 背包拿取，那么 <code>dp[i][j] = dp[i - 1][j - weights[i]] + values[i]</code><ul>\n<li>也就是说，拿取之后，需要看剩下的部分最优解</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"算法优化\"><a href=\"#算法优化\" class=\"headerlink\" title=\"算法优化\"></a>算法优化</h4><p>根据之前的状态转移方程，我们可以约减一维的 <strong>dp</strong> 空间</p>\n<p>改进之后的 <strong>dp</strong> 状态转移方程如下：</p>\n<p><code>dp[i] = max(dp[j], dp[j - weights[i]] + values[i])</code></p>\n<blockquote>\n<p>为什么在内层循环，<strong>j</strong> 需要逆序？</p>\n<p>在没有开始计算的时候，<strong>dp[i]表示的是dp[i-1][j]</strong> 。而当我们需要计算 <code>dp[i] = max(dp[j], dp[j - weights[i]] + values[i])</code>的时候，需要保证 <code>dp[j - w[i]]</code> 是 <strong>没有被改变的</strong>。因此需要<strong>从后往前</strong></p>\n</blockquote>\n<h3 id=\"2-完全背包问题\"><a href=\"#2-完全背包问题\" class=\"headerlink\" title=\"2. 完全背包问题\"></a>2. 完全背包问题</h3><p>每一件物品可以 <strong>无限次</strong> 拿取</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N , V;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; N &gt;&gt; V;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; w(N + <span class=\"number\">1</span>) , v(N + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt;= N ; ++i) <span class=\"built_in\">cin</span> &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; dp(N + <span class=\"number\">1</span> , <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;(V + <span class=\"number\">1</span> , <span class=\"number\">0</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N ; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span> ;j &lt;= V; ++j)&#123;</span><br><span class=\"line\">            dp[i][j] = dp[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span> ; k*w[i] &lt;= j; ++k)&#123;</span><br><span class=\"line\">                dp[i][j] = max(dp[i][j] , dp[i][j - k * w[i]] + k * v[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dp[N][V] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最重要的状态转移方程对比</p>\n<ul>\n<li><strong>01背包</strong> ：<code>dp[i][j] = max(dp[i-1][j],dp[i - 1][j - w[i]] + v[i])</code></li>\n<li><strong>完全背包</strong> ：<code>dp[i][j] = max(dp[i][j] , dp[i - 1][j - k * w[i]] + k * v[i]);</code></li>\n</ul>\n<p>不难看出，两者其实非常的类似。根据下标我们可以给出压缩之后的优化版本完全背包解法</p>\n<blockquote>\n<p><strong>01背包</strong> 和 <strong>完全背包</strong> 的不同</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">//01背包</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">for</span> i  in <span class=\"number\">0</span> ... N</span><br><span class=\"line\">&gt;     <span class=\"keyword\">for</span>  j = V ... <span class=\"number\">0</span></span><br><span class=\"line\">&gt;         f[j] = max&#123;f[j], f[j - weight[i]] + value[i]&#125;</span><br><span class=\"line\">&gt; <span class=\"comment\">//完全背包</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">for</span> i <span class=\"keyword\">int</span> <span class=\"number\">0</span> ... N</span><br><span class=\"line\">&gt;   \t<span class=\"keyword\">for</span>\t j = <span class=\"number\">0</span> ... V</span><br><span class=\"line\">&gt;       \tf[j] = max&#123;f[j] , f[j - weight[j]] + value[i]&#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>可以看出，只有内层循环的执行顺序不同</p>\n</blockquote>\n<p>给出 <strong>完全背包问题</strong> 的优化方案</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n , capacity;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; capacity;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; c(n + <span class=\"number\">1</span>) , w(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; dp(max(n , capacity));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ;++i) <span class=\"built_in\">cin</span> &gt;&gt; c[i] &gt;&gt; w[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n ;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = c[i] ; j &lt;= capacity ; ++j)</span><br><span class=\"line\">            dp[j] = max(dp[j] , dp[j - c[i]] + w[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; dp[capacity];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"设计模式-单例","date":"2019-12-07T08:47:11.000Z","cover_img":"https://images.unsplash.com/photo-1507580433829-a0989f4d4469?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","feature_img":"https://images.unsplash.com/photo-1472512946974-cc09a294e210?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1115&q=80","_content":"\n## 单例模式\n\n给出最原始的代码\n\n```java\npublic class Singleton {\n\n    //一个静态的实例\n    private static Singleton singleton;\n    //私有化构造函数\n    private Singleton(){}\n    //给出一个公共的静态方法返回一个单一实例\n    public static Singleton getInstance(){\n        if (singleton == null) {\n            singleton = new Singleton();\n        }\n        return singleton;\n    }\n}\n```\n\n现在我们就需要考虑==多线程环境==下的单例模式实现了\n\n**懒汉模式**\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton(){}\n    public static Singleton getInstance(){\n        if (instance == null) {\n            //Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n**饿汉模式**\n\n```java\npublic class Singleton {\n    private static Singleton instance = new Singleton();\n    private Singleton(){}\n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n```\n\n> 多线程下的懒汉模式会出现问题——在判定是 *null* 的时候，还没来得及进行创建实例，另一个进程就进入进行判定\n\n#### 解决办法1\n\n方法上添加 **synchronized** 关键字\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton(){}\n    public static synchronized Singleton getInstance(){\n        if (instance == null) {\n            //Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n> 问题：如果两个线程都要获取单例引用，只能等一个线程获取后，另一个线程才能获取。\n\n#### 解决方法2\n\n双检查锁机制（Double Check Locking）,也叫”DCL“\n\n> 双锁的意思，是指 检测两次instance是否为空。\n\n```java\npublic class Singleton {  \n      \n    //使用volatile关键字保其可见性  \n    volatile private static Singleton instance = null;  \n      \n    private MySingleton(){}  \n       \n    public static MySingleton getInstance() {   \n            if(instance == null){//懒汉式   \n                  synchronized (Singleton.class) {  \n                    if(instance == null){//二次检查  \n                        instance = new MySingleton();  \n                    }  \n                } \n            }\n        return instance;  \n    }  \n}  \n```\n\n#### 解决办法3\n\n当然，我们最好还是采取**饿汉式**\n\n```java\npublic class Singleton{\n    //类加载时就初始化\n    private static final Singleton instance = new Singleton();\n    \n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n```\n\n#### 解决办法4\n\n采取 **静态内部类**\n\n```java\npublic class Singleton {  \n    private static class SingletonHolder {  \n        private static final Singleton INSTANCE = new Singleton();  \n    }  \n    private Singleton (){}  \n    \n    public static final Singleton getInstance() {  \n        return SingletonHolder.INSTANCE; \n    }  \n}\n```\n\n#### 解决办法5\n\n枚举 Enum\n\n```java\npublic enum EasySingleton{\n    INSTANCE;\n}\n```\n\n","source":"_posts/设计模式-单例.md","raw":"---\ntitle: 设计模式-单例\ndate: 2019-12-07 16:47:11\ntags: 设计模式\ncover_img: https://images.unsplash.com/photo-1507580433829-a0989f4d4469?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\nfeature_img: https://images.unsplash.com/photo-1472512946974-cc09a294e210?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1115&q=80\n---\n\n## 单例模式\n\n给出最原始的代码\n\n```java\npublic class Singleton {\n\n    //一个静态的实例\n    private static Singleton singleton;\n    //私有化构造函数\n    private Singleton(){}\n    //给出一个公共的静态方法返回一个单一实例\n    public static Singleton getInstance(){\n        if (singleton == null) {\n            singleton = new Singleton();\n        }\n        return singleton;\n    }\n}\n```\n\n现在我们就需要考虑==多线程环境==下的单例模式实现了\n\n**懒汉模式**\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton(){}\n    public static Singleton getInstance(){\n        if (instance == null) {\n            //Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n**饿汉模式**\n\n```java\npublic class Singleton {\n    private static Singleton instance = new Singleton();\n    private Singleton(){}\n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n```\n\n> 多线程下的懒汉模式会出现问题——在判定是 *null* 的时候，还没来得及进行创建实例，另一个进程就进入进行判定\n\n#### 解决办法1\n\n方法上添加 **synchronized** 关键字\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton(){}\n    public static synchronized Singleton getInstance(){\n        if (instance == null) {\n            //Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n> 问题：如果两个线程都要获取单例引用，只能等一个线程获取后，另一个线程才能获取。\n\n#### 解决方法2\n\n双检查锁机制（Double Check Locking）,也叫”DCL“\n\n> 双锁的意思，是指 检测两次instance是否为空。\n\n```java\npublic class Singleton {  \n      \n    //使用volatile关键字保其可见性  \n    volatile private static Singleton instance = null;  \n      \n    private MySingleton(){}  \n       \n    public static MySingleton getInstance() {   \n            if(instance == null){//懒汉式   \n                  synchronized (Singleton.class) {  \n                    if(instance == null){//二次检查  \n                        instance = new MySingleton();  \n                    }  \n                } \n            }\n        return instance;  \n    }  \n}  \n```\n\n#### 解决办法3\n\n当然，我们最好还是采取**饿汉式**\n\n```java\npublic class Singleton{\n    //类加载时就初始化\n    private static final Singleton instance = new Singleton();\n    \n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n```\n\n#### 解决办法4\n\n采取 **静态内部类**\n\n```java\npublic class Singleton {  \n    private static class SingletonHolder {  \n        private static final Singleton INSTANCE = new Singleton();  \n    }  \n    private Singleton (){}  \n    \n    public static final Singleton getInstance() {  \n        return SingletonHolder.INSTANCE; \n    }  \n}\n```\n\n#### 解决办法5\n\n枚举 Enum\n\n```java\npublic enum EasySingleton{\n    INSTANCE;\n}\n```\n\n","slug":"设计模式-单例","published":1,"updated":"2020-02-13T02:35:02.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6pvpq65000iu6s63jxmssdw","content":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>给出最原始的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//一个静态的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton;</span><br><span class=\"line\">    <span class=\"comment\">//私有化构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//给出一个公共的静态方法返回一个单一实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在我们就需要考虑==多线程环境==下的单例模式实现了</p>\n<p><strong>懒汉模式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。</span></span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>饿汉模式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>多线程下的懒汉模式会出现问题——在判定是 <em>null</em> 的时候，还没来得及进行创建实例，另一个进程就进入进行判定</p>\n</blockquote>\n<h4 id=\"解决办法1\"><a href=\"#解决办法1\" class=\"headerlink\" title=\"解决办法1\"></a>解决办法1</h4><p>方法上添加 <strong>synchronized</strong> 关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。</span></span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>问题：如果两个线程都要获取单例引用，只能等一个线程获取后，另一个线程才能获取。</p>\n</blockquote>\n<h4 id=\"解决方法2\"><a href=\"#解决方法2\" class=\"headerlink\" title=\"解决方法2\"></a>解决方法2</h4><p>双检查锁机制（Double Check Locking）,也叫”DCL“</p>\n<blockquote>\n<p>双锁的意思，是指 检测两次instance是否为空。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">//使用volatile关键字保其可见性  </span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MySingleton</span><span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//懒汉式   </span></span><br><span class=\"line\">                  <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//二次检查  </span></span><br><span class=\"line\">                        instance = <span class=\"keyword\">new</span> MySingleton();  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决办法3\"><a href=\"#解决办法3\" class=\"headerlink\" title=\"解决办法3\"></a>解决办法3</h4><p>当然，我们最好还是采取<strong>饿汉式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//类加载时就初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决办法4\"><a href=\"#解决办法4\" class=\"headerlink\" title=\"解决办法4\"></a>解决办法4</h4><p>采取 <strong>静态内部类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE; </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决办法5\"><a href=\"#解决办法5\" class=\"headerlink\" title=\"解决办法5\"></a>解决办法5</h4><p>枚举 Enum</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> EasySingleton&#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>给出最原始的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//一个静态的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton;</span><br><span class=\"line\">    <span class=\"comment\">//私有化构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//给出一个公共的静态方法返回一个单一实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (singleton == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            singleton = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在我们就需要考虑==多线程环境==下的单例模式实现了</p>\n<p><strong>懒汉模式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。</span></span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>饿汉模式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>多线程下的懒汉模式会出现问题——在判定是 <em>null</em> 的时候，还没来得及进行创建实例，另一个进程就进入进行判定</p>\n</blockquote>\n<h4 id=\"解决办法1\"><a href=\"#解决办法1\" class=\"headerlink\" title=\"解决办法1\"></a>解决办法1</h4><p>方法上添加 <strong>synchronized</strong> 关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。</span></span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>问题：如果两个线程都要获取单例引用，只能等一个线程获取后，另一个线程才能获取。</p>\n</blockquote>\n<h4 id=\"解决方法2\"><a href=\"#解决方法2\" class=\"headerlink\" title=\"解决方法2\"></a>解决方法2</h4><p>双检查锁机制（Double Check Locking）,也叫”DCL“</p>\n<blockquote>\n<p>双锁的意思，是指 检测两次instance是否为空。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">//使用volatile关键字保其可见性  </span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MySingleton</span><span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//懒汉式   </span></span><br><span class=\"line\">                  <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//二次检查  </span></span><br><span class=\"line\">                        instance = <span class=\"keyword\">new</span> MySingleton();  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决办法3\"><a href=\"#解决办法3\" class=\"headerlink\" title=\"解决办法3\"></a>解决办法3</h4><p>当然，我们最好还是采取<strong>饿汉式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//类加载时就初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决办法4\"><a href=\"#解决办法4\" class=\"headerlink\" title=\"解决办法4\"></a>解决办法4</h4><p>采取 <strong>静态内部类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton INSTANCE = <span class=\"keyword\">new</span> Singleton();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span> <span class=\"params\">()</span></span>&#123;&#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE; </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决办法5\"><a href=\"#解决办法5\" class=\"headerlink\" title=\"解决办法5\"></a>解决办法5</h4><p>枚举 Enum</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> EasySingleton&#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Kubernets 进行集群部署","date":"2019-09-12T15:23:08.000Z","description":"一条从Spring Cloud向K8S的路,循循善诱.","cover_img":"https://images.unsplash.com/photo-1429667947446-3c93a979b7e0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","feature_img":"https://images.unsplash.com/photo-1543872084-c7bd3822856f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","_content":"\n## Kubernets 进行集群部署\n\n### 关键定义\n\n- ##### Pod\n\n运行在Node节点上的若干个容器集合，是一个在容器基础上的更高的抽象。主要由 `master` 节点进行调度，将生成实例化的 Pod 调度到某一个 Node 上进行绑定；\n\n当某一个 Node 宕机，可以进行重新调度，将 Pod 调度到其他的 Node 节点上.\n- #####  Replication Controller\n\n我们一般不会手动自己创建Pod，这样很难管理。利用Replication Controller，可以定义Pod运行内容，副本的个数等信息，它的升级版本是 ReplicaSet。现在已经创建了Pod的一些副本，那么在这些副本上如何均衡负载呢？我们需要的是Service。\n\n- ##### Service\n\n可以把一组Pod组成服务 Service，Service有一个虚拟的ClusterIP，服务访问可以通过ClusterIP作为统一请求入口，因为一个 Service 对应一组Pod，所以可以做到负载均衡。服务可以通过 NodePort，LoadBalancer的方式暴露对外服务。注意 type = LoadBalancer需要云服务平台提供基础的服务，自建的K8S集群默认是没有这个东西的。如果在阿里云上定义服务 type = LoadBalancer 后，你会发现，在管理后台的负载均衡页面，会增加一个负载均衡器\n\n\n\n从以上的定义中看出, 一个Node可以认为是一台主机, 而Service作为一个服务提供者, 下包含了多个冗余Node. 能够在某一个Node宕机时及时进行其他备用节点的替补. \n\n我们需要把docker镜像push到远端的某一个镜像管理平台，而后通过配置文件的形式来定义Pod和Service的内容,实现分布式部署.\n\n### K8s YAML配置文件\n\n```\n# yaml格式的pod定义文件完整内容：\napiVersion: v1       #必选，版本号，例如v1\nkind: Pod       #必选，Pod\nmetadata:       #必选，元数据\n  name: string       #必选，Pod名称\n  namespace: string    #必选，Pod所属的命名空间\n  labels:      #自定义标签\n    - name: string     #自定义标签名字\n  annotations:       #自定义注释列表\n    - name: string\nspec:         #必选，Pod中容器的详细定义\n  containers:      #必选，Pod中容器列表\n  - name: string     #必选，容器名称\n    image: string    #必选，容器的镜像名称\n    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像\n    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令\n    args: [string]     #容器的启动命令参数列表\n    workingDir: string     #容器的工作目录\n    volumeMounts:    #挂载到容器内部的存储卷配置\n    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名\n      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符\n      readOnly: boolean    #是否为只读模式\n    ports:       #需要暴露的端口库号列表\n    - name: string     #端口号名称\n      containerPort: int   #容器需要监听的端口号\n      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同\n      protocol: string     #端口协议，支持TCP和UDP，默认TCP\n    env:       #容器运行前需设置的环境变量列表\n    - name: string     #环境变量名称\n      value: string    #环境变量的值\n    resources:       #资源限制和请求的设置\n      limits:      #资源限制的设置\n        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数\n        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数\n      requests:      #资源请求的设置\n        cpu: string    #Cpu请求，容器启动的初始可用数量\n        memory: string     #内存清楚，容器启动的初始可用数量\n    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可\n      exec:      #对Pod容器内检查方式设置为exec方式\n        command: [string]  #exec方式需要制定的命令或脚本\n      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式\n         port: number\n       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒\n       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒\n       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次\n       successThreshold: 0\n       failureThreshold: 0\n       securityContext:\n         privileged:false\n    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod\n    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定\n    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定\n    - name: string\n    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络\n    volumes:       #在该pod上定义共享存储卷列表\n    - name: string     #共享存储卷名称 （volumes类型有很多种）\n      emptyDir: {}     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值\n      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录\n        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录\n      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部\n        name: string\n        items:\n        - key: string\n\n```\n\n### 端口和IP\n\n和docker的内网环境类似，k8s也具有集群内部网络和外部网络.\n\n#### 1. nodePort\n\n外部流量访问k8s集群中service入口的一种方式（另一种方式是LoadBalancer），即nodeIP:nodePort是提供给外部流量访问k8s集群中service的入口。\n\n比如外部用户要访问k8s集群中的一个Web应用，那么我们可以配置对应service的**type=NodePort**，nodePort=30001。其他用户就可以通过浏览器http://node:30001访问到该web服务。\n\n而数据库等服务可能不需要被外界访问，只需被内部服务访问即可，那么我们就不必设置service的NodePort。\n\n\n\n#### 2. port\nk8s集群内部服务之间访问**service**的入口。即**clusterIP:port**是service暴露在clusterIP上的端口。\n\n- mysql容器暴露了3306端口（参考DockerFile），集群内其他容器通过33306端口访问mysql服务，但是**外部流量不能访问mysql服务**，因为mysql服务没有配置NodePort。对应的service.yaml如下：\n\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n name: mysql-service\nspec:\n ports:\n - port: 33306\n   targetPort: 3306\n selector:\n  name: mysql-pod\n```\n\n\n\n#### 3. targetPort\n\n容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，经过kube-proxy流入到后端pod的targetPort上，最后进入容器。\n\n与**制作容器时暴露的端口一致**（使用DockerFile中的**EXPOSE**），例如官方的nginx（参考DockerFile）暴露80端口。 对应的service.yaml如下：\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n name: nginx-service\nspec:\n type: NodePort         // 有配置NodePort，外部流量可访问k8s中的服务\n ports:\n - port: 30080          // 服务访问端口\n   targetPort: 80       // 容器端口\n   nodePort: 30001      // NodePort\n selector:\n  name: nginx-pod\n```\n\n总的来说\n\n- port和nodePort都是service的端口，前者暴露给k8s集群内部服务访问，后者暴露给k8s集群外部流量访问。\n- 从上两个端口过来的数据都需要经过反向代理kube-proxy，流入后端pod的targetPort上，最后到达pod内的容器。","source":"_posts/Kebernets 进行集群部署.md","raw":"---\ntitle: Kubernets 进行集群部署\ndate: 2019-09-12 23:23:08\ntags: \n  - K8S\ncategories: \n  - 服务\ndescription: 一条从Spring Cloud向K8S的路,循循善诱.\ncover_img: https://images.unsplash.com/photo-1429667947446-3c93a979b7e0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\nfeature_img: https://images.unsplash.com/photo-1543872084-c7bd3822856f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\n---\n\n## Kubernets 进行集群部署\n\n### 关键定义\n\n- ##### Pod\n\n运行在Node节点上的若干个容器集合，是一个在容器基础上的更高的抽象。主要由 `master` 节点进行调度，将生成实例化的 Pod 调度到某一个 Node 上进行绑定；\n\n当某一个 Node 宕机，可以进行重新调度，将 Pod 调度到其他的 Node 节点上.\n- #####  Replication Controller\n\n我们一般不会手动自己创建Pod，这样很难管理。利用Replication Controller，可以定义Pod运行内容，副本的个数等信息，它的升级版本是 ReplicaSet。现在已经创建了Pod的一些副本，那么在这些副本上如何均衡负载呢？我们需要的是Service。\n\n- ##### Service\n\n可以把一组Pod组成服务 Service，Service有一个虚拟的ClusterIP，服务访问可以通过ClusterIP作为统一请求入口，因为一个 Service 对应一组Pod，所以可以做到负载均衡。服务可以通过 NodePort，LoadBalancer的方式暴露对外服务。注意 type = LoadBalancer需要云服务平台提供基础的服务，自建的K8S集群默认是没有这个东西的。如果在阿里云上定义服务 type = LoadBalancer 后，你会发现，在管理后台的负载均衡页面，会增加一个负载均衡器\n\n\n\n从以上的定义中看出, 一个Node可以认为是一台主机, 而Service作为一个服务提供者, 下包含了多个冗余Node. 能够在某一个Node宕机时及时进行其他备用节点的替补. \n\n我们需要把docker镜像push到远端的某一个镜像管理平台，而后通过配置文件的形式来定义Pod和Service的内容,实现分布式部署.\n\n### K8s YAML配置文件\n\n```\n# yaml格式的pod定义文件完整内容：\napiVersion: v1       #必选，版本号，例如v1\nkind: Pod       #必选，Pod\nmetadata:       #必选，元数据\n  name: string       #必选，Pod名称\n  namespace: string    #必选，Pod所属的命名空间\n  labels:      #自定义标签\n    - name: string     #自定义标签名字\n  annotations:       #自定义注释列表\n    - name: string\nspec:         #必选，Pod中容器的详细定义\n  containers:      #必选，Pod中容器列表\n  - name: string     #必选，容器名称\n    image: string    #必选，容器的镜像名称\n    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像\n    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令\n    args: [string]     #容器的启动命令参数列表\n    workingDir: string     #容器的工作目录\n    volumeMounts:    #挂载到容器内部的存储卷配置\n    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名\n      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符\n      readOnly: boolean    #是否为只读模式\n    ports:       #需要暴露的端口库号列表\n    - name: string     #端口号名称\n      containerPort: int   #容器需要监听的端口号\n      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同\n      protocol: string     #端口协议，支持TCP和UDP，默认TCP\n    env:       #容器运行前需设置的环境变量列表\n    - name: string     #环境变量名称\n      value: string    #环境变量的值\n    resources:       #资源限制和请求的设置\n      limits:      #资源限制的设置\n        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数\n        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数\n      requests:      #资源请求的设置\n        cpu: string    #Cpu请求，容器启动的初始可用数量\n        memory: string     #内存清楚，容器启动的初始可用数量\n    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可\n      exec:      #对Pod容器内检查方式设置为exec方式\n        command: [string]  #exec方式需要制定的命令或脚本\n      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式\n         port: number\n       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒\n       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒\n       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次\n       successThreshold: 0\n       failureThreshold: 0\n       securityContext:\n         privileged:false\n    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod\n    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定\n    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定\n    - name: string\n    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络\n    volumes:       #在该pod上定义共享存储卷列表\n    - name: string     #共享存储卷名称 （volumes类型有很多种）\n      emptyDir: {}     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值\n      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录\n        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录\n      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部\n        name: string\n        items:\n        - key: string\n\n```\n\n### 端口和IP\n\n和docker的内网环境类似，k8s也具有集群内部网络和外部网络.\n\n#### 1. nodePort\n\n外部流量访问k8s集群中service入口的一种方式（另一种方式是LoadBalancer），即nodeIP:nodePort是提供给外部流量访问k8s集群中service的入口。\n\n比如外部用户要访问k8s集群中的一个Web应用，那么我们可以配置对应service的**type=NodePort**，nodePort=30001。其他用户就可以通过浏览器http://node:30001访问到该web服务。\n\n而数据库等服务可能不需要被外界访问，只需被内部服务访问即可，那么我们就不必设置service的NodePort。\n\n\n\n#### 2. port\nk8s集群内部服务之间访问**service**的入口。即**clusterIP:port**是service暴露在clusterIP上的端口。\n\n- mysql容器暴露了3306端口（参考DockerFile），集群内其他容器通过33306端口访问mysql服务，但是**外部流量不能访问mysql服务**，因为mysql服务没有配置NodePort。对应的service.yaml如下：\n\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n name: mysql-service\nspec:\n ports:\n - port: 33306\n   targetPort: 3306\n selector:\n  name: mysql-pod\n```\n\n\n\n#### 3. targetPort\n\n容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，经过kube-proxy流入到后端pod的targetPort上，最后进入容器。\n\n与**制作容器时暴露的端口一致**（使用DockerFile中的**EXPOSE**），例如官方的nginx（参考DockerFile）暴露80端口。 对应的service.yaml如下：\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n name: nginx-service\nspec:\n type: NodePort         // 有配置NodePort，外部流量可访问k8s中的服务\n ports:\n - port: 30080          // 服务访问端口\n   targetPort: 80       // 容器端口\n   nodePort: 30001      // NodePort\n selector:\n  name: nginx-pod\n```\n\n总的来说\n\n- port和nodePort都是service的端口，前者暴露给k8s集群内部服务访问，后者暴露给k8s集群外部流量访问。\n- 从上两个端口过来的数据都需要经过反向代理kube-proxy，流入后端pod的targetPort上，最后到达pod内的容器。","slug":"Kebernets 进行集群部署","published":1,"updated":"2020-02-13T02:41:44.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6pvpq67000mu6s6bhqvi5uv","content":"<h2 id=\"Kubernets-进行集群部署\"><a href=\"#Kubernets-进行集群部署\" class=\"headerlink\" title=\"Kubernets 进行集群部署\"></a>Kubernets 进行集群部署</h2><h3 id=\"关键定义\"><a href=\"#关键定义\" class=\"headerlink\" title=\"关键定义\"></a>关键定义</h3><ul>\n<li><h5 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h5></li>\n</ul>\n<p>运行在Node节点上的若干个容器集合，是一个在容器基础上的更高的抽象。主要由 <code>master</code> 节点进行调度，将生成实例化的 Pod 调度到某一个 Node 上进行绑定；</p>\n<p>当某一个 Node 宕机，可以进行重新调度，将 Pod 调度到其他的 Node 节点上.</p>\n<ul>\n<li><h5 id=\"Replication-Controller\"><a href=\"#Replication-Controller\" class=\"headerlink\" title=\"Replication Controller\"></a>Replication Controller</h5></li>\n</ul>\n<p>我们一般不会手动自己创建Pod，这样很难管理。利用Replication Controller，可以定义Pod运行内容，副本的个数等信息，它的升级版本是 ReplicaSet。现在已经创建了Pod的一些副本，那么在这些副本上如何均衡负载呢？我们需要的是Service。</p>\n<ul>\n<li><h5 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h5></li>\n</ul>\n<p>可以把一组Pod组成服务 Service，Service有一个虚拟的ClusterIP，服务访问可以通过ClusterIP作为统一请求入口，因为一个 Service 对应一组Pod，所以可以做到负载均衡。服务可以通过 NodePort，LoadBalancer的方式暴露对外服务。注意 type = LoadBalancer需要云服务平台提供基础的服务，自建的K8S集群默认是没有这个东西的。如果在阿里云上定义服务 type = LoadBalancer 后，你会发现，在管理后台的负载均衡页面，会增加一个负载均衡器</p>\n<p>从以上的定义中看出, 一个Node可以认为是一台主机, 而Service作为一个服务提供者, 下包含了多个冗余Node. 能够在某一个Node宕机时及时进行其他备用节点的替补. </p>\n<p>我们需要把docker镜像push到远端的某一个镜像管理平台，而后通过配置文件的形式来定义Pod和Service的内容,实现分布式部署.</p>\n<h3 id=\"K8s-YAML配置文件\"><a href=\"#K8s-YAML配置文件\" class=\"headerlink\" title=\"K8s YAML配置文件\"></a>K8s YAML配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yaml格式的pod定义文件完整内容：</span><br><span class=\"line\">apiVersion: v1       #必选，版本号，例如v1</span><br><span class=\"line\">kind: Pod       #必选，Pod</span><br><span class=\"line\">metadata:       #必选，元数据</span><br><span class=\"line\">  name: string       #必选，Pod名称</span><br><span class=\"line\">  namespace: string    #必选，Pod所属的命名空间</span><br><span class=\"line\">  labels:      #自定义标签</span><br><span class=\"line\">    - name: string     #自定义标签名字</span><br><span class=\"line\">  annotations:       #自定义注释列表</span><br><span class=\"line\">    - name: string</span><br><span class=\"line\">spec:         #必选，Pod中容器的详细定义</span><br><span class=\"line\">  containers:      #必选，Pod中容器列表</span><br><span class=\"line\">  - name: string     #必选，容器名称</span><br><span class=\"line\">    image: string    #必选，容器的镜像名称</span><br><span class=\"line\">    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span><br><span class=\"line\">    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令</span><br><span class=\"line\">    args: [string]     #容器的启动命令参数列表</span><br><span class=\"line\">    workingDir: string     #容器的工作目录</span><br><span class=\"line\">    volumeMounts:    #挂载到容器内部的存储卷配置</span><br><span class=\"line\">    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span><br><span class=\"line\">      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符</span><br><span class=\"line\">      readOnly: boolean    #是否为只读模式</span><br><span class=\"line\">    ports:       #需要暴露的端口库号列表</span><br><span class=\"line\">    - name: string     #端口号名称</span><br><span class=\"line\">      containerPort: int   #容器需要监听的端口号</span><br><span class=\"line\">      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同</span><br><span class=\"line\">      protocol: string     #端口协议，支持TCP和UDP，默认TCP</span><br><span class=\"line\">    env:       #容器运行前需设置的环境变量列表</span><br><span class=\"line\">    - name: string     #环境变量名称</span><br><span class=\"line\">      value: string    #环境变量的值</span><br><span class=\"line\">    resources:       #资源限制和请求的设置</span><br><span class=\"line\">      limits:      #资源限制的设置</span><br><span class=\"line\">        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span><br><span class=\"line\">        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span><br><span class=\"line\">      requests:      #资源请求的设置</span><br><span class=\"line\">        cpu: string    #Cpu请求，容器启动的初始可用数量</span><br><span class=\"line\">        memory: string     #内存清楚，容器启动的初始可用数量</span><br><span class=\"line\">    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span><br><span class=\"line\">      exec:      #对Pod容器内检查方式设置为exec方式</span><br><span class=\"line\">        command: [string]  #exec方式需要制定的命令或脚本</span><br><span class=\"line\">      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span><br><span class=\"line\">        path: string</span><br><span class=\"line\">        port: number</span><br><span class=\"line\">        host: string</span><br><span class=\"line\">        scheme: string</span><br><span class=\"line\">        HttpHeaders:</span><br><span class=\"line\">        - name: string</span><br><span class=\"line\">          value: string</span><br><span class=\"line\">      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式</span><br><span class=\"line\">         port: number</span><br><span class=\"line\">       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒</span><br><span class=\"line\">       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span><br><span class=\"line\">       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span><br><span class=\"line\">       successThreshold: 0</span><br><span class=\"line\">       failureThreshold: 0</span><br><span class=\"line\">       securityContext:</span><br><span class=\"line\">         privileged:false</span><br><span class=\"line\">    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span><br><span class=\"line\">    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span><br><span class=\"line\">    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定</span><br><span class=\"line\">    - name: string</span><br><span class=\"line\">    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span><br><span class=\"line\">    volumes:       #在该pod上定义共享存储卷列表</span><br><span class=\"line\">    - name: string     #共享存储卷名称 （volumes类型有很多种）</span><br><span class=\"line\">      emptyDir: &#123;&#125;     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span><br><span class=\"line\">      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span><br><span class=\"line\">        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录</span><br><span class=\"line\">      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span><br><span class=\"line\">        scretname: string  </span><br><span class=\"line\">        items:     </span><br><span class=\"line\">        - key: string</span><br><span class=\"line\">          path: string</span><br><span class=\"line\">      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span><br><span class=\"line\">        name: string</span><br><span class=\"line\">        items:</span><br><span class=\"line\">        - key: string</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"端口和IP\"><a href=\"#端口和IP\" class=\"headerlink\" title=\"端口和IP\"></a>端口和IP</h3><p>和docker的内网环境类似，k8s也具有集群内部网络和外部网络.</p>\n<h4 id=\"1-nodePort\"><a href=\"#1-nodePort\" class=\"headerlink\" title=\"1. nodePort\"></a>1. nodePort</h4><p>外部流量访问k8s集群中service入口的一种方式（另一种方式是LoadBalancer），即nodeIP:nodePort是提供给外部流量访问k8s集群中service的入口。</p>\n<p>比如外部用户要访问k8s集群中的一个Web应用，那么我们可以配置对应service的<strong>type=NodePort</strong>，nodePort=30001。其他用户就可以通过浏览器<a href=\"http://node:30001访问到该web服务。\" target=\"_blank\" rel=\"noopener\">http://node:30001访问到该web服务。</a></p>\n<p>而数据库等服务可能不需要被外界访问，只需被内部服务访问即可，那么我们就不必设置service的NodePort。</p>\n<h4 id=\"2-port\"><a href=\"#2-port\" class=\"headerlink\" title=\"2. port\"></a>2. port</h4><p>k8s集群内部服务之间访问<strong>service</strong>的入口。即<strong>clusterIP:port</strong>是service暴露在clusterIP上的端口。</p>\n<ul>\n<li>mysql容器暴露了3306端口（参考DockerFile），集群内其他容器通过33306端口访问mysql服务，但是<strong>外部流量不能访问mysql服务</strong>，因为mysql服务没有配置NodePort。对应的service.yaml如下：</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\"> name:</span> <span class=\"string\">mysql-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\"> ports:</span></span><br><span class=\"line\"><span class=\"attr\"> - port:</span> <span class=\"number\">33306</span></span><br><span class=\"line\"><span class=\"attr\">   targetPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"attr\"> selector:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">mysql-pod</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-targetPort\"><a href=\"#3-targetPort\" class=\"headerlink\" title=\"3. targetPort\"></a>3. targetPort</h4><p>容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，经过kube-proxy流入到后端pod的targetPort上，最后进入容器。</p>\n<p>与<strong>制作容器时暴露的端口一致</strong>（使用DockerFile中的<strong>EXPOSE</strong>），例如官方的nginx（参考DockerFile）暴露80端口。 对应的service.yaml如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\"> name:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\"> type:</span> <span class=\"string\">NodePort</span>         <span class=\"string\">//</span> <span class=\"string\">有配置NodePort，外部流量可访问k8s中的服务</span></span><br><span class=\"line\"><span class=\"attr\"> ports:</span></span><br><span class=\"line\"><span class=\"attr\"> - port:</span> <span class=\"number\">30080</span>          <span class=\"string\">//</span> <span class=\"string\">服务访问端口</span></span><br><span class=\"line\"><span class=\"attr\">   targetPort:</span> <span class=\"number\">80</span>       <span class=\"string\">//</span> <span class=\"string\">容器端口</span></span><br><span class=\"line\"><span class=\"attr\">   nodePort:</span> <span class=\"number\">30001</span>      <span class=\"string\">//</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\"><span class=\"attr\"> selector:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">nginx-pod</span></span><br></pre></td></tr></table></figure>\n\n<p>总的来说</p>\n<ul>\n<li>port和nodePort都是service的端口，前者暴露给k8s集群内部服务访问，后者暴露给k8s集群外部流量访问。</li>\n<li>从上两个端口过来的数据都需要经过反向代理kube-proxy，流入后端pod的targetPort上，最后到达pod内的容器。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Kubernets-进行集群部署\"><a href=\"#Kubernets-进行集群部署\" class=\"headerlink\" title=\"Kubernets 进行集群部署\"></a>Kubernets 进行集群部署</h2><h3 id=\"关键定义\"><a href=\"#关键定义\" class=\"headerlink\" title=\"关键定义\"></a>关键定义</h3><ul>\n<li><h5 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h5></li>\n</ul>\n<p>运行在Node节点上的若干个容器集合，是一个在容器基础上的更高的抽象。主要由 <code>master</code> 节点进行调度，将生成实例化的 Pod 调度到某一个 Node 上进行绑定；</p>\n<p>当某一个 Node 宕机，可以进行重新调度，将 Pod 调度到其他的 Node 节点上.</p>\n<ul>\n<li><h5 id=\"Replication-Controller\"><a href=\"#Replication-Controller\" class=\"headerlink\" title=\"Replication Controller\"></a>Replication Controller</h5></li>\n</ul>\n<p>我们一般不会手动自己创建Pod，这样很难管理。利用Replication Controller，可以定义Pod运行内容，副本的个数等信息，它的升级版本是 ReplicaSet。现在已经创建了Pod的一些副本，那么在这些副本上如何均衡负载呢？我们需要的是Service。</p>\n<ul>\n<li><h5 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h5></li>\n</ul>\n<p>可以把一组Pod组成服务 Service，Service有一个虚拟的ClusterIP，服务访问可以通过ClusterIP作为统一请求入口，因为一个 Service 对应一组Pod，所以可以做到负载均衡。服务可以通过 NodePort，LoadBalancer的方式暴露对外服务。注意 type = LoadBalancer需要云服务平台提供基础的服务，自建的K8S集群默认是没有这个东西的。如果在阿里云上定义服务 type = LoadBalancer 后，你会发现，在管理后台的负载均衡页面，会增加一个负载均衡器</p>\n<p>从以上的定义中看出, 一个Node可以认为是一台主机, 而Service作为一个服务提供者, 下包含了多个冗余Node. 能够在某一个Node宕机时及时进行其他备用节点的替补. </p>\n<p>我们需要把docker镜像push到远端的某一个镜像管理平台，而后通过配置文件的形式来定义Pod和Service的内容,实现分布式部署.</p>\n<h3 id=\"K8s-YAML配置文件\"><a href=\"#K8s-YAML配置文件\" class=\"headerlink\" title=\"K8s YAML配置文件\"></a>K8s YAML配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># yaml格式的pod定义文件完整内容：</span><br><span class=\"line\">apiVersion: v1       #必选，版本号，例如v1</span><br><span class=\"line\">kind: Pod       #必选，Pod</span><br><span class=\"line\">metadata:       #必选，元数据</span><br><span class=\"line\">  name: string       #必选，Pod名称</span><br><span class=\"line\">  namespace: string    #必选，Pod所属的命名空间</span><br><span class=\"line\">  labels:      #自定义标签</span><br><span class=\"line\">    - name: string     #自定义标签名字</span><br><span class=\"line\">  annotations:       #自定义注释列表</span><br><span class=\"line\">    - name: string</span><br><span class=\"line\">spec:         #必选，Pod中容器的详细定义</span><br><span class=\"line\">  containers:      #必选，Pod中容器列表</span><br><span class=\"line\">  - name: string     #必选，容器名称</span><br><span class=\"line\">    image: string    #必选，容器的镜像名称</span><br><span class=\"line\">    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span><br><span class=\"line\">    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令</span><br><span class=\"line\">    args: [string]     #容器的启动命令参数列表</span><br><span class=\"line\">    workingDir: string     #容器的工作目录</span><br><span class=\"line\">    volumeMounts:    #挂载到容器内部的存储卷配置</span><br><span class=\"line\">    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span><br><span class=\"line\">      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符</span><br><span class=\"line\">      readOnly: boolean    #是否为只读模式</span><br><span class=\"line\">    ports:       #需要暴露的端口库号列表</span><br><span class=\"line\">    - name: string     #端口号名称</span><br><span class=\"line\">      containerPort: int   #容器需要监听的端口号</span><br><span class=\"line\">      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同</span><br><span class=\"line\">      protocol: string     #端口协议，支持TCP和UDP，默认TCP</span><br><span class=\"line\">    env:       #容器运行前需设置的环境变量列表</span><br><span class=\"line\">    - name: string     #环境变量名称</span><br><span class=\"line\">      value: string    #环境变量的值</span><br><span class=\"line\">    resources:       #资源限制和请求的设置</span><br><span class=\"line\">      limits:      #资源限制的设置</span><br><span class=\"line\">        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span><br><span class=\"line\">        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span><br><span class=\"line\">      requests:      #资源请求的设置</span><br><span class=\"line\">        cpu: string    #Cpu请求，容器启动的初始可用数量</span><br><span class=\"line\">        memory: string     #内存清楚，容器启动的初始可用数量</span><br><span class=\"line\">    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span><br><span class=\"line\">      exec:      #对Pod容器内检查方式设置为exec方式</span><br><span class=\"line\">        command: [string]  #exec方式需要制定的命令或脚本</span><br><span class=\"line\">      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span><br><span class=\"line\">        path: string</span><br><span class=\"line\">        port: number</span><br><span class=\"line\">        host: string</span><br><span class=\"line\">        scheme: string</span><br><span class=\"line\">        HttpHeaders:</span><br><span class=\"line\">        - name: string</span><br><span class=\"line\">          value: string</span><br><span class=\"line\">      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式</span><br><span class=\"line\">         port: number</span><br><span class=\"line\">       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒</span><br><span class=\"line\">       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span><br><span class=\"line\">       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span><br><span class=\"line\">       successThreshold: 0</span><br><span class=\"line\">       failureThreshold: 0</span><br><span class=\"line\">       securityContext:</span><br><span class=\"line\">         privileged:false</span><br><span class=\"line\">    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span><br><span class=\"line\">    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span><br><span class=\"line\">    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定</span><br><span class=\"line\">    - name: string</span><br><span class=\"line\">    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span><br><span class=\"line\">    volumes:       #在该pod上定义共享存储卷列表</span><br><span class=\"line\">    - name: string     #共享存储卷名称 （volumes类型有很多种）</span><br><span class=\"line\">      emptyDir: &#123;&#125;     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span><br><span class=\"line\">      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span><br><span class=\"line\">        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录</span><br><span class=\"line\">      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span><br><span class=\"line\">        scretname: string  </span><br><span class=\"line\">        items:     </span><br><span class=\"line\">        - key: string</span><br><span class=\"line\">          path: string</span><br><span class=\"line\">      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span><br><span class=\"line\">        name: string</span><br><span class=\"line\">        items:</span><br><span class=\"line\">        - key: string</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"端口和IP\"><a href=\"#端口和IP\" class=\"headerlink\" title=\"端口和IP\"></a>端口和IP</h3><p>和docker的内网环境类似，k8s也具有集群内部网络和外部网络.</p>\n<h4 id=\"1-nodePort\"><a href=\"#1-nodePort\" class=\"headerlink\" title=\"1. nodePort\"></a>1. nodePort</h4><p>外部流量访问k8s集群中service入口的一种方式（另一种方式是LoadBalancer），即nodeIP:nodePort是提供给外部流量访问k8s集群中service的入口。</p>\n<p>比如外部用户要访问k8s集群中的一个Web应用，那么我们可以配置对应service的<strong>type=NodePort</strong>，nodePort=30001。其他用户就可以通过浏览器<a href=\"http://node:30001访问到该web服务。\" target=\"_blank\" rel=\"noopener\">http://node:30001访问到该web服务。</a></p>\n<p>而数据库等服务可能不需要被外界访问，只需被内部服务访问即可，那么我们就不必设置service的NodePort。</p>\n<h4 id=\"2-port\"><a href=\"#2-port\" class=\"headerlink\" title=\"2. port\"></a>2. port</h4><p>k8s集群内部服务之间访问<strong>service</strong>的入口。即<strong>clusterIP:port</strong>是service暴露在clusterIP上的端口。</p>\n<ul>\n<li>mysql容器暴露了3306端口（参考DockerFile），集群内其他容器通过33306端口访问mysql服务，但是<strong>外部流量不能访问mysql服务</strong>，因为mysql服务没有配置NodePort。对应的service.yaml如下：</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\"> name:</span> <span class=\"string\">mysql-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\"> ports:</span></span><br><span class=\"line\"><span class=\"attr\"> - port:</span> <span class=\"number\">33306</span></span><br><span class=\"line\"><span class=\"attr\">   targetPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"attr\"> selector:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">mysql-pod</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-targetPort\"><a href=\"#3-targetPort\" class=\"headerlink\" title=\"3. targetPort\"></a>3. targetPort</h4><p>容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，经过kube-proxy流入到后端pod的targetPort上，最后进入容器。</p>\n<p>与<strong>制作容器时暴露的端口一致</strong>（使用DockerFile中的<strong>EXPOSE</strong>），例如官方的nginx（参考DockerFile）暴露80端口。 对应的service.yaml如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\"> name:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\"> type:</span> <span class=\"string\">NodePort</span>         <span class=\"string\">//</span> <span class=\"string\">有配置NodePort，外部流量可访问k8s中的服务</span></span><br><span class=\"line\"><span class=\"attr\"> ports:</span></span><br><span class=\"line\"><span class=\"attr\"> - port:</span> <span class=\"number\">30080</span>          <span class=\"string\">//</span> <span class=\"string\">服务访问端口</span></span><br><span class=\"line\"><span class=\"attr\">   targetPort:</span> <span class=\"number\">80</span>       <span class=\"string\">//</span> <span class=\"string\">容器端口</span></span><br><span class=\"line\"><span class=\"attr\">   nodePort:</span> <span class=\"number\">30001</span>      <span class=\"string\">//</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\"><span class=\"attr\"> selector:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">nginx-pod</span></span><br></pre></td></tr></table></figure>\n\n<p>总的来说</p>\n<ul>\n<li>port和nodePort都是service的端口，前者暴露给k8s集群内部服务访问，后者暴露给k8s集群外部流量访问。</li>\n<li>从上两个端口过来的数据都需要经过反向代理kube-proxy，流入后端pod的targetPort上，最后到达pod内的容器。</li>\n</ul>\n"},{"title":"c++新特性","date":"2020-01-15T02:14:27.000Z","description":"虽说是新特性，但是C++ 11 & 14 已经推出了将近10年了.这次就好好整理一下","cover_img":"https://images.unsplash.com/photo-1565433435379-877a403f0f09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80","feature_img":"https://images.unsplash.com/photo-1534972195531-d756b9bfa9f2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","_content":"\n## What’s new in C++ 11?\n\n###  storage duration specifier\n\n多个C++版本都对变量存储时间的定义有严格的说明\n\n- `auto` - *automatic* storage duration.\n\n- `register` - *automatic* storage duration. Also hints to the compiler to place the object in the processor's register. (deprecated) ——*since C++ 17*\n\n- `static` - *static* or *thread* storage duration and *internal* linkage\n\n- `extern` - *static* or *thread* storage duration and *external* linkage.\n\n- `thread_local` - *thread* storage duration\n\n  The `thread_local` keyword is only allowed for objects declared at namespace scope, objects declared at block scope, and static data members. It indicates that the object has **thread storage duration**. It can be combined with `static` or `extern` to specify internal or external linkage (except for static data members which always have external linkage), respectively, but that additional `static` doesn't affect the storage duration.\n\n- `mutable` - does not affect storage duration or linkage\n\n  注意：`mutable` 主要是标识 **const对象** 中某些可变的成员，实现了从二进制的物理 **const** 到逻辑 **const** (外观不变)\n\n### Variadic templates\n\n可变类模板，在 `c++ reference` 里面以 *parameter pack* 来代替\n\n```cpp\ntemplate<class... Types>\t\t\t//class ... Types 是一个 pack 的声明\t\nvoid f(Types... args) {}\t\t\t//Types... args 是\n```\n\n#### Pack Expansion\n\n- `&args...` 代表的是参数扩展\n- `&args`代表的是 *pack pattern* 本身\n\n### Move semantics\n\n> **凡是取地址（`&`）操作可以成功的都是左值，其余都是右值**\n>\n> - 等号左边的不一定是左值——可以通过操作符重载来让左部变成 **右值**\n\n#### 右值引用\n\n我们之前常见的都是 **左值引用**，指的是我们只能够将 **左值** 赋给一个引用。\n\n-  `int& a = 1` 就是非法的。而我们也可以 `int const& i = 42;` 来进行一个 *tricky* 的躲避\n\n  在 `c++11`中允许了右值引用的出现\n```\nint&& a = 3;\n```\n\n#### 移动语义\n\n我们在进行 `Test(const Test& test)` 拷贝构造函数的执行过程中，会造成很多的拷贝浪费。当单独的一次拷贝构造函数 (特别是对指针数组这些资源)过程消耗特别大的时候，对于性能来说是很低的。\n\n那么 `c++11`标准给出了 **移动拷贝构造函数** 和 **移动赋值操作符重载**。此外，还支持 `std::move()`来强制性让 **左值转化为右值**\n\n#### 完美转发\n\n我们想要实现\n\n> 多级函数调用过程中\n>\n> - 如果变量是左值，那么它作为其他函数的参数的时候也应该是 **左值**\n> - 如果变量是右值，那么它作为其他函数的参数的时候也应该是 **右值**\n\n```cpp\ntemplate <typename T>\nvoid func(T t) {\n    cout << \"in func\" << endl;\n}\n\ntemplate <typename T>\nvoid relay(T&& t) {\n    cout << \"in relay\" << endl;\n    func(t);\n}\n\nint main() {\n    relay(Test());\n}\n```\n\n上面这个例子就是一个 **反例**。我们在传入 `func(t)` 的时候，其实调用了 **拷贝构造函数** (因为编译器把 **t** 当做了一个 **左值**)\n\n> `std::forward<T>()` ，能够保留参数的左右值类型\n\n### Value Category\n\n不止左值右值那么简单\n\n> Cpp reference:\n>\n> Each C++ [expression](https://en.cppreference.com/w/cpp/language/expressions) (an operator with its operands, a literal, a variable name, etc.) is characterized by two independent properties: a *type* and a *value category*. Each expression has some non-reference type, and each expression belongs to exactly one of the three primary value categories: *prvalue*, *xvalue*, and *lvalue*.\n\n\n\n","source":"_posts/c-新特性.md","raw":"---\ntitle: c++新特性\ndate: 2020-01-15 10:14:27\ntags: 整理\ndescription: 虽说是新特性，但是C++ 11 & 14 已经推出了将近10年了.这次就好好整理一下\ncover_img: https://images.unsplash.com/photo-1565433435379-877a403f0f09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80\nfeature_img: https://images.unsplash.com/photo-1534972195531-d756b9bfa9f2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\n---\n\n## What’s new in C++ 11?\n\n###  storage duration specifier\n\n多个C++版本都对变量存储时间的定义有严格的说明\n\n- `auto` - *automatic* storage duration.\n\n- `register` - *automatic* storage duration. Also hints to the compiler to place the object in the processor's register. (deprecated) ——*since C++ 17*\n\n- `static` - *static* or *thread* storage duration and *internal* linkage\n\n- `extern` - *static* or *thread* storage duration and *external* linkage.\n\n- `thread_local` - *thread* storage duration\n\n  The `thread_local` keyword is only allowed for objects declared at namespace scope, objects declared at block scope, and static data members. It indicates that the object has **thread storage duration**. It can be combined with `static` or `extern` to specify internal or external linkage (except for static data members which always have external linkage), respectively, but that additional `static` doesn't affect the storage duration.\n\n- `mutable` - does not affect storage duration or linkage\n\n  注意：`mutable` 主要是标识 **const对象** 中某些可变的成员，实现了从二进制的物理 **const** 到逻辑 **const** (外观不变)\n\n### Variadic templates\n\n可变类模板，在 `c++ reference` 里面以 *parameter pack* 来代替\n\n```cpp\ntemplate<class... Types>\t\t\t//class ... Types 是一个 pack 的声明\t\nvoid f(Types... args) {}\t\t\t//Types... args 是\n```\n\n#### Pack Expansion\n\n- `&args...` 代表的是参数扩展\n- `&args`代表的是 *pack pattern* 本身\n\n### Move semantics\n\n> **凡是取地址（`&`）操作可以成功的都是左值，其余都是右值**\n>\n> - 等号左边的不一定是左值——可以通过操作符重载来让左部变成 **右值**\n\n#### 右值引用\n\n我们之前常见的都是 **左值引用**，指的是我们只能够将 **左值** 赋给一个引用。\n\n-  `int& a = 1` 就是非法的。而我们也可以 `int const& i = 42;` 来进行一个 *tricky* 的躲避\n\n  在 `c++11`中允许了右值引用的出现\n```\nint&& a = 3;\n```\n\n#### 移动语义\n\n我们在进行 `Test(const Test& test)` 拷贝构造函数的执行过程中，会造成很多的拷贝浪费。当单独的一次拷贝构造函数 (特别是对指针数组这些资源)过程消耗特别大的时候，对于性能来说是很低的。\n\n那么 `c++11`标准给出了 **移动拷贝构造函数** 和 **移动赋值操作符重载**。此外，还支持 `std::move()`来强制性让 **左值转化为右值**\n\n#### 完美转发\n\n我们想要实现\n\n> 多级函数调用过程中\n>\n> - 如果变量是左值，那么它作为其他函数的参数的时候也应该是 **左值**\n> - 如果变量是右值，那么它作为其他函数的参数的时候也应该是 **右值**\n\n```cpp\ntemplate <typename T>\nvoid func(T t) {\n    cout << \"in func\" << endl;\n}\n\ntemplate <typename T>\nvoid relay(T&& t) {\n    cout << \"in relay\" << endl;\n    func(t);\n}\n\nint main() {\n    relay(Test());\n}\n```\n\n上面这个例子就是一个 **反例**。我们在传入 `func(t)` 的时候，其实调用了 **拷贝构造函数** (因为编译器把 **t** 当做了一个 **左值**)\n\n> `std::forward<T>()` ，能够保留参数的左右值类型\n\n### Value Category\n\n不止左值右值那么简单\n\n> Cpp reference:\n>\n> Each C++ [expression](https://en.cppreference.com/w/cpp/language/expressions) (an operator with its operands, a literal, a variable name, etc.) is characterized by two independent properties: a *type* and a *value category*. Each expression has some non-reference type, and each expression belongs to exactly one of the three primary value categories: *prvalue*, *xvalue*, and *lvalue*.\n\n\n\n","slug":"c-新特性","published":1,"updated":"2020-02-13T02:42:37.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6pvpq6b000pu6s69glijepf","content":"<h2 id=\"What’s-new-in-C-11\"><a href=\"#What’s-new-in-C-11\" class=\"headerlink\" title=\"What’s new in C++ 11?\"></a>What’s new in C++ 11?</h2><h3 id=\"storage-duration-specifier\"><a href=\"#storage-duration-specifier\" class=\"headerlink\" title=\"storage duration specifier\"></a>storage duration specifier</h3><p>多个C++版本都对变量存储时间的定义有严格的说明</p>\n<ul>\n<li><p><code>auto</code> - <em>automatic</em> storage duration.</p>\n</li>\n<li><p><code>register</code> - <em>automatic</em> storage duration. Also hints to the compiler to place the object in the processor’s register. (deprecated) ——<em>since C++ 17</em></p>\n</li>\n<li><p><code>static</code> - <em>static</em> or <em>thread</em> storage duration and <em>internal</em> linkage</p>\n</li>\n<li><p><code>extern</code> - <em>static</em> or <em>thread</em> storage duration and <em>external</em> linkage.</p>\n</li>\n<li><p><code>thread_local</code> - <em>thread</em> storage duration</p>\n<p>The <code>thread_local</code> keyword is only allowed for objects declared at namespace scope, objects declared at block scope, and static data members. It indicates that the object has <strong>thread storage duration</strong>. It can be combined with <code>static</code> or <code>extern</code> to specify internal or external linkage (except for static data members which always have external linkage), respectively, but that additional <code>static</code> doesn’t affect the storage duration.</p>\n</li>\n<li><p><code>mutable</code> - does not affect storage duration or linkage</p>\n<p>注意：<code>mutable</code> 主要是标识 <strong>const对象</strong> 中某些可变的成员，实现了从二进制的物理 <strong>const</strong> 到逻辑 <strong>const</strong> (外观不变)</p>\n</li>\n</ul>\n<h3 id=\"Variadic-templates\"><a href=\"#Variadic-templates\" class=\"headerlink\" title=\"Variadic templates\"></a>Variadic templates</h3><p>可变类模板，在 <code>c++ reference</code> 里面以 <em>parameter pack</em> 来代替</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Types</span>&gt;\t\t\t//<span class=\"title\">class</span> ... <span class=\"title\">Types</span> 是一个 <span class=\"title\">pack</span> 的声明\t</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">f</span>(<span class=\"title\">Types</span>... <span class=\"title\">args</span>) &#123;</span>&#125;\t\t\t<span class=\"comment\">//Types... args 是</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Pack-Expansion\"><a href=\"#Pack-Expansion\" class=\"headerlink\" title=\"Pack Expansion\"></a>Pack Expansion</h4><ul>\n<li><code>&amp;args...</code> 代表的是参数扩展</li>\n<li><code>&amp;args</code>代表的是 <em>pack pattern</em> 本身</li>\n</ul>\n<h3 id=\"Move-semantics\"><a href=\"#Move-semantics\" class=\"headerlink\" title=\"Move semantics\"></a>Move semantics</h3><blockquote>\n<p><strong>凡是取地址（<code>&amp;</code>）操作可以成功的都是左值，其余都是右值</strong></p>\n<ul>\n<li>等号左边的不一定是左值——可以通过操作符重载来让左部变成 <strong>右值</strong></li>\n</ul>\n</blockquote>\n<h4 id=\"右值引用\"><a href=\"#右值引用\" class=\"headerlink\" title=\"右值引用\"></a>右值引用</h4><p>我们之前常见的都是 <strong>左值引用</strong>，指的是我们只能够将 <strong>左值</strong> 赋给一个引用。</p>\n<ul>\n<li><p><code>int&amp; a = 1</code> 就是非法的。而我们也可以 <code>int const&amp; i = 42;</code> 来进行一个 <em>tricky</em> 的躲避</p>\n<p>在 <code>c++11</code>中允许了右值引用的出现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int&amp;&amp; a = 3;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"移动语义\"><a href=\"#移动语义\" class=\"headerlink\" title=\"移动语义\"></a>移动语义</h4><p>我们在进行 <code>Test(const Test&amp; test)</code> 拷贝构造函数的执行过程中，会造成很多的拷贝浪费。当单独的一次拷贝构造函数 (特别是对指针数组这些资源)过程消耗特别大的时候，对于性能来说是很低的。</p>\n<p>那么 <code>c++11</code>标准给出了 <strong>移动拷贝构造函数</strong> 和 <strong>移动赋值操作符重载</strong>。此外，还支持 <code>std::move()</code>来强制性让 <strong>左值转化为右值</strong></p>\n<h4 id=\"完美转发\"><a href=\"#完美转发\" class=\"headerlink\" title=\"完美转发\"></a>完美转发</h4><p>我们想要实现</p>\n<blockquote>\n<p>多级函数调用过程中</p>\n<ul>\n<li>如果变量是左值，那么它作为其他函数的参数的时候也应该是 <strong>左值</strong></li>\n<li>如果变量是右值，那么它作为其他函数的参数的时候也应该是 <strong>右值</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"in func\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">relay</span><span class=\"params\">(T&amp;&amp; t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"in relay\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    func(t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    relay(Test());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这个例子就是一个 <strong>反例</strong>。我们在传入 <code>func(t)</code> 的时候，其实调用了 <strong>拷贝构造函数</strong> (因为编译器把 <strong>t</strong> 当做了一个 <strong>左值</strong>)</p>\n<blockquote>\n<p><code>std::forward&lt;T&gt;()</code> ，能够保留参数的左右值类型</p>\n</blockquote>\n<h3 id=\"Value-Category\"><a href=\"#Value-Category\" class=\"headerlink\" title=\"Value Category\"></a>Value Category</h3><p>不止左值右值那么简单</p>\n<blockquote>\n<p>Cpp reference:</p>\n<p>Each C++ <a href=\"https://en.cppreference.com/w/cpp/language/expressions\" target=\"_blank\" rel=\"noopener\">expression</a> (an operator with its operands, a literal, a variable name, etc.) is characterized by two independent properties: a <em>type</em> and a <em>value category</em>. Each expression has some non-reference type, and each expression belongs to exactly one of the three primary value categories: <em>prvalue</em>, <em>xvalue</em>, and <em>lvalue</em>.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What’s-new-in-C-11\"><a href=\"#What’s-new-in-C-11\" class=\"headerlink\" title=\"What’s new in C++ 11?\"></a>What’s new in C++ 11?</h2><h3 id=\"storage-duration-specifier\"><a href=\"#storage-duration-specifier\" class=\"headerlink\" title=\"storage duration specifier\"></a>storage duration specifier</h3><p>多个C++版本都对变量存储时间的定义有严格的说明</p>\n<ul>\n<li><p><code>auto</code> - <em>automatic</em> storage duration.</p>\n</li>\n<li><p><code>register</code> - <em>automatic</em> storage duration. Also hints to the compiler to place the object in the processor’s register. (deprecated) ——<em>since C++ 17</em></p>\n</li>\n<li><p><code>static</code> - <em>static</em> or <em>thread</em> storage duration and <em>internal</em> linkage</p>\n</li>\n<li><p><code>extern</code> - <em>static</em> or <em>thread</em> storage duration and <em>external</em> linkage.</p>\n</li>\n<li><p><code>thread_local</code> - <em>thread</em> storage duration</p>\n<p>The <code>thread_local</code> keyword is only allowed for objects declared at namespace scope, objects declared at block scope, and static data members. It indicates that the object has <strong>thread storage duration</strong>. It can be combined with <code>static</code> or <code>extern</code> to specify internal or external linkage (except for static data members which always have external linkage), respectively, but that additional <code>static</code> doesn’t affect the storage duration.</p>\n</li>\n<li><p><code>mutable</code> - does not affect storage duration or linkage</p>\n<p>注意：<code>mutable</code> 主要是标识 <strong>const对象</strong> 中某些可变的成员，实现了从二进制的物理 <strong>const</strong> 到逻辑 <strong>const</strong> (外观不变)</p>\n</li>\n</ul>\n<h3 id=\"Variadic-templates\"><a href=\"#Variadic-templates\" class=\"headerlink\" title=\"Variadic templates\"></a>Variadic templates</h3><p>可变类模板，在 <code>c++ reference</code> 里面以 <em>parameter pack</em> 来代替</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span>... <span class=\"title\">Types</span>&gt;\t\t\t//<span class=\"title\">class</span> ... <span class=\"title\">Types</span> 是一个 <span class=\"title\">pack</span> 的声明\t</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">f</span>(<span class=\"title\">Types</span>... <span class=\"title\">args</span>) &#123;</span>&#125;\t\t\t<span class=\"comment\">//Types... args 是</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Pack-Expansion\"><a href=\"#Pack-Expansion\" class=\"headerlink\" title=\"Pack Expansion\"></a>Pack Expansion</h4><ul>\n<li><code>&amp;args...</code> 代表的是参数扩展</li>\n<li><code>&amp;args</code>代表的是 <em>pack pattern</em> 本身</li>\n</ul>\n<h3 id=\"Move-semantics\"><a href=\"#Move-semantics\" class=\"headerlink\" title=\"Move semantics\"></a>Move semantics</h3><blockquote>\n<p><strong>凡是取地址（<code>&amp;</code>）操作可以成功的都是左值，其余都是右值</strong></p>\n<ul>\n<li>等号左边的不一定是左值——可以通过操作符重载来让左部变成 <strong>右值</strong></li>\n</ul>\n</blockquote>\n<h4 id=\"右值引用\"><a href=\"#右值引用\" class=\"headerlink\" title=\"右值引用\"></a>右值引用</h4><p>我们之前常见的都是 <strong>左值引用</strong>，指的是我们只能够将 <strong>左值</strong> 赋给一个引用。</p>\n<ul>\n<li><p><code>int&amp; a = 1</code> 就是非法的。而我们也可以 <code>int const&amp; i = 42;</code> 来进行一个 <em>tricky</em> 的躲避</p>\n<p>在 <code>c++11</code>中允许了右值引用的出现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int&amp;&amp; a = 3;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"移动语义\"><a href=\"#移动语义\" class=\"headerlink\" title=\"移动语义\"></a>移动语义</h4><p>我们在进行 <code>Test(const Test&amp; test)</code> 拷贝构造函数的执行过程中，会造成很多的拷贝浪费。当单独的一次拷贝构造函数 (特别是对指针数组这些资源)过程消耗特别大的时候，对于性能来说是很低的。</p>\n<p>那么 <code>c++11</code>标准给出了 <strong>移动拷贝构造函数</strong> 和 <strong>移动赋值操作符重载</strong>。此外，还支持 <code>std::move()</code>来强制性让 <strong>左值转化为右值</strong></p>\n<h4 id=\"完美转发\"><a href=\"#完美转发\" class=\"headerlink\" title=\"完美转发\"></a>完美转发</h4><p>我们想要实现</p>\n<blockquote>\n<p>多级函数调用过程中</p>\n<ul>\n<li>如果变量是左值，那么它作为其他函数的参数的时候也应该是 <strong>左值</strong></li>\n<li>如果变量是右值，那么它作为其他函数的参数的时候也应该是 <strong>右值</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"in func\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">relay</span><span class=\"params\">(T&amp;&amp; t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"in relay\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    func(t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    relay(Test());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这个例子就是一个 <strong>反例</strong>。我们在传入 <code>func(t)</code> 的时候，其实调用了 <strong>拷贝构造函数</strong> (因为编译器把 <strong>t</strong> 当做了一个 <strong>左值</strong>)</p>\n<blockquote>\n<p><code>std::forward&lt;T&gt;()</code> ，能够保留参数的左右值类型</p>\n</blockquote>\n<h3 id=\"Value-Category\"><a href=\"#Value-Category\" class=\"headerlink\" title=\"Value Category\"></a>Value Category</h3><p>不止左值右值那么简单</p>\n<blockquote>\n<p>Cpp reference:</p>\n<p>Each C++ <a href=\"https://en.cppreference.com/w/cpp/language/expressions\" target=\"_blank\" rel=\"noopener\">expression</a> (an operator with its operands, a literal, a variable name, etc.) is characterized by two independent properties: a <em>type</em> and a <em>value category</em>. Each expression has some non-reference type, and each expression belongs to exactly one of the three primary value categories: <em>prvalue</em>, <em>xvalue</em>, and <em>lvalue</em>.</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck6pvpq5u000au6s6omiv9sqi","category_id":"ck6pvpq5r0007u6s6ur3234vy","_id":"ck6pvpq66000ju6s6yn4y9ty4"},{"post_id":"ck6pvpq5h0002u6s6034jb9u8","category_id":"ck6pvpq5r0007u6s6ur3234vy","_id":"ck6pvpq6a000nu6s6i0falke3"},{"post_id":"ck6pvpq5r0008u6s6k73bzz5n","category_id":"ck6pvpq60000eu6s6j5yaayo0","_id":"ck6pvpq6c000qu6s6bkkrd3m5"},{"post_id":"ck6pvpq5x000du6s6asvvda4t","category_id":"ck6pvpq66000ku6s6atzobrvw","_id":"ck6pvpq6g000uu6s6bmjekl1v"},{"post_id":"ck6pvpq67000mu6s6bhqvi5uv","category_id":"ck6pvpq6c000su6s6a54ophby","_id":"ck6pvpq6j000yu6s6j7ta1ja1"}],"PostTag":[{"post_id":"ck6pvpq5a0000u6s69l5k80vr","tag_id":"ck6pvpq5m0004u6s6a89h62dd","_id":"ck6pvpq5w000cu6s6959j1gui"},{"post_id":"ck6pvpq5x000du6s6asvvda4t","tag_id":"ck6pvpq5m0004u6s6a89h62dd","_id":"ck6pvpq65000hu6s6bclbu8e0"},{"post_id":"ck6pvpq5h0002u6s6034jb9u8","tag_id":"ck6pvpq5v000bu6s6n8h33dxf","_id":"ck6pvpq67000lu6s66nn9gtrb"},{"post_id":"ck6pvpq5o0005u6s66pg2gai9","tag_id":"ck6pvpq64000gu6s6vtacrxs3","_id":"ck6pvpq6c000ru6s67iug4t4r"},{"post_id":"ck6pvpq5r0008u6s6k73bzz5n","tag_id":"ck6pvpq6a000ou6s67ilbi9k3","_id":"ck6pvpq6g000vu6s6luohk7sj"},{"post_id":"ck6pvpq5u000au6s6omiv9sqi","tag_id":"ck6pvpq5v000bu6s6n8h33dxf","_id":"ck6pvpq6i000xu6s6blc844g0"},{"post_id":"ck6pvpq63000fu6s62ha916ze","tag_id":"ck6pvpq6h000wu6s6b6ylmnni","_id":"ck6pvpq6k0010u6s6szhrbsie"},{"post_id":"ck6pvpq65000iu6s63jxmssdw","tag_id":"ck6pvpq6k000zu6s65dbab89m","_id":"ck6pvpq6l0012u6s60fru97bd"},{"post_id":"ck6pvpq67000mu6s6bhqvi5uv","tag_id":"ck6pvpq6l0011u6s685uyzh39","_id":"ck6pvpq6m0014u6s6soyphx2r"},{"post_id":"ck6pvpq6b000pu6s69glijepf","tag_id":"ck6pvpq6l0013u6s6sq9uk4zf","_id":"ck6pvpq6m0015u6s64w8d251g"}],"Tag":[{"name":"笔记","_id":"ck6pvpq5m0004u6s6a89h62dd"},{"name":"competition","_id":"ck6pvpq5v000bu6s6n8h33dxf"},{"name":"读书笔记","_id":"ck6pvpq64000gu6s6vtacrxs3"},{"name":"UpUp","_id":"ck6pvpq6a000ou6s67ilbi9k3"},{"name":"算法","_id":"ck6pvpq6h000wu6s6b6ylmnni"},{"name":"设计模式","_id":"ck6pvpq6k000zu6s65dbab89m"},{"name":"K8S","_id":"ck6pvpq6l0011u6s685uyzh39"},{"name":"整理","_id":"ck6pvpq6l0013u6s6sq9uk4zf"}]}}