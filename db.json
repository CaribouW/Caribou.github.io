{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/banner/0.jpg","path":"img/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/banner/1.jpg","path":"img/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/banner/2.jpg","path":"img/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/banner/3.jpg","path":"img/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/banner/4.jpg","path":"img/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/banner/5.jpg","path":"img/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/banner/6.jpg","path":"img/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"bada5c0bab29eb49af93c7643fe0cf553c89e758","modified":1603100833518},{"_id":"source/CNAME","hash":"ff74ab460003c974a47eb2387a2e45399e67a171","modified":1603100833518},{"_id":"source/_posts/Java集合.md","hash":"25596e82ec92f4f2abc2f8924312c61989b69681","modified":1603100833518},{"_id":"source/_posts/Kebernets 进行集群部署.md","hash":"fcef031238c18a87bfd32e3d258bf7642692e1e5","modified":1603100833519},{"_id":"source/_posts/LC周赛-2019-09-15.md","hash":"27da3596820f3a29145773bfbcafa1f44f22d308","modified":1603100833519},{"_id":"source/_posts/Redis-基本数据结构.md","hash":"a270a46cdc31e1665f1a9c7dd5e0963f6577c299","modified":1603100833519},{"_id":"source/_posts/TCP-IP-阅读笔记-1.md","hash":"7ec8f5072067ecfec9be98893297f7bd6e6e3ba4","modified":1603100833519},{"_id":"source/_posts/c-新特性.md","hash":"39d645af1e5edaacc6bc28454973669126adcb9f","modified":1603276747041},{"_id":"source/_posts/cmake学习笔记.md","hash":"a2dcabd0e775eff608685e214dce8f833fb675a5","modified":1603100833520},{"_id":"source/_posts/TCP-IP-阅读笔记-2 加密.md","hash":"8b871b286a82e8288afbdbcfed3bf24bd759afc7","modified":1603100833519},{"_id":"source/_posts/初探Anna.md","hash":"6693655d56407db1e7a14c15bd52146af64bb9cd","modified":1603100833520},{"_id":"source/_posts/leetcode-周赛20191005.md","hash":"b4b3c3082858700293015b27b3e42473a5ae79c1","modified":1603100833520},{"_id":"source/_posts/数据库整理-索引.md","hash":"e78c3043e2fc5bf63b8356cf8cf580564d5dd35f","modified":1603100833520},{"_id":"source/_posts/杂谈-鸡血帖.md","hash":"78f90c9f4c6e968aff40ecc982c21830d73724e2","modified":1603100833520},{"_id":"source/_posts/聊一聊一致性话题.md","hash":"10a36c953181cb944e432a740752f328fc6fc73f","modified":1603100833520},{"_id":"source/_posts/背包问题.md","hash":"e1693278749480847474dcb36eb76e3eda2485cf","modified":1603100833521},{"_id":"source/_posts/让我们实现一些负载均衡算法.md","hash":"4f0b7cd6074c6df9dd874e27d136e8ec69e169b3","modified":1603100833521},{"_id":"source/_posts/设计模式-单例.md","hash":"aec9f1397a08de23afd0448470e6ac4ad9de2d14","modified":1603100833521},{"_id":"source/contact/index.md","hash":"25b2824eaa36964954a760f056f15fba8ef46dde","modified":1603269296174},{"_id":"source/about/index.md","hash":"2c534baa609c5626ef3bdbd8dfa615aee4c1e63f","modified":1603100971306},{"_id":"source/categories/index.md","hash":"406e8056606b737006aa0a3d501adfe6f24d3554","modified":1603100833521},{"_id":"source/tags/index.md","hash":"5fd023d29a245b254d11512bd2f9e06fd35b094e","modified":1603100833521},{"_id":"themes/butterfly/README.md","hash":"a11128da336eca89c228ed101c9066547caa01de","modified":1603273016277},{"_id":"themes/butterfly/README_CN.md","hash":"467fe8167b270521fb092b7a24f101333358105e","modified":1603273016277},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1603273016277},{"_id":"themes/butterfly/_config.yml","hash":"b43995b83abfc2714aba9ceaedd6c6aadfc753f0","modified":1603277005830},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1603273016277},{"_id":"themes/butterfly/package.json","hash":"a26bcdac000622967bc371865b9441b4e6a412d5","modified":1603273016294},{"_id":"themes/butterfly/languages/default.yml","hash":"74609a7cb02eac9f654798c09585d2c0166474ce","modified":1603273016278},{"_id":"themes/butterfly/languages/en.yml","hash":"74609a7cb02eac9f654798c09585d2c0166474ce","modified":1603273016278},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"8725226dcb5b1b6d103a96f3f70e7f0c6328a41e","modified":1603273016278},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"26214b3a3ee4958df5be46d098624d6105fe6bc2","modified":1603273016278},{"_id":"themes/butterfly/layout/404.pug","hash":"0542b16d04c16f6bd2b86e83dba5676862a1d800","modified":1603273016278},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1603273016278},{"_id":"themes/butterfly/layout/category.pug","hash":"d014234c26d2c07caaea6703f7b48cb69c51907d","modified":1603273016279},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1603273016293},{"_id":"themes/butterfly/layout/page.pug","hash":"d5063ec93d33bd8488c12007709b6aafd8b9cf5f","modified":1603273016293},{"_id":"themes/butterfly/layout/post.pug","hash":"720237fc7ec0d4f9e66892311063cdcd552ea04f","modified":1603273016293},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1603273016294},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"01879e11e7fd1b1c98fb44c2b63c056af3d10415","modified":1603273016276},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1603273016276},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1603273016276},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"68bde1db513958ed1c23cd83f6dd844a85935cb6","modified":1603273016279},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"d37e3113e3eecf99f302d3fa0305b4ed5aaa3732","modified":1603273016279},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"45aadf2e0fdc0c17b19156b31457cd45e7248ce0","modified":1603273016279},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"0ac6564d7b2729a77abc78d0df89431bc2fb0432","modified":1603273016282},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"79ef449c5e04d0ecb4b9980d419ecbaf3d54d35a","modified":1603273016284},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"a9645f8c48d69eb31b6f8ef1f8d151d4b165ee0d","modified":1603273016284},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"c10836fd167c0401bf16ae2a1604c85462241ba2","modified":1603273016284},{"_id":"themes/butterfly/scripts/events/404.js","hash":"3c30dbd8b910ce7d8d7d8353cf2266cbc5d8775d","modified":1603273016294},{"_id":"themes/butterfly/scripts/events/check_hexo.js","hash":"15c58a4cb86f64581f71c37d9f2e1395e22a52bf","modified":1603273016294},{"_id":"themes/butterfly/scripts/events/replace_config.js","hash":"cdb4f462bceb155f59b98cd705efadbdc1fb5309","modified":1603273016294},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1603273016294},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"e9cf275c362d8634f093e63068da7ed1e53c7600","modified":1603273016295},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"55350958668e27a47070e5db50e4d2ff382e552b","modified":1603273016295},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"f30b0c108474b2869b35ee70dbc6ed2f2066979d","modified":1603273016295},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"ff79813afbaabd16188e7dbd435fe52273956c85","modified":1603273016295},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"e4461cedecb0d9fe7434cda8436e98d3f3a63159","modified":1603273016295},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"34e8fecbd6cc21470ba1381af65a12f59fa59d3e","modified":1603273016296},{"_id":"themes/butterfly/scripts/tags/button.js","hash":"e75283267f3a4773e6d803593d557e218396f260","modified":1603273016296},{"_id":"themes/butterfly/scripts/tags/gallery.js","hash":"77e657eb74a7718b7e11e04284827e4a85805b86","modified":1603273016296},{"_id":"themes/butterfly/scripts/tags/hide.js","hash":"ea5939e3d5b3d3106527093a4fe0adaaf1fef2f8","modified":1603273016296},{"_id":"themes/butterfly/scripts/tags/mermaid.js","hash":"f358a6a5b7979290263e5b02766d0b9449e60841","modified":1603273016296},{"_id":"themes/butterfly/scripts/tags/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1603273016297},{"_id":"themes/butterfly/scripts/tags/tabs.js","hash":"1f3bff5bbab30bb103e256ea6fb5b71a1bfe6dc1","modified":1603273016297},{"_id":"themes/butterfly/source/css/index.styl","hash":"d02ea8b8451513df5245151870195973709f25f2","modified":1603273016306},{"_id":"themes/butterfly/source/css/var.styl","hash":"6cc0c49e75e7384245a699914a74ccfe2ee0642c","modified":1603273016306},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1603273016306},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1603273016307},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1603273016307},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1603273016307},{"_id":"themes/butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1603273016307},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1603273016308},{"_id":"themes/butterfly/source/js/main.js","hash":"6d21e93b56da9b749d517bf61ebbf08d89d0ab7a","modified":1603273016308},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"2eafc44f4a5b24bef836b00dfc4360a84edb8dcc","modified":1603273016309},{"_id":"themes/butterfly/source/js/utils.js","hash":"f24426cd3c20057ecf46a872f748bece3fb9653a","modified":1603273016309},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"5390f2aea030486bf78678b910bda177b0ba5d05","modified":1603273016279},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"afb58249ddd121e5a8cf5d289fe215e15b90b82a","modified":1603273016280},{"_id":"themes/butterfly/layout/includes/head/aplayer.pug","hash":"b24959f00ac75f12f66b445158aad143ee860795","modified":1603273016280},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"345a957d9044e83c3440c610b6d31b7e8ecd9adf","modified":1603273016280},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"8df13e06cdfff76003e0c5e77ff309091027a766","modified":1603273016280},{"_id":"themes/butterfly/layout/includes/head/darkmode.pug","hash":"6f7cbc741e3c00a5321e1aa762a85d68d9ba6a85","modified":1603273016280},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1603273016280},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1603273016280},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"0fdf2a14f9ae498a6ca0de4409926001d4fb8b01","modified":1603273016281},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1603273016281},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"ffd3f8147286902ea3992c4a3f83ef66cc4a362b","modified":1603273016281},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"62cf37e28795d8b68a0e850ec8c94987b9e08db5","modified":1603273016281},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"14cd0f9c0c578512896b487263cd48570d74771a","modified":1603273016281},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"da07d43d31dddc37cc1ac9766df86345bcefcdff","modified":1603273016281},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"26f1955e89894dfb54573e616880ab6fad878f2d","modified":1603273016282},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1603273016282},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"7ffcf93bc5ee95ca461aea2735cedc0785c9884d","modified":1603273016282},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1603273016282},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"68dfd3c6a0f00b3ffc0333c81e165b4626f7425f","modified":1603273016282},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"2a1201ad33033f6ff0748e37d0f31ed43eca0b9b","modified":1603273016283},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/index.pug","hash":"d12fab033fb32b55abbc9be9b04cc6ab6465b98e","modified":1603273016283},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/mobile-menus.pug","hash":"b13d95c53c5031e6305ec1fe83d6758f52fa96ee","modified":1603273016283},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1603273016283},{"_id":"themes/butterfly/layout/includes/page/artitalk.pug","hash":"46bc194907f481a3a5dec1bb36b30ccf953e1970","modified":1603273016283},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"41642902aa1bb65a81257c82ebd2584678598c03","modified":1603273016283},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"da24e13ca15a376373fa3bae65f2bfb02f881b87","modified":1603273016283},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1603273016284},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1603273016284},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"bab59f87da66386e5abc84550614752c660a0705","modified":1603273016284},{"_id":"themes/butterfly/layout/includes/third-party/artitalk.pug","hash":"11f5227d3518bc91a85fdbd650a381aedfc10fe5","modified":1603273016285},{"_id":"themes/butterfly/layout/includes/third-party/baidu_push.pug","hash":"a3552fb4d969f72af0d1b099201faac1236e01d9","modified":1603273016285},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"29b851208aba27b62cae45b17d18c2237c278292","modified":1603273016288},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"abce595b5b8887577af07a8e2644fd76d2443556","modified":1603273016289},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"c81c2fef5f5606a1236cd24b6aa5bcf0e8a12594","modified":1603273016290},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1603273016290},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"907636bda4cbf9ca6f4e943bb49f18c282f2786f","modified":1603273016291},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"2e940de1a6261fd378e16e4cd3362a9d69c12f50","modified":1603273016291},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"721b611fda6dcfca8f88b9c7b70fede7b69a516b","modified":1603273016292},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"393a6f9a5dcabe8d96e9b6cb5620c12966dfd37f","modified":1603273016292},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"8af6a22bd598cbb899e3b12bf37ae549f81944a0","modified":1603273016292},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"83cb6ba0d8c913570147b3871c7fc0674dac8cdf","modified":1603273016292},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"b07172d7d11a6bb52e3607e3f434add9001f3e59","modified":1603273016292},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e275297f48503a28792b5c8f9a92492183274f44","modified":1603273016292},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"2b78fb1ed7fa91dc0957d025d2e4561522db4d7a","modified":1603273016293},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"66261dbc6a3ff2c943c9ca829a59126f2d8182ec","modified":1603273016293},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"ce316dc8aba2bf5556b9637124b64ef68ad4c6ad","modified":1603273016293},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"69d55a60c51887486cf578e21885092a2755ae14","modified":1603273016297},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c705c82c8b12ce10aeedc5f29557606d8fed203c","modified":1603273016298},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"58e6ea2055dedc7808f555c8c7d6dcece7c6d9a5","modified":1603273016298},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa7a4c1685f391d60ed863e869b9604b59746c27","modified":1603273016299},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"cd930735151d6a1ac41fb44e2907106417c51caa","modified":1603273016299},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"5f83bb79795782d20d7b90f2d98b097864b4a246","modified":1603273016300},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1603273016300},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8d5f3fee0a85b47e17f298e7342beb830a0f5297","modified":1603273016300},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"fd825c9d71fcd06a7c882850d1db0e9637f84107","modified":1603273016300},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"cbfbc11e50608af5cad0d418f138f12f95f666a3","modified":1603273016300},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1603273016300},{"_id":"themes/butterfly/source/css/_layout/mobile-sidebar.styl","hash":"d153816b11eb5f5458ce9ceb41e2bba9a2343fad","modified":1603273016301},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"4ae68b64ea0137427edf095190d0b7a6bf72b4a4","modified":1603273016301},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"49b7e06211053011ef5d3fe40acb6be485161041","modified":1603273016301},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"76d67b9a42e8b0c3d17316a6d75c5b5b4c65fb68","modified":1603273016301},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"7bf7af4754baba07edfc614621bdb965442cdc2f","modified":1603273016301},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"6ea8b4142e7d84ed2c99c7ed36d4066c0b8db42e","modified":1603273016301},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"cf322be6e7e20bfe6993ac76143ffc6d4c52b6d4","modified":1603273016302},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"bfc8aa2c65a281ccd9fb000feb370989771aa161","modified":1603273016302},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"e1a6415356f832d06f6c6be84c05d47ec7eb54eb","modified":1603273016302},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"4a0c674840be2ec8096093d71df0a38b2a3e8314","modified":1603273016302},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1603273016303},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1603273016303},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"2893c55238723a824cabbb55b172f08ae5071b31","modified":1603273016303},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"43f00986410f3dc0eed9e0bf9478801da32be24f","modified":1603273016303},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"6f2a1688bf873ab738f73a89e1be8f72e18b2a47","modified":1603273016304},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1603273016304},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"f718eec64b4586db169f566f403c6e5ad5d2af02","modified":1603273016304},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"89e744abc5e41f4855e7b87b13b854f4ec4ffc0e","modified":1603273016304},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"5e9423070e22df2522dac0a8e8be6f40ecae507a","modified":1603273016304},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"a7fc7624a8d893bdf9444f14154484c29c790e99","modified":1603273016304},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6e74130e3cc5598d15a2f37fc558cc0086c11c66","modified":1603273016305},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1603273016305},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"41a92e96c66dececcad050ada2201de196f5f697","modified":1603273016305},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1603273016305},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1603273016305},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1603273016306},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"99bc7ef172e9af332d652e92c5ec8b9ec1481434","modified":1603273016308},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"5fc2736b91ddfac0292582af6595a724d33dbd92","modified":1603273016309},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1603273016285},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1603273016285},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1603273016285},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1603273016285},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1603273016286},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1603273016286},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f617cacf5d1e8335abba96ee1ce4b79c17411e1e","modified":1603273016286},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"5e6c64f197a9992acbad385018bad7b74e7b3399","modified":1603273016286},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"b579b947a87da500a4f3abbdf870fb5a6f2a5a79","modified":1603273016286},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"4e6bf11006e4260e85cc02dca330b6c76abd6016","modified":1603273016286},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"71cf3d056b1a11e8a5e2980979af1c6b0248d762","modified":1603273016287},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"a42ee0f5a7f606d752f7b9dd92b6234d991f518d","modified":1603273016287},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1603273016287},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1603273016287},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"bd613894fe4761898b846abfdec81d544c45eb6a","modified":1603273016287},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"53af4ffa8119c7bbba3f066de74845be91400b5b","modified":1603273016288},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1603273016288},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"b1ae0c11a1ec73273cb55d7e2f9506f038633937","modified":1603273016288},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"1310800bc30b4e1cad93982991041589ee70ffef","modified":1603273016288},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"9cad8dccda6a64938d1dedc85e860514d13c3b4d","modified":1603273016289},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e529ef34ac60335b21d9fc2cdaa8b1e2b57e665c","modified":1603273016289},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"e67a95ca1034023fd8151ca901eafced8ff50c87","modified":1603273016289},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/leancloud.pug","hash":"c002c905b338fc5ab567ceb0a42284a11638381e","modified":1603273016289},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"debc2e0a4747dc821df9ee99c341230cf20916c2","modified":1603273016290},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1603273016290},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"a623a9b495ff13485d73acc51541085776dd04d2","modified":1603273016290},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1603273016291},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1603273016291},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"c40f7d6973811e53fcfbe881174ab373b4ea03ad","modified":1603273016291},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"368f5f75c506db77e4e1a20c29e9a3e2b4c3d783","modified":1603273016291},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"3bcd66576d13db8f93fa5b799a973d55e060a708","modified":1603273016298},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"13d92a9dbba94fd2cf2608dfffb6e029fa47d2a5","modified":1603273016298},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1603273016299},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"7574576b27d55d2281e67072981a1c3d0ad6a15f","modified":1603273016299},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"d40f1baec16c4a62e4a3a9a0379d1ca3ac6746b2","modified":1603273016299},{"_id":"themes/butterfly/source/img/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1598778126000},{"_id":"themes/butterfly/source/img/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1598778126000},{"_id":"themes/butterfly/source/img/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1598778126000},{"_id":"themes/butterfly/source/img/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1598778126000},{"_id":"themes/butterfly/source/img/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1598778126000},{"_id":"themes/butterfly/source/img/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1598778126000},{"_id":"themes/butterfly/source/img/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1598778126000},{"_id":"public/atom.xml","hash":"80b76d069ecf7c939a8ce263fcecaf6bbb0cf7a9","modified":1603277026246},{"_id":"public/podcast.xml","hash":"344c38f5eebc5b90b20f2d706bf068ea51fb4f6d","modified":1603277026246},{"_id":"public/search.xml","hash":"d55b0112bd65ef328a594ff348dbfbb784cdb7d2","modified":1603277026246},{"_id":"public/about/index.html","hash":"928abec51882965b42686e26cbee5141b09eda88","modified":1603277026246},{"_id":"public/categories/index.html","hash":"1c88ad6f1737e5aaba438082fd447fbab09de2e6","modified":1603277026246},{"_id":"public/contact/index.html","hash":"83a2344f092ade3d0c6620220a16602260bac710","modified":1603277026246},{"_id":"public/tags/index.html","hash":"235d13b73b9d7a338d3804865931c1c2af5c8fb8","modified":1603277026246},{"_id":"public/2020/04/09/liao-yi-liao-yi-zhi-xing-hua-ti/index.html","hash":"6c5fcae6a7078f423475c35982808182d45dabf0","modified":1603277026246},{"_id":"public/2020/04/02/rang-wo-men-shi-xian-yi-xie-fu-zai-jun-heng-suan-fa/index.html","hash":"e47156020990a94dd740c8021a01fc6afed926d2","modified":1603277026246},{"_id":"public/2020/03/24/redis-ji-ben-shu-ju-jie-gou/index.html","hash":"1d8c0ad1c3035b1ab92289fa4e509b87fc3461c2","modified":1603277026246},{"_id":"public/2020/03/14/java-ji-he/index.html","hash":"427b68d00a5fa7d12d916e971bc1bbf39e986ddd","modified":1603277026246},{"_id":"public/2020/02/18/cmake-xue-xi-bi-ji/index.html","hash":"a91faafce57cf5fb58fd46e43b671b2ac8518558","modified":1603277026246},{"_id":"public/2020/02/17/tcp-ip-yue-du-bi-ji-2-jia-mi/index.html","hash":"e805a34e5c12d1b1a3c0b785eb10a7596d12d27c","modified":1603277026246},{"_id":"public/2020/02/17/chu-tan-anna/index.html","hash":"299e77e589843e20469dde8a80dc078cfc6749e4","modified":1603277026246},{"_id":"public/2020/01/15/bei-bao-wen-ti/index.html","hash":"6d98debd8bd417dcc41e1ef52f7a0e105f3275c1","modified":1603277026246},{"_id":"public/2020/01/15/c-xin-te-xing/index.html","hash":"70411bb29bdecfd6fb8b32753da7db114aa0365d","modified":1603277026246},{"_id":"public/2019/12/22/za-tan-ji-xie-tie/index.html","hash":"28e0e95dff5a4ed0135360540d225d974ce078d2","modified":1603277026246},{"_id":"public/2019/12/14/tcp-ip-yue-du-bi-ji-1/index.html","hash":"384630a362a10a0f558a7a8251e17130c17d0426","modified":1603277026246},{"_id":"public/2019/12/07/she-ji-mo-shi-dan-li/index.html","hash":"ddc4910c5597b7ac94863a9d56b5e4d7d7f86444","modified":1603277026246},{"_id":"public/2019/12/05/shu-ju-ku-zheng-li-suo-yin/index.html","hash":"75652a64e88b1b8fc9e6e6a872d0c0dc27d4f0a5","modified":1603277026246},{"_id":"public/2019/10/08/leetcode-zhou-sai-20191005/index.html","hash":"847f9178244f6b20b532550e044e4c7196c7042f","modified":1603277026246},{"_id":"public/2019/09/15/lc-zhou-sai-2019-09-15/index.html","hash":"977c75e2b06d6ff84d5b67db0d6a00356418c077","modified":1603277026246},{"_id":"public/2019/09/12/kebernets-jin-xing-ji-qun-bu-shu/index.html","hash":"213be23c05ca18a95de558d809d826cb692d612a","modified":1603277026246},{"_id":"public/archives/index.html","hash":"cc17315d7b5b1f7d045cf652908b38f7070cf40f","modified":1603277026246},{"_id":"public/archives/page/2/index.html","hash":"03e10cf092cd194e7313f1cbf1f39ab0d3b85e57","modified":1603277026246},{"_id":"public/archives/2019/index.html","hash":"94d426786860799b6498d4078a14622d977a64a1","modified":1603277026246},{"_id":"public/archives/2019/09/index.html","hash":"2203be6f0627586958aca8782a85186019eadb63","modified":1603277026246},{"_id":"public/archives/2019/10/index.html","hash":"6a6eaf025bbe3f475e434ba59d3d024b071cfff1","modified":1603277026246},{"_id":"public/archives/2019/12/index.html","hash":"f2d19e8661f6959211f3af3f320c7f6e56a415d2","modified":1603277026246},{"_id":"public/archives/2020/index.html","hash":"69fd6cb7a3190c0001d1f0b785a38941eff97bde","modified":1603277026246},{"_id":"public/archives/2020/01/index.html","hash":"7506bc0f88b607ff85125fb733e007230bcec0b5","modified":1603277026246},{"_id":"public/archives/2020/02/index.html","hash":"5a28e3b787b338d8f5f96aaf5d56e14b47f8cedc","modified":1603277026246},{"_id":"public/archives/2020/03/index.html","hash":"20e383922f41c4c7143dde357120d812e98737de","modified":1603277026246},{"_id":"public/archives/2020/04/index.html","hash":"4aafd40651ac29ac607355ef6ef8f2f9797a8c54","modified":1603277026246},{"_id":"public/categories/服务/index.html","hash":"5df7f6d84c75f786d9b435ebaff83593f124523c","modified":1603277026246},{"_id":"public/categories/算法/index.html","hash":"8241dd17811a725a9e4a5447b02f8d239c985c44","modified":1603277026246},{"_id":"public/categories/笔记/index.html","hash":"252716365f968c233a7ddb410c16ccb9585a3ae2","modified":1603277026246},{"_id":"public/categories/杂谈/index.html","hash":"e51233ef37da3e22395f76a95bb67d8cda16ecbb","modified":1603277026246},{"_id":"public/index.html","hash":"e42385e4b5b7676c01ab9eb70497a40786fa3937","modified":1603277026246},{"_id":"public/page/2/index.html","hash":"f2d72cb86ff5416d43fb96e3e05a14a6a238e86e","modified":1603277026246},{"_id":"public/tags/K8S/index.html","hash":"460b984cadbe0e6b32d3a8be2b472ee5ad952601","modified":1603277026246},{"_id":"public/tags/competition/index.html","hash":"98f159794cf75e4896457db6ad9b6e2ad9cdd28c","modified":1603277026246},{"_id":"public/tags/笔记/index.html","hash":"ac5e7298d34c3f6fdc3dc239ec26befbf20a5fd8","modified":1603277026246},{"_id":"public/tags/读书笔记/index.html","hash":"9f218ea841f68cb4eddcf561eb86c50f56b5b237","modified":1603277026246},{"_id":"public/tags/整理/index.html","hash":"e5332c622318cb86491b28fa84f9fec548fd7671","modified":1603277026246},{"_id":"public/tags/UpUp/index.html","hash":"2bbfc0de67f53bef6674fcfb65f5b689143238f8","modified":1603277026246},{"_id":"public/tags/算法/index.html","hash":"37c7c6e1d19393f691725ee702c455df65bd4c11","modified":1603277026246},{"_id":"public/tags/coding/index.html","hash":"f10ac412290e11cd43b3ba955f62b13291b71e30","modified":1603277026246},{"_id":"public/tags/设计模式/index.html","hash":"85626a6313bcfe8a3904fa9309a4c4015c736fa4","modified":1603277026246},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1603277026246},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1603277026246},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1603277026246},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1603277026246},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1603277026246},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1603277026246},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1603277026246},{"_id":"public/CNAME","hash":"ff74ab460003c974a47eb2387a2e45399e67a171","modified":1603277026246},{"_id":"public/img/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1603277026246},{"_id":"public/img/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1603277026246},{"_id":"public/img/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1603277026246},{"_id":"public/img/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1603277026246},{"_id":"public/js/utils.js","hash":"f24426cd3c20057ecf46a872f748bece3fb9653a","modified":1603277026246},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1603277026246},{"_id":"public/js/search/algolia.js","hash":"99bc7ef172e9af332d652e92c5ec8b9ec1481434","modified":1603277026246},{"_id":"public/js/search/local-search.js","hash":"5fc2736b91ddfac0292582af6595a724d33dbd92","modified":1603277026246},{"_id":"public/css/index.css","hash":"70ed53e97de8dfff1b0f992a65bb03808641dfe4","modified":1603277026246},{"_id":"public/img/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1603277026246},{"_id":"public/img/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1603277026246},{"_id":"public/js/main.js","hash":"6d21e93b56da9b749d517bf61ebbf08d89d0ab7a","modified":1603277026246},{"_id":"public/js/tw_cn.js","hash":"2eafc44f4a5b24bef836b00dfc4360a84edb8dcc","modified":1603277026246},{"_id":"public/img/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1603277026246}],"Category":[{"name":"服务","_id":"ckgj9qi0z0004x8me53mwacz9"},{"name":"算法","_id":"ckgj9qi13000bx8me257dgae4"},{"name":"笔记","_id":"ckgj9qi1b000sx8mefyihgo29"},{"name":"杂谈","_id":"ckgj9qi1d0010x8me85okfnil"}],"Data":[],"Page":[{"title":"关于我","type":"about","_content":"\n### About Myself\n\n- 来自南京\n- 学学摄影，搞搞编程\n- 兴趣是人最大的动力，不忘记拾起自己的童心\n","source":"about/index.md","raw":"---\ntitle: 关于我\ntype: \"about\"\n---\n\n### About Myself\n\n- 来自南京\n- 学学摄影，搞搞编程\n- 兴趣是人最大的动力，不忘记拾起自己的童心\n","date":"2020-10-19T09:49:31.306Z","updated":"2020-10-19T09:49:31.306Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckgj9qi0t0000x8me5eb02yam","content":"<h3 id=\"About-Myself\"><a href=\"#About-Myself\" class=\"headerlink\" title=\"About Myself\"></a>About Myself</h3><ul>\n<li>来自南京</li>\n<li>学学摄影，搞搞编程</li>\n<li>兴趣是人最大的动力，不忘记拾起自己的童心</li>\n</ul>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603247133426-705532600985?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80","excerpt":"","more":"<h3 id=\"About-Myself\"><a href=\"#About-Myself\" class=\"headerlink\" title=\"About Myself\"></a>About Myself</h3><ul>\n<li>来自南京</li>\n<li>学学摄影，搞搞编程</li>\n<li>兴趣是人最大的动力，不忘记拾起自己的童心</li>\n</ul>\n"},{"title":"categories","date":"2019-09-01T13:26:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-09-01 21:26:04\ntype: \"categories\"\n---\n","updated":"2020-10-19T09:47:13.521Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckgj9qi0x0002x8me30aca5mf","content":"","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603194477925-b65a2d92d015?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","excerpt":"","more":""},{"title":"contact","date":"2020-10-21T08:34:32.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-10-21 16:34:32\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-10-21T08:34:56.174Z","path":"contact/index.html","comments":1,"_id":"ckgj9qi100006x8me19wya87s","content":"","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603247133426-705532600985?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80","excerpt":"","more":""},{"title":"tags","date":"2019-09-01T13:26:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-09-01 21:26:03\ntype: \"tags\"\n---\n","updated":"2020-10-19T09:47:13.521Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckgj9qi120008x8me8e1k74z3","content":"","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603247133426-705532600985?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80","excerpt":"","more":""}],"Post":[{"title":"Kubernets 进行集群部署","date":"2019-09-12T15:23:08.000Z","description":"一条从Spring Cloud向K8S的路,循循善诱.","cover_img":"https://images.unsplash.com/photo-1429667947446-3c93a979b7e0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","feature_img":"https://images.unsplash.com/photo-1543872084-c7bd3822856f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","_content":"\n## Kubernets 进行集群部署\n\n### 关键定义\n\n- ##### Pod\n\n运行在Node节点上的若干个容器集合，是一个在容器基础上的更高的抽象。主要由 `master` 节点进行调度，将生成实例化的 Pod 调度到某一个 Node 上进行绑定；\n\n当某一个 Node 宕机，可以进行重新调度，将 Pod 调度到其他的 Node 节点上.\n- #####  Replication Controller\n\n我们一般不会手动自己创建Pod，这样很难管理。利用Replication Controller，可以定义Pod运行内容，副本的个数等信息，它的升级版本是 ReplicaSet。现在已经创建了Pod的一些副本，那么在这些副本上如何均衡负载呢？我们需要的是Service。\n\n- ##### Service\n\n可以把一组Pod组成服务 Service，Service有一个虚拟的ClusterIP，服务访问可以通过ClusterIP作为统一请求入口，因为一个 Service 对应一组Pod，所以可以做到负载均衡。服务可以通过 NodePort，LoadBalancer的方式暴露对外服务。注意 type = LoadBalancer需要云服务平台提供基础的服务，自建的K8S集群默认是没有这个东西的。如果在阿里云上定义服务 type = LoadBalancer 后，你会发现，在管理后台的负载均衡页面，会增加一个负载均衡器\n\n\n\n从以上的定义中看出, 一个Node可以认为是一台主机, 而Service作为一个服务提供者, 下包含了多个冗余Node. 能够在某一个Node宕机时及时进行其他备用节点的替补. \n\n我们需要把docker镜像push到远端的某一个镜像管理平台，而后通过配置文件的形式来定义Pod和Service的内容,实现分布式部署.\n\n### K8s YAML配置文件\n\n```\n# yaml格式的pod定义文件完整内容：\napiVersion: v1       #必选，版本号，例如v1\nkind: Pod       #必选，Pod\nmetadata:       #必选，元数据\n  name: string       #必选，Pod名称\n  namespace: string    #必选，Pod所属的命名空间\n  labels:      #自定义标签\n    - name: string     #自定义标签名字\n  annotations:       #自定义注释列表\n    - name: string\nspec:         #必选，Pod中容器的详细定义\n  containers:      #必选，Pod中容器列表\n  - name: string     #必选，容器名称\n    image: string    #必选，容器的镜像名称\n    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像\n    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令\n    args: [string]     #容器的启动命令参数列表\n    workingDir: string     #容器的工作目录\n    volumeMounts:    #挂载到容器内部的存储卷配置\n    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名\n      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符\n      readOnly: boolean    #是否为只读模式\n    ports:       #需要暴露的端口库号列表\n    - name: string     #端口号名称\n      containerPort: int   #容器需要监听的端口号\n      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同\n      protocol: string     #端口协议，支持TCP和UDP，默认TCP\n    env:       #容器运行前需设置的环境变量列表\n    - name: string     #环境变量名称\n      value: string    #环境变量的值\n    resources:       #资源限制和请求的设置\n      limits:      #资源限制的设置\n        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数\n        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数\n      requests:      #资源请求的设置\n        cpu: string    #Cpu请求，容器启动的初始可用数量\n        memory: string     #内存清楚，容器启动的初始可用数量\n    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可\n      exec:      #对Pod容器内检查方式设置为exec方式\n        command: [string]  #exec方式需要制定的命令或脚本\n      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式\n         port: number\n       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒\n       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒\n       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次\n       successThreshold: 0\n       failureThreshold: 0\n       securityContext:\n         privileged:false\n    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod\n    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定\n    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定\n    - name: string\n    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络\n    volumes:       #在该pod上定义共享存储卷列表\n    - name: string     #共享存储卷名称 （volumes类型有很多种）\n      emptyDir: {}     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值\n      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录\n        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录\n      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部\n        name: string\n        items:\n        - key: string\n\n```\n\n### 端口和IP\n\n和docker的内网环境类似，k8s也具有集群内部网络和外部网络.\n\n#### 1. nodePort\n\n外部流量访问k8s集群中service入口的一种方式（另一种方式是LoadBalancer），即nodeIP:nodePort是提供给外部流量访问k8s集群中service的入口。\n\n比如外部用户要访问k8s集群中的一个Web应用，那么我们可以配置对应service的**type=NodePort**，nodePort=30001。其他用户就可以通过浏览器http://node:30001访问到该web服务。\n\n而数据库等服务可能不需要被外界访问，只需被内部服务访问即可，那么我们就不必设置service的NodePort。\n\n\n\n#### 2. port\nk8s集群内部服务之间访问**service**的入口。即**clusterIP:port**是service暴露在clusterIP上的端口。\n\n- mysql容器暴露了3306端口（参考DockerFile），集群内其他容器通过33306端口访问mysql服务，但是**外部流量不能访问mysql服务**，因为mysql服务没有配置NodePort。对应的service.yaml如下：\n\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n name: mysql-service\nspec:\n ports:\n - port: 33306\n   targetPort: 3306\n selector:\n  name: mysql-pod\n```\n\n\n\n#### 3. targetPort\n\n容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，经过kube-proxy流入到后端pod的targetPort上，最后进入容器。\n\n与**制作容器时暴露的端口一致**（使用DockerFile中的**EXPOSE**），例如官方的nginx（参考DockerFile）暴露80端口。 对应的service.yaml如下：\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n name: nginx-service\nspec:\n type: NodePort         // 有配置NodePort，外部流量可访问k8s中的服务\n ports:\n - port: 30080          // 服务访问端口\n   targetPort: 80       // 容器端口\n   nodePort: 30001      // NodePort\n selector:\n  name: nginx-pod\n```\n\n总的来说\n\n- port和nodePort都是service的端口，前者暴露给k8s集群内部服务访问，后者暴露给k8s集群外部流量访问。\n- 从上两个端口过来的数据都需要经过反向代理kube-proxy，流入后端pod的targetPort上，最后到达pod内的容器。","source":"_posts/Kebernets 进行集群部署.md","raw":"---\ntitle: Kubernets 进行集群部署\ndate: 2019-09-12 23:23:08\ntags: \n  - K8S\ncategories: \n  - 服务\ndescription: 一条从Spring Cloud向K8S的路,循循善诱.\ncover_img: https://images.unsplash.com/photo-1429667947446-3c93a979b7e0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\nfeature_img: https://images.unsplash.com/photo-1543872084-c7bd3822856f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\n---\n\n## Kubernets 进行集群部署\n\n### 关键定义\n\n- ##### Pod\n\n运行在Node节点上的若干个容器集合，是一个在容器基础上的更高的抽象。主要由 `master` 节点进行调度，将生成实例化的 Pod 调度到某一个 Node 上进行绑定；\n\n当某一个 Node 宕机，可以进行重新调度，将 Pod 调度到其他的 Node 节点上.\n- #####  Replication Controller\n\n我们一般不会手动自己创建Pod，这样很难管理。利用Replication Controller，可以定义Pod运行内容，副本的个数等信息，它的升级版本是 ReplicaSet。现在已经创建了Pod的一些副本，那么在这些副本上如何均衡负载呢？我们需要的是Service。\n\n- ##### Service\n\n可以把一组Pod组成服务 Service，Service有一个虚拟的ClusterIP，服务访问可以通过ClusterIP作为统一请求入口，因为一个 Service 对应一组Pod，所以可以做到负载均衡。服务可以通过 NodePort，LoadBalancer的方式暴露对外服务。注意 type = LoadBalancer需要云服务平台提供基础的服务，自建的K8S集群默认是没有这个东西的。如果在阿里云上定义服务 type = LoadBalancer 后，你会发现，在管理后台的负载均衡页面，会增加一个负载均衡器\n\n\n\n从以上的定义中看出, 一个Node可以认为是一台主机, 而Service作为一个服务提供者, 下包含了多个冗余Node. 能够在某一个Node宕机时及时进行其他备用节点的替补. \n\n我们需要把docker镜像push到远端的某一个镜像管理平台，而后通过配置文件的形式来定义Pod和Service的内容,实现分布式部署.\n\n### K8s YAML配置文件\n\n```\n# yaml格式的pod定义文件完整内容：\napiVersion: v1       #必选，版本号，例如v1\nkind: Pod       #必选，Pod\nmetadata:       #必选，元数据\n  name: string       #必选，Pod名称\n  namespace: string    #必选，Pod所属的命名空间\n  labels:      #自定义标签\n    - name: string     #自定义标签名字\n  annotations:       #自定义注释列表\n    - name: string\nspec:         #必选，Pod中容器的详细定义\n  containers:      #必选，Pod中容器列表\n  - name: string     #必选，容器名称\n    image: string    #必选，容器的镜像名称\n    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像\n    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令\n    args: [string]     #容器的启动命令参数列表\n    workingDir: string     #容器的工作目录\n    volumeMounts:    #挂载到容器内部的存储卷配置\n    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名\n      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符\n      readOnly: boolean    #是否为只读模式\n    ports:       #需要暴露的端口库号列表\n    - name: string     #端口号名称\n      containerPort: int   #容器需要监听的端口号\n      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同\n      protocol: string     #端口协议，支持TCP和UDP，默认TCP\n    env:       #容器运行前需设置的环境变量列表\n    - name: string     #环境变量名称\n      value: string    #环境变量的值\n    resources:       #资源限制和请求的设置\n      limits:      #资源限制的设置\n        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数\n        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数\n      requests:      #资源请求的设置\n        cpu: string    #Cpu请求，容器启动的初始可用数量\n        memory: string     #内存清楚，容器启动的初始可用数量\n    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可\n      exec:      #对Pod容器内检查方式设置为exec方式\n        command: [string]  #exec方式需要制定的命令或脚本\n      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式\n         port: number\n       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒\n       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒\n       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次\n       successThreshold: 0\n       failureThreshold: 0\n       securityContext:\n         privileged:false\n    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod\n    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定\n    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定\n    - name: string\n    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络\n    volumes:       #在该pod上定义共享存储卷列表\n    - name: string     #共享存储卷名称 （volumes类型有很多种）\n      emptyDir: {}     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值\n      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录\n        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录\n      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部\n        name: string\n        items:\n        - key: string\n\n```\n\n### 端口和IP\n\n和docker的内网环境类似，k8s也具有集群内部网络和外部网络.\n\n#### 1. nodePort\n\n外部流量访问k8s集群中service入口的一种方式（另一种方式是LoadBalancer），即nodeIP:nodePort是提供给外部流量访问k8s集群中service的入口。\n\n比如外部用户要访问k8s集群中的一个Web应用，那么我们可以配置对应service的**type=NodePort**，nodePort=30001。其他用户就可以通过浏览器http://node:30001访问到该web服务。\n\n而数据库等服务可能不需要被外界访问，只需被内部服务访问即可，那么我们就不必设置service的NodePort。\n\n\n\n#### 2. port\nk8s集群内部服务之间访问**service**的入口。即**clusterIP:port**是service暴露在clusterIP上的端口。\n\n- mysql容器暴露了3306端口（参考DockerFile），集群内其他容器通过33306端口访问mysql服务，但是**外部流量不能访问mysql服务**，因为mysql服务没有配置NodePort。对应的service.yaml如下：\n\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n name: mysql-service\nspec:\n ports:\n - port: 33306\n   targetPort: 3306\n selector:\n  name: mysql-pod\n```\n\n\n\n#### 3. targetPort\n\n容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，经过kube-proxy流入到后端pod的targetPort上，最后进入容器。\n\n与**制作容器时暴露的端口一致**（使用DockerFile中的**EXPOSE**），例如官方的nginx（参考DockerFile）暴露80端口。 对应的service.yaml如下：\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n name: nginx-service\nspec:\n type: NodePort         // 有配置NodePort，外部流量可访问k8s中的服务\n ports:\n - port: 30080          // 服务访问端口\n   targetPort: 80       // 容器端口\n   nodePort: 30001      // NodePort\n selector:\n  name: nginx-pod\n```\n\n总的来说\n\n- port和nodePort都是service的端口，前者暴露给k8s集群内部服务访问，后者暴露给k8s集群外部流量访问。\n- 从上两个端口过来的数据都需要经过反向代理kube-proxy，流入后端pod的targetPort上，最后到达pod内的容器。","slug":"Kebernets 进行集群部署","published":1,"updated":"2020-10-19T09:47:13.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi0u0001x8me779nh0z1","content":"<h2 id=\"Kubernets-进行集群部署\"><a href=\"#Kubernets-进行集群部署\" class=\"headerlink\" title=\"Kubernets 进行集群部署\"></a>Kubernets 进行集群部署</h2><h3 id=\"关键定义\"><a href=\"#关键定义\" class=\"headerlink\" title=\"关键定义\"></a>关键定义</h3><ul>\n<li><h5 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h5></li>\n</ul>\n<p>运行在Node节点上的若干个容器集合，是一个在容器基础上的更高的抽象。主要由 <code>master</code> 节点进行调度，将生成实例化的 Pod 调度到某一个 Node 上进行绑定；</p>\n<p>当某一个 Node 宕机，可以进行重新调度，将 Pod 调度到其他的 Node 节点上.</p>\n<ul>\n<li><h5 id=\"Replication-Controller\"><a href=\"#Replication-Controller\" class=\"headerlink\" title=\"Replication Controller\"></a>Replication Controller</h5></li>\n</ul>\n<p>我们一般不会手动自己创建Pod，这样很难管理。利用Replication Controller，可以定义Pod运行内容，副本的个数等信息，它的升级版本是 ReplicaSet。现在已经创建了Pod的一些副本，那么在这些副本上如何均衡负载呢？我们需要的是Service。</p>\n<ul>\n<li><h5 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h5></li>\n</ul>\n<p>可以把一组Pod组成服务 Service，Service有一个虚拟的ClusterIP，服务访问可以通过ClusterIP作为统一请求入口，因为一个 Service 对应一组Pod，所以可以做到负载均衡。服务可以通过 NodePort，LoadBalancer的方式暴露对外服务。注意 type = LoadBalancer需要云服务平台提供基础的服务，自建的K8S集群默认是没有这个东西的。如果在阿里云上定义服务 type = LoadBalancer 后，你会发现，在管理后台的负载均衡页面，会增加一个负载均衡器</p>\n<p>从以上的定义中看出, 一个Node可以认为是一台主机, 而Service作为一个服务提供者, 下包含了多个冗余Node. 能够在某一个Node宕机时及时进行其他备用节点的替补. </p>\n<p>我们需要把docker镜像push到远端的某一个镜像管理平台，而后通过配置文件的形式来定义Pod和Service的内容,实现分布式部署.</p>\n<h3 id=\"K8s-YAML配置文件\"><a href=\"#K8s-YAML配置文件\" class=\"headerlink\" title=\"K8s YAML配置文件\"></a>K8s YAML配置文件</h3><pre><code># yaml格式的pod定义文件完整内容：\napiVersion: v1       #必选，版本号，例如v1\nkind: Pod       #必选，Pod\nmetadata:       #必选，元数据\n  name: string       #必选，Pod名称\n  namespace: string    #必选，Pod所属的命名空间\n  labels:      #自定义标签\n    - name: string     #自定义标签名字\n  annotations:       #自定义注释列表\n    - name: string\nspec:         #必选，Pod中容器的详细定义\n  containers:      #必选，Pod中容器列表\n  - name: string     #必选，容器名称\n    image: string    #必选，容器的镜像名称\n    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像\n    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令\n    args: [string]     #容器的启动命令参数列表\n    workingDir: string     #容器的工作目录\n    volumeMounts:    #挂载到容器内部的存储卷配置\n    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名\n      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符\n      readOnly: boolean    #是否为只读模式\n    ports:       #需要暴露的端口库号列表\n    - name: string     #端口号名称\n      containerPort: int   #容器需要监听的端口号\n      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同\n      protocol: string     #端口协议，支持TCP和UDP，默认TCP\n    env:       #容器运行前需设置的环境变量列表\n    - name: string     #环境变量名称\n      value: string    #环境变量的值\n    resources:       #资源限制和请求的设置\n      limits:      #资源限制的设置\n        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数\n        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数\n      requests:      #资源请求的设置\n        cpu: string    #Cpu请求，容器启动的初始可用数量\n        memory: string     #内存清楚，容器启动的初始可用数量\n    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可\n      exec:      #对Pod容器内检查方式设置为exec方式\n        command: [string]  #exec方式需要制定的命令或脚本\n      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式\n         port: number\n       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒\n       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒\n       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次\n       successThreshold: 0\n       failureThreshold: 0\n       securityContext:\n         privileged:false\n    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod\n    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定\n    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定\n    - name: string\n    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络\n    volumes:       #在该pod上定义共享存储卷列表\n    - name: string     #共享存储卷名称 （volumes类型有很多种）\n      emptyDir: &#123;&#125;     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值\n      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录\n        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录\n      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部\n        name: string\n        items:\n        - key: string\n</code></pre>\n<h3 id=\"端口和IP\"><a href=\"#端口和IP\" class=\"headerlink\" title=\"端口和IP\"></a>端口和IP</h3><p>和docker的内网环境类似，k8s也具有集群内部网络和外部网络.</p>\n<h4 id=\"1-nodePort\"><a href=\"#1-nodePort\" class=\"headerlink\" title=\"1. nodePort\"></a>1. nodePort</h4><p>外部流量访问k8s集群中service入口的一种方式（另一种方式是LoadBalancer），即nodeIP:nodePort是提供给外部流量访问k8s集群中service的入口。</p>\n<p>比如外部用户要访问k8s集群中的一个Web应用，那么我们可以配置对应service的<strong>type=NodePort</strong>，nodePort=30001。其他用户就可以通过浏览器<a href=\"http://node:30001访问到该web服务。\">http://node:30001访问到该web服务。</a></p>\n<p>而数据库等服务可能不需要被外界访问，只需被内部服务访问即可，那么我们就不必设置service的NodePort。</p>\n<h4 id=\"2-port\"><a href=\"#2-port\" class=\"headerlink\" title=\"2. port\"></a>2. port</h4><p>k8s集群内部服务之间访问<strong>service</strong>的入口。即<strong>clusterIP:port</strong>是service暴露在clusterIP上的端口。</p>\n<ul>\n<li>mysql容器暴露了3306端口（参考DockerFile），集群内其他容器通过33306端口访问mysql服务，但是<strong>外部流量不能访问mysql服务</strong>，因为mysql服务没有配置NodePort。对应的service.yaml如下：</li>\n</ul>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>service\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33306</span>\n   <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">-</span>pod</code></pre>\n<h4 id=\"3-targetPort\"><a href=\"#3-targetPort\" class=\"headerlink\" title=\"3. targetPort\"></a>3. targetPort</h4><p>容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，经过kube-proxy流入到后端pod的targetPort上，最后进入容器。</p>\n<p>与<strong>制作容器时暴露的端口一致</strong>（使用DockerFile中的<strong>EXPOSE</strong>），例如官方的nginx（参考DockerFile）暴露80端口。 对应的service.yaml如下：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>service\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort         // 有配置NodePort，外部流量可访问k8s中的服务\n <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> 30080          // 服务访问端口\n   <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> 80       // 容器端口\n   <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> 30001      // NodePort\n <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">-</span>pod</code></pre>\n<p>总的来说</p>\n<ul>\n<li>port和nodePort都是service的端口，前者暴露给k8s集群内部服务访问，后者暴露给k8s集群外部流量访问。</li>\n<li>从上两个端口过来的数据都需要经过反向代理kube-proxy，流入后端pod的targetPort上，最后到达pod内的容器。</li>\n</ul>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603247133426-705532600985?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80","excerpt":"","more":"<h2 id=\"Kubernets-进行集群部署\"><a href=\"#Kubernets-进行集群部署\" class=\"headerlink\" title=\"Kubernets 进行集群部署\"></a>Kubernets 进行集群部署</h2><h3 id=\"关键定义\"><a href=\"#关键定义\" class=\"headerlink\" title=\"关键定义\"></a>关键定义</h3><ul>\n<li><h5 id=\"Pod\"><a href=\"#Pod\" class=\"headerlink\" title=\"Pod\"></a>Pod</h5></li>\n</ul>\n<p>运行在Node节点上的若干个容器集合，是一个在容器基础上的更高的抽象。主要由 <code>master</code> 节点进行调度，将生成实例化的 Pod 调度到某一个 Node 上进行绑定；</p>\n<p>当某一个 Node 宕机，可以进行重新调度，将 Pod 调度到其他的 Node 节点上.</p>\n<ul>\n<li><h5 id=\"Replication-Controller\"><a href=\"#Replication-Controller\" class=\"headerlink\" title=\"Replication Controller\"></a>Replication Controller</h5></li>\n</ul>\n<p>我们一般不会手动自己创建Pod，这样很难管理。利用Replication Controller，可以定义Pod运行内容，副本的个数等信息，它的升级版本是 ReplicaSet。现在已经创建了Pod的一些副本，那么在这些副本上如何均衡负载呢？我们需要的是Service。</p>\n<ul>\n<li><h5 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h5></li>\n</ul>\n<p>可以把一组Pod组成服务 Service，Service有一个虚拟的ClusterIP，服务访问可以通过ClusterIP作为统一请求入口，因为一个 Service 对应一组Pod，所以可以做到负载均衡。服务可以通过 NodePort，LoadBalancer的方式暴露对外服务。注意 type = LoadBalancer需要云服务平台提供基础的服务，自建的K8S集群默认是没有这个东西的。如果在阿里云上定义服务 type = LoadBalancer 后，你会发现，在管理后台的负载均衡页面，会增加一个负载均衡器</p>\n<p>从以上的定义中看出, 一个Node可以认为是一台主机, 而Service作为一个服务提供者, 下包含了多个冗余Node. 能够在某一个Node宕机时及时进行其他备用节点的替补. </p>\n<p>我们需要把docker镜像push到远端的某一个镜像管理平台，而后通过配置文件的形式来定义Pod和Service的内容,实现分布式部署.</p>\n<h3 id=\"K8s-YAML配置文件\"><a href=\"#K8s-YAML配置文件\" class=\"headerlink\" title=\"K8s YAML配置文件\"></a>K8s YAML配置文件</h3><pre><code># yaml格式的pod定义文件完整内容：\napiVersion: v1       #必选，版本号，例如v1\nkind: Pod       #必选，Pod\nmetadata:       #必选，元数据\n  name: string       #必选，Pod名称\n  namespace: string    #必选，Pod所属的命名空间\n  labels:      #自定义标签\n    - name: string     #自定义标签名字\n  annotations:       #自定义注释列表\n    - name: string\nspec:         #必选，Pod中容器的详细定义\n  containers:      #必选，Pod中容器列表\n  - name: string     #必选，容器名称\n    image: string    #必选，容器的镜像名称\n    imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像\n    command: [string]    #容器的启动命令列表，如不指定，使用打包时使用的启动命令\n    args: [string]     #容器的启动命令参数列表\n    workingDir: string     #容器的工作目录\n    volumeMounts:    #挂载到容器内部的存储卷配置\n    - name: string     #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名\n      mountPath: string    #存储卷在容器内mount的绝对路径，应少于512字符\n      readOnly: boolean    #是否为只读模式\n    ports:       #需要暴露的端口库号列表\n    - name: string     #端口号名称\n      containerPort: int   #容器需要监听的端口号\n      hostPort: int    #容器所在主机需要监听的端口号，默认与Container相同\n      protocol: string     #端口协议，支持TCP和UDP，默认TCP\n    env:       #容器运行前需设置的环境变量列表\n    - name: string     #环境变量名称\n      value: string    #环境变量的值\n    resources:       #资源限制和请求的设置\n      limits:      #资源限制的设置\n        cpu: string    #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数\n        memory: string     #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数\n      requests:      #资源请求的设置\n        cpu: string    #Cpu请求，容器启动的初始可用数量\n        memory: string     #内存清楚，容器启动的初始可用数量\n    livenessProbe:     #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可\n      exec:      #对Pod容器内检查方式设置为exec方式\n        command: [string]  #exec方式需要制定的命令或脚本\n      httpGet:       #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port\n        path: string\n        port: number\n        host: string\n        scheme: string\n        HttpHeaders:\n        - name: string\n          value: string\n      tcpSocket:     #对Pod内个容器健康检查方式设置为tcpSocket方式\n         port: number\n       initialDelaySeconds: 0  #容器启动完成后首次探测的时间，单位为秒\n       timeoutSeconds: 0   #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒\n       periodSeconds: 0    #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次\n       successThreshold: 0\n       failureThreshold: 0\n       securityContext:\n         privileged:false\n    restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod\n    nodeSelector: obeject  #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定\n    imagePullSecrets:    #Pull镜像时使用的secret名称，以key：secretkey格式指定\n    - name: string\n    hostNetwork:false      #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络\n    volumes:       #在该pod上定义共享存储卷列表\n    - name: string     #共享存储卷名称 （volumes类型有很多种）\n      emptyDir: &#123;&#125;     #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值\n      hostPath: string     #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录\n        path: string     #Pod所在宿主机的目录，将被用于同期中mount的目录\n      secret:      #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部\n        scretname: string  \n        items:     \n        - key: string\n          path: string\n      configMap:     #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部\n        name: string\n        items:\n        - key: string\n</code></pre>\n<h3 id=\"端口和IP\"><a href=\"#端口和IP\" class=\"headerlink\" title=\"端口和IP\"></a>端口和IP</h3><p>和docker的内网环境类似，k8s也具有集群内部网络和外部网络.</p>\n<h4 id=\"1-nodePort\"><a href=\"#1-nodePort\" class=\"headerlink\" title=\"1. nodePort\"></a>1. nodePort</h4><p>外部流量访问k8s集群中service入口的一种方式（另一种方式是LoadBalancer），即nodeIP:nodePort是提供给外部流量访问k8s集群中service的入口。</p>\n<p>比如外部用户要访问k8s集群中的一个Web应用，那么我们可以配置对应service的<strong>type=NodePort</strong>，nodePort=30001。其他用户就可以通过浏览器<a href=\"http://node:30001访问到该web服务。\">http://node:30001访问到该web服务。</a></p>\n<p>而数据库等服务可能不需要被外界访问，只需被内部服务访问即可，那么我们就不必设置service的NodePort。</p>\n<h4 id=\"2-port\"><a href=\"#2-port\" class=\"headerlink\" title=\"2. port\"></a>2. port</h4><p>k8s集群内部服务之间访问<strong>service</strong>的入口。即<strong>clusterIP:port</strong>是service暴露在clusterIP上的端口。</p>\n<ul>\n<li>mysql容器暴露了3306端口（参考DockerFile），集群内其他容器通过33306端口访问mysql服务，但是<strong>外部流量不能访问mysql服务</strong>，因为mysql服务没有配置NodePort。对应的service.yaml如下：</li>\n</ul>\n<pre><code class=\"yaml\">apiVersion: v1\nkind: Service\nmetadata:\n name: mysql-service\nspec:\n ports:\n - port: 33306\n   targetPort: 3306\n selector:\n  name: mysql-pod</code></pre>\n<h4 id=\"3-targetPort\"><a href=\"#3-targetPort\" class=\"headerlink\" title=\"3. targetPort\"></a>3. targetPort</h4><p>容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，经过kube-proxy流入到后端pod的targetPort上，最后进入容器。</p>\n<p>与<strong>制作容器时暴露的端口一致</strong>（使用DockerFile中的<strong>EXPOSE</strong>），例如官方的nginx（参考DockerFile）暴露80端口。 对应的service.yaml如下：</p>\n<pre><code class=\"yaml\">apiVersion: v1\nkind: Service\nmetadata:\n name: nginx-service\nspec:\n type: NodePort         // 有配置NodePort，外部流量可访问k8s中的服务\n ports:\n - port: 30080          // 服务访问端口\n   targetPort: 80       // 容器端口\n   nodePort: 30001      // NodePort\n selector:\n  name: nginx-pod</code></pre>\n<p>总的来说</p>\n<ul>\n<li>port和nodePort都是service的端口，前者暴露给k8s集群内部服务访问，后者暴露给k8s集群外部流量访问。</li>\n<li>从上两个端口过来的数据都需要经过反向代理kube-proxy，流入后端pod的targetPort上，最后到达pod内的容器。</li>\n</ul>\n"},{"title":"LC周赛 2019-09-15","date":"2019-09-15T08:41:44.000Z","description":"20190915周赛记录","cover_img":"https://images.unsplash.com/photo-1516575448682-93a05df8bf59?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","feature_img":"https://images.unsplash.com/photo-1484278786775-527ac0d0b608?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=956&q=80","_content":"\n## 1. 寻找字符串中Balloon个数\n\n给你一个字符串 `text`，你需要使用 `text` 中的字母来拼凑尽可能多的单词 **\"balloon\"（气球）**。\n\n字符串 `text` 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 **\"balloon\"**。\n\n### 思路：\n\n很快可以通过哈希表来建立一个 `字符到字符在text中出现次数`的映射, 然后根据`ballon ` 来进行对照得出最终结果: 一定是 { `b` 出现次数 , `a` 出现次数 , `n` 出现次数 , `l` 出现次数的一半 , `o` 出现次数的一半 } 中的最小值, 即满足\n\n\n\n```java\npublic int maxNumberOfBalloons(String text) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < text.length(); ++i) {\n            map.put(text.charAt(i), map.getOrDefault(text.charAt(i), 0) + 1);\n        }\n        int b = map.getOrDefault('b', 0),\n                a = map.getOrDefault('a', 0),\n                l = map.getOrDefault('l', 0) / 2,\n                o = map.getOrDefault('o', 0) / 2,\n                n = map.getOrDefault('n', 0);\n        return Math.min(b, Math.min(a, Math.min(l, Math.min(o, n))));\n    }\n```\n\n##  2. 反转每对括号间的子串\n\n给出一个字符串 `s`（仅含有小写英文字母和括号）。\n\n请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。\n\n注意，您的结果中 **不应** 包含任何括号。\n\n### 思路：\n\n很明显这是一个 **递归** 问题. 举例说明\n\n```\n输入：s = \"(u(love)i)\"\n```\n\n我们需要先找出 **最小匹配括号子串** , 将其翻转之后, 再对其父级的子串进行翻转. \n\n\n\n但是有一个比较坑的点, 测试用例里面有这样的 `a()b(((c)))de` ， 也就是说，可以存在平级的括号. 这一点当时没想到. 从这里我们需要改变想法：\n\n- 当遇到同级的括号，先处理过当前的 `()` 对，然后继续使用 ReverseParentheses 来对后续同级括号进行翻转. 这个属于迭代式的处理\n- 当遇到子级括号, 也就是正常的 `(d(c))`这样的情况，就使用递归函数解决\n\n```java\n    public String reverseParentheses(String s) {\n        int begin = 0;\n        int end;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(')\n                begin = i;\n            if (s.charAt(i) == ')') {\n                end = i;\n                String temp = s.substring(begin + 1, end);//最小 ()\n                return reverseParentheses(s.substring(0, begin) + reverseString(temp) + s.substring(end + 1));\n            }\n        }\n        return s;\n    }\n\n    String reverseString(String s) {\n        char[] temp = s.toCharArray();\n        StringBuilder r = new StringBuilder();\n        for (int i = temp.length - 1; i >= 0; i--)\n            r.append(temp[i]);\n\n        return r.toString();\n    }\n```\n\n## 3. k次串联数组之后的最大子数组之和\n\n给你一个整数数组 `arr` 和一个整数 `k`。\n\n首先，我们要对该数组进行修改，即把原数组 `arr` 重复 `k` 次。\n\n> 举个例子，如果 `arr = [1, 2]` 且 `k = 3`，那么修改后的数组就是 `[1, 2, 1, 2, 1, 2]`。\n\n然后，请你返回修改后的数组中的最大的子数组之和。\n\n注意，子数组长度可以是 `0`，在这种情况下它的总和也是 `0`。\n\n由于 **结果可能会很大**，所以需要 **模（mod）** `10^9 + 7` 后再返回。 \n\n### 思路：\n\n一看，这个不就是最大子数组的翻版吗 hhh , 那么直接贪心上啊 \n\n```java\nprivate static final long MOD = 1000_000_007;\n\nprivate int sumHelper(int[] arr, int k) {\n        int totalLen = arr.length * k;\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < totalLen; ++i) {\n            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);\n            if (sum < 0) {\n                sum = 0;\n            } else {\n                max = Math.max(sum, max);\n            }\n        }\n        return max;\n    }\n```\n\n那么问题来了，**TLE** 了. 也就是说，这个算法不容忍 **O(N)** 的时间复杂度. 我们需要找到数组在进行串联的时候的一个和数关系来进行快速获取答案.\n\n#### 分析：\n\n前缀和判断，一共如下可能\n\n- 答案为 0\n\n- 答案仅从当前不串联的数组中得到, 即 k = 1时的最大子数组和\n\n- 答案从 k = 2 的串联结果得到，第一部分的后缀和的最大值加上第二部分的前缀和的最大值。\n\n- 答案从整个串联 k > 2 次后的结果得到，且一定是第一部分的后缀和的最大值，中间部分的总和，加上最后一部分的前缀和的最大值。\n\n第二种可能从**当前前缀和**减去**当前前缀和的最小值**得到。\n\n前缀和的最大值直接可以维护出来，后缀和的最大值可以通过总和减去前缀和的最小值得到。\n\n#### 实现\n\n需要维护数组的 **总和**, **最大前缀和** , **最小前缀和**\n\n```java\n    private static final long MOD = 1000_000_007;\n\n    public int kConcatenationMaxSum(int[] arr, int k) {\n        int n = arr.length;\n        if (k == 1)\n            return sumHelper(arr);\n        long[] sum = new long[n + 1];\n        long[] maxL = new long[n + 1];\n        long[] minL = new long[n + 1];\n        for (int i = 1; i < n + 1; ++i) {\n            sum[i] = sum[i - 1] + arr[i];\n            maxL[i] = Math.max(maxL[i - 1], sum[i]);\n            minL[i] = Math.min(minL[i - 1], sum[i]);\n        }\n        long ans = 0;\n        return (int) (Math.max(ans,\n                Math.max(\n                        sum[n] - minL[n] + maxL[n],\n                        sum[n] - minL[n] + maxL[n] + sum[n] * (k - 2)\n                )\n        ) % MOD);\n    }\n\n    private int sumHelper(int[] arr) {\n        int totalLen = arr.length;\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < totalLen; ++i) {\n            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);\n            if (sum < 0) {\n                sum = 0;\n            } else {\n                max = Math.max(sum, max);\n            }\n        }\n        return max;\n    }\n```\n\n## 4. 查找集群内的「关键连接」\n\n力扣数据中心有 `n` 台服务器，分别按从 `0` 到 `n-1` 的方式进行了编号。\n\n它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接 `connections` 是无向的。\n\n从形式上讲，`connections[i] = [a, b]` 表示服务器 `a` 和 `b` 之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。\n\n「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。\n\n请你以任意顺序返回该集群内的所有 「关键连接」。\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png)","source":"_posts/LC周赛-2019-09-15.md","raw":"---\ntitle: LC周赛 2019-09-15\ndate: 2019-09-15 16:41:44\ntags: \n  - competition\ncategories: \n  - 算法\ndescription: 20190915周赛记录\ncover_img: https://images.unsplash.com/photo-1516575448682-93a05df8bf59?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\nfeature_img: https://images.unsplash.com/photo-1484278786775-527ac0d0b608?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=956&q=80\n---\n\n## 1. 寻找字符串中Balloon个数\n\n给你一个字符串 `text`，你需要使用 `text` 中的字母来拼凑尽可能多的单词 **\"balloon\"（气球）**。\n\n字符串 `text` 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 **\"balloon\"**。\n\n### 思路：\n\n很快可以通过哈希表来建立一个 `字符到字符在text中出现次数`的映射, 然后根据`ballon ` 来进行对照得出最终结果: 一定是 { `b` 出现次数 , `a` 出现次数 , `n` 出现次数 , `l` 出现次数的一半 , `o` 出现次数的一半 } 中的最小值, 即满足\n\n\n\n```java\npublic int maxNumberOfBalloons(String text) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < text.length(); ++i) {\n            map.put(text.charAt(i), map.getOrDefault(text.charAt(i), 0) + 1);\n        }\n        int b = map.getOrDefault('b', 0),\n                a = map.getOrDefault('a', 0),\n                l = map.getOrDefault('l', 0) / 2,\n                o = map.getOrDefault('o', 0) / 2,\n                n = map.getOrDefault('n', 0);\n        return Math.min(b, Math.min(a, Math.min(l, Math.min(o, n))));\n    }\n```\n\n##  2. 反转每对括号间的子串\n\n给出一个字符串 `s`（仅含有小写英文字母和括号）。\n\n请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。\n\n注意，您的结果中 **不应** 包含任何括号。\n\n### 思路：\n\n很明显这是一个 **递归** 问题. 举例说明\n\n```\n输入：s = \"(u(love)i)\"\n```\n\n我们需要先找出 **最小匹配括号子串** , 将其翻转之后, 再对其父级的子串进行翻转. \n\n\n\n但是有一个比较坑的点, 测试用例里面有这样的 `a()b(((c)))de` ， 也就是说，可以存在平级的括号. 这一点当时没想到. 从这里我们需要改变想法：\n\n- 当遇到同级的括号，先处理过当前的 `()` 对，然后继续使用 ReverseParentheses 来对后续同级括号进行翻转. 这个属于迭代式的处理\n- 当遇到子级括号, 也就是正常的 `(d(c))`这样的情况，就使用递归函数解决\n\n```java\n    public String reverseParentheses(String s) {\n        int begin = 0;\n        int end;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(')\n                begin = i;\n            if (s.charAt(i) == ')') {\n                end = i;\n                String temp = s.substring(begin + 1, end);//最小 ()\n                return reverseParentheses(s.substring(0, begin) + reverseString(temp) + s.substring(end + 1));\n            }\n        }\n        return s;\n    }\n\n    String reverseString(String s) {\n        char[] temp = s.toCharArray();\n        StringBuilder r = new StringBuilder();\n        for (int i = temp.length - 1; i >= 0; i--)\n            r.append(temp[i]);\n\n        return r.toString();\n    }\n```\n\n## 3. k次串联数组之后的最大子数组之和\n\n给你一个整数数组 `arr` 和一个整数 `k`。\n\n首先，我们要对该数组进行修改，即把原数组 `arr` 重复 `k` 次。\n\n> 举个例子，如果 `arr = [1, 2]` 且 `k = 3`，那么修改后的数组就是 `[1, 2, 1, 2, 1, 2]`。\n\n然后，请你返回修改后的数组中的最大的子数组之和。\n\n注意，子数组长度可以是 `0`，在这种情况下它的总和也是 `0`。\n\n由于 **结果可能会很大**，所以需要 **模（mod）** `10^9 + 7` 后再返回。 \n\n### 思路：\n\n一看，这个不就是最大子数组的翻版吗 hhh , 那么直接贪心上啊 \n\n```java\nprivate static final long MOD = 1000_000_007;\n\nprivate int sumHelper(int[] arr, int k) {\n        int totalLen = arr.length * k;\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < totalLen; ++i) {\n            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);\n            if (sum < 0) {\n                sum = 0;\n            } else {\n                max = Math.max(sum, max);\n            }\n        }\n        return max;\n    }\n```\n\n那么问题来了，**TLE** 了. 也就是说，这个算法不容忍 **O(N)** 的时间复杂度. 我们需要找到数组在进行串联的时候的一个和数关系来进行快速获取答案.\n\n#### 分析：\n\n前缀和判断，一共如下可能\n\n- 答案为 0\n\n- 答案仅从当前不串联的数组中得到, 即 k = 1时的最大子数组和\n\n- 答案从 k = 2 的串联结果得到，第一部分的后缀和的最大值加上第二部分的前缀和的最大值。\n\n- 答案从整个串联 k > 2 次后的结果得到，且一定是第一部分的后缀和的最大值，中间部分的总和，加上最后一部分的前缀和的最大值。\n\n第二种可能从**当前前缀和**减去**当前前缀和的最小值**得到。\n\n前缀和的最大值直接可以维护出来，后缀和的最大值可以通过总和减去前缀和的最小值得到。\n\n#### 实现\n\n需要维护数组的 **总和**, **最大前缀和** , **最小前缀和**\n\n```java\n    private static final long MOD = 1000_000_007;\n\n    public int kConcatenationMaxSum(int[] arr, int k) {\n        int n = arr.length;\n        if (k == 1)\n            return sumHelper(arr);\n        long[] sum = new long[n + 1];\n        long[] maxL = new long[n + 1];\n        long[] minL = new long[n + 1];\n        for (int i = 1; i < n + 1; ++i) {\n            sum[i] = sum[i - 1] + arr[i];\n            maxL[i] = Math.max(maxL[i - 1], sum[i]);\n            minL[i] = Math.min(minL[i - 1], sum[i]);\n        }\n        long ans = 0;\n        return (int) (Math.max(ans,\n                Math.max(\n                        sum[n] - minL[n] + maxL[n],\n                        sum[n] - minL[n] + maxL[n] + sum[n] * (k - 2)\n                )\n        ) % MOD);\n    }\n\n    private int sumHelper(int[] arr) {\n        int totalLen = arr.length;\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < totalLen; ++i) {\n            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);\n            if (sum < 0) {\n                sum = 0;\n            } else {\n                max = Math.max(sum, max);\n            }\n        }\n        return max;\n    }\n```\n\n## 4. 查找集群内的「关键连接」\n\n力扣数据中心有 `n` 台服务器，分别按从 `0` 到 `n-1` 的方式进行了编号。\n\n它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接 `connections` 是无向的。\n\n从形式上讲，`connections[i] = [a, b]` 表示服务器 `a` 和 `b` 之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。\n\n「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。\n\n请你以任意顺序返回该集群内的所有 「关键连接」。\n\n![img](https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png)","slug":"LC周赛-2019-09-15","published":1,"updated":"2020-10-19T09:47:13.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi0y0003x8me6bvm6t44","content":"<h2 id=\"1-寻找字符串中Balloon个数\"><a href=\"#1-寻找字符串中Balloon个数\" class=\"headerlink\" title=\"1. 寻找字符串中Balloon个数\"></a>1. 寻找字符串中Balloon个数</h2><p>给你一个字符串 <code>text</code>，你需要使用 <code>text</code> 中的字母来拼凑尽可能多的单词 <strong>“balloon”（气球）</strong>。</p>\n<p>字符串 <code>text</code> 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 **”balloon”**。</p>\n<h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>很快可以通过哈希表来建立一个 <code>字符到字符在text中出现次数</code>的映射, 然后根据<code>ballon </code> 来进行对照得出最终结果: 一定是 { <code>b</code> 出现次数 , <code>a</code> 出现次数 , <code>n</code> 出现次数 , <code>l</code> 出现次数的一半 , <code>o</code> 出现次数的一半 } 中的最小值, 即满足</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxNumberOfBalloons</span><span class=\"token punctuation\">(</span>String text<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Map<span class=\"token operator\">&lt;</span>Character<span class=\"token punctuation\">,</span> Integer<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                a <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                l <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                o <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                n <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"2-反转每对括号间的子串\"><a href=\"#2-反转每对括号间的子串\" class=\"headerlink\" title=\"2. 反转每对括号间的子串\"></a>2. 反转每对括号间的子串</h2><p>给出一个字符串 <code>s</code>（仅含有小写英文字母和括号）。</p>\n<p>请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。</p>\n<p>注意，您的结果中 <strong>不应</strong> 包含任何括号。</p>\n<h3 id=\"思路：-1\"><a href=\"#思路：-1\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>很明显这是一个 <strong>递归</strong> 问题. 举例说明</p>\n<pre><code>输入：s = &quot;(u(love)i)&quot;</code></pre>\n<p>我们需要先找出 <strong>最小匹配括号子串</strong> , 将其翻转之后, 再对其父级的子串进行翻转. </p>\n<p>但是有一个比较坑的点, 测试用例里面有这样的 <code>a()b(((c)))de</code> ， 也就是说，可以存在平级的括号. 这一点当时没想到. 从这里我们需要改变想法：</p>\n<ul>\n<li>当遇到同级的括号，先处理过当前的 <code>()</code> 对，然后继续使用 ReverseParentheses 来对后续同级括号进行翻转. 这个属于迭代式的处理</li>\n<li>当遇到子级括号, 也就是正常的 <code>(d(c))</code>这样的情况，就使用递归函数解决</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> String <span class=\"token function\">reverseParentheses</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span>\n                begin <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                end <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                String temp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//最小 ()</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">reverseParentheses</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">reverseString</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    String <span class=\"token function\">reverseString</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        StringBuilder r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n            r<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"3-k次串联数组之后的最大子数组之和\"><a href=\"#3-k次串联数组之后的最大子数组之和\" class=\"headerlink\" title=\"3. k次串联数组之后的最大子数组之和\"></a>3. k次串联数组之后的最大子数组之和</h2><p>给你一个整数数组 <code>arr</code> 和一个整数 <code>k</code>。</p>\n<p>首先，我们要对该数组进行修改，即把原数组 <code>arr</code> 重复 <code>k</code> 次。</p>\n<blockquote>\n<p>举个例子，如果 <code>arr = [1, 2]</code> 且 <code>k = 3</code>，那么修改后的数组就是 <code>[1, 2, 1, 2, 1, 2]</code>。</p>\n</blockquote>\n<p>然后，请你返回修改后的数组中的最大的子数组之和。</p>\n<p>注意，子数组长度可以是 <code>0</code>，在这种情况下它的总和也是 <code>0</code>。</p>\n<p>由于 <strong>结果可能会很大</strong>，所以需要 <strong>模（mod）</strong> <code>10^9 + 7</code> 后再返回。 </p>\n<h3 id=\"思路：-2\"><a href=\"#思路：-2\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>一看，这个不就是最大子数组的翻版吗 hhh , 那么直接贪心上啊 </p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> MOD <span class=\"token operator\">=</span> 1000_000_007<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sumHelper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalLen <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> totalLen<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">toIntExact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>那么问题来了，<strong>TLE</strong> 了. 也就是说，这个算法不容忍 <strong>O(N)</strong> 的时间复杂度. 我们需要找到数组在进行串联的时候的一个和数关系来进行快速获取答案.</p>\n<h4 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>前缀和判断，一共如下可能</p>\n<ul>\n<li><p>答案为 0</p>\n</li>\n<li><p>答案仅从当前不串联的数组中得到, 即 k = 1时的最大子数组和</p>\n</li>\n<li><p>答案从 k = 2 的串联结果得到，第一部分的后缀和的最大值加上第二部分的前缀和的最大值。</p>\n</li>\n<li><p>答案从整个串联 k &gt; 2 次后的结果得到，且一定是第一部分的后缀和的最大值，中间部分的总和，加上最后一部分的前缀和的最大值。</p>\n</li>\n</ul>\n<p>第二种可能从<strong>当前前缀和</strong>减去<strong>当前前缀和的最小值</strong>得到。</p>\n<p>前缀和的最大值直接可以维护出来，后缀和的最大值可以通过总和减去前缀和的最小值得到。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>需要维护数组的 <strong>总和</strong>, <strong>最大前缀和</strong> , <strong>最小前缀和</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> MOD <span class=\"token operator\">=</span> 1000_000_007<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">kConcatenationMaxSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">sumHelper</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">long</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maxL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">long</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> minL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">long</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            maxL<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxL<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            minL<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>minL<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span>\n                Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>\n                        sum<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> minL<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> maxL<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        sum<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> minL<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> maxL<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sumHelper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> totalLen <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> totalLen<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">toIntExact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"4-查找集群内的「关键连接」\"><a href=\"#4-查找集群内的「关键连接」\" class=\"headerlink\" title=\"4. 查找集群内的「关键连接」\"></a>4. 查找集群内的「关键连接」</h2><p>力扣数据中心有 <code>n</code> 台服务器，分别按从 <code>0</code> 到 <code>n-1</code> 的方式进行了编号。</p>\n<p>它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接 <code>connections</code> 是无向的。</p>\n<p>从形式上讲，<code>connections[i] = [a, b]</code> 表示服务器 <code>a</code> 和 <code>b</code> 之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。</p>\n<p>「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。</p>\n<p>请你以任意顺序返回该集群内的所有 「关键连接」。</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png\" alt=\"img\"></p>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603194477925-b65a2d92d015?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","excerpt":"","more":"<h2 id=\"1-寻找字符串中Balloon个数\"><a href=\"#1-寻找字符串中Balloon个数\" class=\"headerlink\" title=\"1. 寻找字符串中Balloon个数\"></a>1. 寻找字符串中Balloon个数</h2><p>给你一个字符串 <code>text</code>，你需要使用 <code>text</code> 中的字母来拼凑尽可能多的单词 <strong>“balloon”（气球）</strong>。</p>\n<p>字符串 <code>text</code> 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 **”balloon”**。</p>\n<h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>很快可以通过哈希表来建立一个 <code>字符到字符在text中出现次数</code>的映射, 然后根据<code>ballon </code> 来进行对照得出最终结果: 一定是 { <code>b</code> 出现次数 , <code>a</code> 出现次数 , <code>n</code> 出现次数 , <code>l</code> 出现次数的一半 , <code>o</code> 出现次数的一半 } 中的最小值, 即满足</p>\n<pre><code class=\"java\">public int maxNumberOfBalloons(String text) &#123;\n        Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; text.length(); ++i) &#123;\n            map.put(text.charAt(i), map.getOrDefault(text.charAt(i), 0) + 1);\n        &#125;\n        int b = map.getOrDefault(&#39;b&#39;, 0),\n                a = map.getOrDefault(&#39;a&#39;, 0),\n                l = map.getOrDefault(&#39;l&#39;, 0) / 2,\n                o = map.getOrDefault(&#39;o&#39;, 0) / 2,\n                n = map.getOrDefault(&#39;n&#39;, 0);\n        return Math.min(b, Math.min(a, Math.min(l, Math.min(o, n))));\n    &#125;</code></pre>\n<h2 id=\"2-反转每对括号间的子串\"><a href=\"#2-反转每对括号间的子串\" class=\"headerlink\" title=\"2. 反转每对括号间的子串\"></a>2. 反转每对括号间的子串</h2><p>给出一个字符串 <code>s</code>（仅含有小写英文字母和括号）。</p>\n<p>请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。</p>\n<p>注意，您的结果中 <strong>不应</strong> 包含任何括号。</p>\n<h3 id=\"思路：-1\"><a href=\"#思路：-1\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>很明显这是一个 <strong>递归</strong> 问题. 举例说明</p>\n<pre><code>输入：s = &quot;(u(love)i)&quot;</code></pre>\n<p>我们需要先找出 <strong>最小匹配括号子串</strong> , 将其翻转之后, 再对其父级的子串进行翻转. </p>\n<p>但是有一个比较坑的点, 测试用例里面有这样的 <code>a()b(((c)))de</code> ， 也就是说，可以存在平级的括号. 这一点当时没想到. 从这里我们需要改变想法：</p>\n<ul>\n<li>当遇到同级的括号，先处理过当前的 <code>()</code> 对，然后继续使用 ReverseParentheses 来对后续同级括号进行翻转. 这个属于迭代式的处理</li>\n<li>当遇到子级括号, 也就是正常的 <code>(d(c))</code>这样的情况，就使用递归函数解决</li>\n</ul>\n<pre><code class=\"java\">    public String reverseParentheses(String s) &#123;\n        int begin = 0;\n        int end;\n        for (int i = 0; i &lt; s.length(); i++) &#123;\n            if (s.charAt(i) == &#39;(&#39;)\n                begin = i;\n            if (s.charAt(i) == &#39;)&#39;) &#123;\n                end = i;\n                String temp = s.substring(begin + 1, end);//最小 ()\n                return reverseParentheses(s.substring(0, begin) + reverseString(temp) + s.substring(end + 1));\n            &#125;\n        &#125;\n        return s;\n    &#125;\n\n    String reverseString(String s) &#123;\n        char[] temp = s.toCharArray();\n        StringBuilder r = new StringBuilder();\n        for (int i = temp.length - 1; i &gt;= 0; i--)\n            r.append(temp[i]);\n\n        return r.toString();\n    &#125;</code></pre>\n<h2 id=\"3-k次串联数组之后的最大子数组之和\"><a href=\"#3-k次串联数组之后的最大子数组之和\" class=\"headerlink\" title=\"3. k次串联数组之后的最大子数组之和\"></a>3. k次串联数组之后的最大子数组之和</h2><p>给你一个整数数组 <code>arr</code> 和一个整数 <code>k</code>。</p>\n<p>首先，我们要对该数组进行修改，即把原数组 <code>arr</code> 重复 <code>k</code> 次。</p>\n<blockquote>\n<p>举个例子，如果 <code>arr = [1, 2]</code> 且 <code>k = 3</code>，那么修改后的数组就是 <code>[1, 2, 1, 2, 1, 2]</code>。</p>\n</blockquote>\n<p>然后，请你返回修改后的数组中的最大的子数组之和。</p>\n<p>注意，子数组长度可以是 <code>0</code>，在这种情况下它的总和也是 <code>0</code>。</p>\n<p>由于 <strong>结果可能会很大</strong>，所以需要 <strong>模（mod）</strong> <code>10^9 + 7</code> 后再返回。 </p>\n<h3 id=\"思路：-2\"><a href=\"#思路：-2\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>一看，这个不就是最大子数组的翻版吗 hhh , 那么直接贪心上啊 </p>\n<pre><code class=\"java\">private static final long MOD = 1000_000_007;\n\nprivate int sumHelper(int[] arr, int k) &#123;\n        int totalLen = arr.length * k;\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i &lt; totalLen; ++i) &#123;\n            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);\n            if (sum &lt; 0) &#123;\n                sum = 0;\n            &#125; else &#123;\n                max = Math.max(sum, max);\n            &#125;\n        &#125;\n        return max;\n    &#125;</code></pre>\n<p>那么问题来了，<strong>TLE</strong> 了. 也就是说，这个算法不容忍 <strong>O(N)</strong> 的时间复杂度. 我们需要找到数组在进行串联的时候的一个和数关系来进行快速获取答案.</p>\n<h4 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h4><p>前缀和判断，一共如下可能</p>\n<ul>\n<li><p>答案为 0</p>\n</li>\n<li><p>答案仅从当前不串联的数组中得到, 即 k = 1时的最大子数组和</p>\n</li>\n<li><p>答案从 k = 2 的串联结果得到，第一部分的后缀和的最大值加上第二部分的前缀和的最大值。</p>\n</li>\n<li><p>答案从整个串联 k &gt; 2 次后的结果得到，且一定是第一部分的后缀和的最大值，中间部分的总和，加上最后一部分的前缀和的最大值。</p>\n</li>\n</ul>\n<p>第二种可能从<strong>当前前缀和</strong>减去<strong>当前前缀和的最小值</strong>得到。</p>\n<p>前缀和的最大值直接可以维护出来，后缀和的最大值可以通过总和减去前缀和的最小值得到。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>需要维护数组的 <strong>总和</strong>, <strong>最大前缀和</strong> , <strong>最小前缀和</strong></p>\n<pre><code class=\"java\">    private static final long MOD = 1000_000_007;\n\n    public int kConcatenationMaxSum(int[] arr, int k) &#123;\n        int n = arr.length;\n        if (k == 1)\n            return sumHelper(arr);\n        long[] sum = new long[n + 1];\n        long[] maxL = new long[n + 1];\n        long[] minL = new long[n + 1];\n        for (int i = 1; i &lt; n + 1; ++i) &#123;\n            sum[i] = sum[i - 1] + arr[i];\n            maxL[i] = Math.max(maxL[i - 1], sum[i]);\n            minL[i] = Math.min(minL[i - 1], sum[i]);\n        &#125;\n        long ans = 0;\n        return (int) (Math.max(ans,\n                Math.max(\n                        sum[n] - minL[n] + maxL[n],\n                        sum[n] - minL[n] + maxL[n] + sum[n] * (k - 2)\n                )\n        ) % MOD);\n    &#125;\n\n    private int sumHelper(int[] arr) &#123;\n        int totalLen = arr.length;\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i &lt; totalLen; ++i) &#123;\n            sum = Math.toIntExact((sum + arr[i % arr.length]) % MOD);\n            if (sum &lt; 0) &#123;\n                sum = 0;\n            &#125; else &#123;\n                max = Math.max(sum, max);\n            &#125;\n        &#125;\n        return max;\n    &#125;</code></pre>\n<h2 id=\"4-查找集群内的「关键连接」\"><a href=\"#4-查找集群内的「关键连接」\" class=\"headerlink\" title=\"4. 查找集群内的「关键连接」\"></a>4. 查找集群内的「关键连接」</h2><p>力扣数据中心有 <code>n</code> 台服务器，分别按从 <code>0</code> 到 <code>n-1</code> 的方式进行了编号。</p>\n<p>它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接 <code>connections</code> 是无向的。</p>\n<p>从形式上讲，<code>connections[i] = [a, b]</code> 表示服务器 <code>a</code> 和 <code>b</code> 之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。</p>\n<p>「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。</p>\n<p>请你以任意顺序返回该集群内的所有 「关键连接」。</p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png\" alt=\"img\"></p>\n"},{"title":"Redis-基本数据结构","date":"2020-03-24T02:03:53.000Z","cover_img":"https://images.unsplash.com/photo-1522968941782-e27ac665baa3?ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80","feature_img":"https://images.unsplash.com/photo-1518976024611-28bf4b48222e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=632&q=80","description":null,"keywords":"Redis","_content":"\n## Redis 基本数据结构\n\n> *Redis* 的数据类型有五大类，分别是 **列表、字符串、哈希表、有序集合、无序集合**\n>\n> 字符串底层：SDS\n>\n> 列表底层：链表或者是 *ziplist* 压缩列表\n>\n> 哈希对象：ziplist 或者是 hashtable\n>\n> 集合：*intset* 或 *hashtable*\n>\n> 有序集合：*ziplist* 或 *skiplist & dictionary*\n\n底层的数据结构实现讲解\n\n### 简单动态字符串 SDS\n\n#### 涉及数据结构\n\n```c\nstruct sdshdr\n{\n\n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n```\n\n#### 空间预加载策略\n\n当我们进行 `sdscat(sds s1 , const char* t)` 的时候，**可能** 会引发空间重新分配\n\n- 如果 **free space** 足够，那么不进行分配\n- 如果不够，看 **t** 的大小是不是超过 1M (`SDS_MAX_PREALLOC`- $1024\\times 1024$) \n  - 超过 **1M** ，直接 `newLen + SDS_MAX_PREALLOC`\n  - 否则 `newLen = newLen * 2`\n\n```c\nsds sdsMakeRoomFor(sds s, size_t addlen) {\n\n    struct sdshdr *sh, *newsh;\n\n    // 获取 s 目前的空余空间长度\n    size_t free = sdsavail(s);\n\n    size_t len, newlen;\n\n    // s 目前的空余空间已经足够，无须再进行扩展，直接返回\n    if (free >= addlen) return s;\n\n    // 获取 s 目前已占用空间的长度\n    len = sdslen(s);\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // s 最少需要的长度\n    newlen = (len+addlen);\n\n    // 根据新长度，为 s 分配新空间所需的大小\n    if (newlen < SDS_MAX_PREALLOC)\n        // 如果新长度小于 SDS_MAX_PREALLOC \n        // 那么为它分配两倍于所需长度的空间\n        newlen *= 2;\n    else\n        // 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC\n        newlen += SDS_MAX_PREALLOC;\n    // T = O(N)\n    newsh = zrealloc(sh, sizeof(struct sdshdr)+newlen+1);\n\n    // 内存不足，分配失败，返回\n    if (newsh == NULL) return NULL;\n\n    // 更新 sds 的空余长度\n    newsh->free = newlen - len;\n\n    // 返回 sds\n    return newsh->buf;\n}\n```\n\n#### 空间懒释放策略\n\n`sdstrim(sds s, const char*)` 会削减掉 **s** 两边的字符\n\n去掉之后，我们不改变 **len** , 而是作为 **free space** 进行了保留\n\n#### 二进制安全\n\n对于普通的 **C** 字符串，由于是按照空串 `\\0` 来作为结束标志\n\n而对于 **SDS** ，它使用的 **len** 字段就可以避免这一点\n\n\n\n### 链表\n\n基本的数据结构——双向链表\n\n```c\n/*\n * 双端链表节点\n */\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter {\n\n    // **当前**迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n} listIter;\n\n/*\n * 双端链表结构\n */\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n} list;\n\n```\n\n可以看出，**Redis**中的list采取了双端链表来进行实现。结构体内部包含了：\n\n- 头结点、尾结点\n- 链表长度\n- 三个支持多态的函数指针\n\n\n\n### 字典 hash\n\nRedis中称作 **字典**。它的实现上都是采取了 **链地址法** 的哈希表结构。\n\n> *redis* 后续还引入了 *zipmap* 来作为 `字符串到字符串`的小*hash* 底层数据结构\n\n### 主要数据结构\n\n```C\n/*\n * 哈希表节点\n */\ntypedef struct dictEntry {\n    \n    // 键\n    void *key;\n\n    // 值\n    union {\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n    } v;\n\n    // 指向下个哈希表节点，形成链表\n    struct dictEntry *next;\n\n} dictEntry;\n\n\n/*\n * 哈希表\n *\n * 每个字典都使用**两个**哈希表，从而实现渐进式 rehash 。\n */\ntypedef struct dictht {\n    \n    // 哈希表数组\n    dictEntry **table;\n\n    // 哈希表大小\n    unsigned long size;\n    \n    // 哈希表大小掩码，用于计算索引值\n    // 总是等于 size - 1\n    unsigned long sizemask;\n\n    // 该哈希表已有节点的数量\n    unsigned long used;\n\n} dictht;\n//=======================================\n/*\n * 字典\n */\ntypedef struct dict {\n\n    // 类型特定函数\n    dictType *type;\n\n    // 私有数据\n    void *privdata;\n\n    // 哈希表\n    dictht ht[2];\n\n    // rehash 索引\n    // 当 rehash 不在进行时，值为 -1\n    int rehashidx; /* rehashing not in progress if rehashidx == -1 */\n\n    // 目前正在运行的安全迭代器的数量\n    int iterators; /* number of iterators currently running */\n\n} dict;\n```\n\n可以看出，**Entry** 作为节点，维护了 `K,V` 关系；哈希表维护了基本的**哈希表大小**和**已占用Hash数量**。\n\n#### 哈希算法\n\n根据 `hashFunc(key)` 可以得到哈希值 **hash** 。但是这个值往往很大，需要规整到 `[0,size-1]` 范围内，所以我们使用 `hash & mask` 来进行 **模计算**。这里的 **mask** 为 `size - 1` \n\n##### 再哈希\n\n> 大多数的哈希表实现思路类似——**size**都需要是 **2的幂次**，便于进行和掩码的与运算\n\n`dict` 结构中，采用了 `dictht ht[2];` 两个哈希表来进行。一般 `ht[0]` 存储数据，当要进行再哈希的时候，先给 `ht[1]` 分配一定的空间，随后把 `ht[0] ` 的数据再哈希到 `ht[1]` 当中。完成之后，释放 `ht[0]` 空间，调换两个指针 (类似*JVM* *survivor0，1* 的拷贝)\n\n-  如果进行的是扩展操作，那么*rehash* 之后的大小是 大于等于 `ht[0].used * 2` 的第一个 $2^n$  (和 *Java*的实现有点区别，*redis* 这里是针对已经使用的大小乘以二，然后再找到不小于这个数的第一个二的次幂)\n- 如果是伸缩操作，那么 *rehash* 之后的大小是 大于等于  `ht[0].used` 的第一个 $2^n$ \n\n随后，我们进行一个再哈希 (也就是根据新的大小重新分配 `K,V` ) ，放置到 `ht[1]`。随后互换两者指针即可。\n\n##### 渐进式再哈希\n\n再哈希时的数据拷贝工作是最耗时的。Redis 采用 **rehashidx** 来进行渐进式的处理。\n\n- 初始值设置为0，表示再哈希开始\n- 每一次对哈希表的增删改查，都会随即触发再哈希。\n  - 仅仅再哈希 **rehashidx** 索引对应的节点\n  - 此时的增删改查涉及到两个哈希表\n- 完成所有的再哈希之后，设置为 -1，表示完成\n\n> 通过将再哈希的行为，均摊到增删改查当中，避免了集中式的再哈希操作\n\n### 集合\n\n#### 跳表——有序集合key的底层实现\n\n> 使用于有序集合元素数量大，或者元素成员是字符串类型\n>\n> 跳表还使用在了集群节点中的内部数据结构\n\n##### 跳表节点定义\n\n每一个节点内部，除了基本的数据 `robj` ，还包含了后退指针，以及一个 `level` 数组\n\n```c\ntypedef struct zskiplistNode {\n\n    // 成员对象\n    robj *obj;\n\n    // 分值\n    double score;\n\n    // 后退指针\n    struct zskiplistNode *backward;\n\n    // 层\n    struct zskiplistLevel {\n\n        // 前进指针\n        struct zskiplistNode *forward;\n\n        // 跨度\n        unsigned int span;\n\n    } level[];\n\n} zskiplistNode;\n```\n\n##### 跳表定义\n\n```c\ntypedef struct zskiplist {\n\n    // 表头节点和表尾节点\n    struct zskiplistNode *header, *tail;\n\n    // 表中节点的数量\n    unsigned long length;\n\n    // 表中层数最大的节点的层数\n    int level;\n\n} zskiplist;\n```\n\n几个要点：\n\n- `level` 表示层，当有新的跳跃表节点 *insert* ，**level** 将会是 `[1,32]`之间的一个随机值\n  - 层的 **跨度** `level[i].span`，主要用于计算 **rank**。\n  - 对于某一个需要查询的节点，头结点到它的**跨度累积值**就是它的 **rank**\n- 前进指针和后退指针都是用于 **遍历**\n- 成员和分值\n  - 跳表内部按照分值由小到大来进行组织——从这一点上看，分值大的一般 **rank** 也大\n  - 分值可以重复，成员不可以\n\n*redis* 中的 **有序集合 zset** 使用了一个跳表 + 一个字典来进行实现。通过跳表来进行 *rank* 的从小到大排序，然后通过字典来实现对象到分值的一个映射。不会产生额外的数据空间浪费，并且能够让 **遍历** 和 **获取对象分值** 都能够有一个比较小的时间复杂度\n\n#### Intset 整数集合\n\n> 用于集合键的底层实现之一，如果集合只包含整数，并且数量不多，就采用整数集合来进行实现\n\n##### 数据结构\n\n```C\ntypedef struct intset {\n    \n    // 编码方式\n    uint32_t encoding;\n\n    // 集合包含的元素数量\n    uint32_t length;\n\n    // 保存元素的数组, 按照升序进行排列\n    int8_t contents[];\n\n} intset;\n```\n\n关注：\n\n- 编码方式决定了 **contents[]** 数组的元素的大小\n- 插入操作：\n  - 为了维护 **升序**关系，插入的时间复杂度是 $O(N)$ ——这里其实可以优化\n  - 若出现了大小超过编码的，需要进行 **升级**\n  - 不支持 **降级**\n\n\n\n### Ziplist 压缩列表\n\n> 可以用于基本的列表数据结构；也可以用于哈希字典 (键和值相邻排放) ，同时也是有序集合的底层实现之一。一般用于存储少量的列表项，并且列表项是一些小整数或小字符串\n\n","source":"_posts/Redis-基本数据结构.md","raw":"---\ntitle: Redis-基本数据结构\ndate: 2020-03-24 10:03:53\ntags: 笔记\ncover_img: https://images.unsplash.com/photo-1522968941782-e27ac665baa3?ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80\nfeature_img: https://images.unsplash.com/photo-1518976024611-28bf4b48222e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=632&q=80\ndescription:\nkeywords: Redis\n---\n\n## Redis 基本数据结构\n\n> *Redis* 的数据类型有五大类，分别是 **列表、字符串、哈希表、有序集合、无序集合**\n>\n> 字符串底层：SDS\n>\n> 列表底层：链表或者是 *ziplist* 压缩列表\n>\n> 哈希对象：ziplist 或者是 hashtable\n>\n> 集合：*intset* 或 *hashtable*\n>\n> 有序集合：*ziplist* 或 *skiplist & dictionary*\n\n底层的数据结构实现讲解\n\n### 简单动态字符串 SDS\n\n#### 涉及数据结构\n\n```c\nstruct sdshdr\n{\n\n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n```\n\n#### 空间预加载策略\n\n当我们进行 `sdscat(sds s1 , const char* t)` 的时候，**可能** 会引发空间重新分配\n\n- 如果 **free space** 足够，那么不进行分配\n- 如果不够，看 **t** 的大小是不是超过 1M (`SDS_MAX_PREALLOC`- $1024\\times 1024$) \n  - 超过 **1M** ，直接 `newLen + SDS_MAX_PREALLOC`\n  - 否则 `newLen = newLen * 2`\n\n```c\nsds sdsMakeRoomFor(sds s, size_t addlen) {\n\n    struct sdshdr *sh, *newsh;\n\n    // 获取 s 目前的空余空间长度\n    size_t free = sdsavail(s);\n\n    size_t len, newlen;\n\n    // s 目前的空余空间已经足够，无须再进行扩展，直接返回\n    if (free >= addlen) return s;\n\n    // 获取 s 目前已占用空间的长度\n    len = sdslen(s);\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // s 最少需要的长度\n    newlen = (len+addlen);\n\n    // 根据新长度，为 s 分配新空间所需的大小\n    if (newlen < SDS_MAX_PREALLOC)\n        // 如果新长度小于 SDS_MAX_PREALLOC \n        // 那么为它分配两倍于所需长度的空间\n        newlen *= 2;\n    else\n        // 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC\n        newlen += SDS_MAX_PREALLOC;\n    // T = O(N)\n    newsh = zrealloc(sh, sizeof(struct sdshdr)+newlen+1);\n\n    // 内存不足，分配失败，返回\n    if (newsh == NULL) return NULL;\n\n    // 更新 sds 的空余长度\n    newsh->free = newlen - len;\n\n    // 返回 sds\n    return newsh->buf;\n}\n```\n\n#### 空间懒释放策略\n\n`sdstrim(sds s, const char*)` 会削减掉 **s** 两边的字符\n\n去掉之后，我们不改变 **len** , 而是作为 **free space** 进行了保留\n\n#### 二进制安全\n\n对于普通的 **C** 字符串，由于是按照空串 `\\0` 来作为结束标志\n\n而对于 **SDS** ，它使用的 **len** 字段就可以避免这一点\n\n\n\n### 链表\n\n基本的数据结构——双向链表\n\n```c\n/*\n * 双端链表节点\n */\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter {\n\n    // **当前**迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n} listIter;\n\n/*\n * 双端链表结构\n */\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n} list;\n\n```\n\n可以看出，**Redis**中的list采取了双端链表来进行实现。结构体内部包含了：\n\n- 头结点、尾结点\n- 链表长度\n- 三个支持多态的函数指针\n\n\n\n### 字典 hash\n\nRedis中称作 **字典**。它的实现上都是采取了 **链地址法** 的哈希表结构。\n\n> *redis* 后续还引入了 *zipmap* 来作为 `字符串到字符串`的小*hash* 底层数据结构\n\n### 主要数据结构\n\n```C\n/*\n * 哈希表节点\n */\ntypedef struct dictEntry {\n    \n    // 键\n    void *key;\n\n    // 值\n    union {\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n    } v;\n\n    // 指向下个哈希表节点，形成链表\n    struct dictEntry *next;\n\n} dictEntry;\n\n\n/*\n * 哈希表\n *\n * 每个字典都使用**两个**哈希表，从而实现渐进式 rehash 。\n */\ntypedef struct dictht {\n    \n    // 哈希表数组\n    dictEntry **table;\n\n    // 哈希表大小\n    unsigned long size;\n    \n    // 哈希表大小掩码，用于计算索引值\n    // 总是等于 size - 1\n    unsigned long sizemask;\n\n    // 该哈希表已有节点的数量\n    unsigned long used;\n\n} dictht;\n//=======================================\n/*\n * 字典\n */\ntypedef struct dict {\n\n    // 类型特定函数\n    dictType *type;\n\n    // 私有数据\n    void *privdata;\n\n    // 哈希表\n    dictht ht[2];\n\n    // rehash 索引\n    // 当 rehash 不在进行时，值为 -1\n    int rehashidx; /* rehashing not in progress if rehashidx == -1 */\n\n    // 目前正在运行的安全迭代器的数量\n    int iterators; /* number of iterators currently running */\n\n} dict;\n```\n\n可以看出，**Entry** 作为节点，维护了 `K,V` 关系；哈希表维护了基本的**哈希表大小**和**已占用Hash数量**。\n\n#### 哈希算法\n\n根据 `hashFunc(key)` 可以得到哈希值 **hash** 。但是这个值往往很大，需要规整到 `[0,size-1]` 范围内，所以我们使用 `hash & mask` 来进行 **模计算**。这里的 **mask** 为 `size - 1` \n\n##### 再哈希\n\n> 大多数的哈希表实现思路类似——**size**都需要是 **2的幂次**，便于进行和掩码的与运算\n\n`dict` 结构中，采用了 `dictht ht[2];` 两个哈希表来进行。一般 `ht[0]` 存储数据，当要进行再哈希的时候，先给 `ht[1]` 分配一定的空间，随后把 `ht[0] ` 的数据再哈希到 `ht[1]` 当中。完成之后，释放 `ht[0]` 空间，调换两个指针 (类似*JVM* *survivor0，1* 的拷贝)\n\n-  如果进行的是扩展操作，那么*rehash* 之后的大小是 大于等于 `ht[0].used * 2` 的第一个 $2^n$  (和 *Java*的实现有点区别，*redis* 这里是针对已经使用的大小乘以二，然后再找到不小于这个数的第一个二的次幂)\n- 如果是伸缩操作，那么 *rehash* 之后的大小是 大于等于  `ht[0].used` 的第一个 $2^n$ \n\n随后，我们进行一个再哈希 (也就是根据新的大小重新分配 `K,V` ) ，放置到 `ht[1]`。随后互换两者指针即可。\n\n##### 渐进式再哈希\n\n再哈希时的数据拷贝工作是最耗时的。Redis 采用 **rehashidx** 来进行渐进式的处理。\n\n- 初始值设置为0，表示再哈希开始\n- 每一次对哈希表的增删改查，都会随即触发再哈希。\n  - 仅仅再哈希 **rehashidx** 索引对应的节点\n  - 此时的增删改查涉及到两个哈希表\n- 完成所有的再哈希之后，设置为 -1，表示完成\n\n> 通过将再哈希的行为，均摊到增删改查当中，避免了集中式的再哈希操作\n\n### 集合\n\n#### 跳表——有序集合key的底层实现\n\n> 使用于有序集合元素数量大，或者元素成员是字符串类型\n>\n> 跳表还使用在了集群节点中的内部数据结构\n\n##### 跳表节点定义\n\n每一个节点内部，除了基本的数据 `robj` ，还包含了后退指针，以及一个 `level` 数组\n\n```c\ntypedef struct zskiplistNode {\n\n    // 成员对象\n    robj *obj;\n\n    // 分值\n    double score;\n\n    // 后退指针\n    struct zskiplistNode *backward;\n\n    // 层\n    struct zskiplistLevel {\n\n        // 前进指针\n        struct zskiplistNode *forward;\n\n        // 跨度\n        unsigned int span;\n\n    } level[];\n\n} zskiplistNode;\n```\n\n##### 跳表定义\n\n```c\ntypedef struct zskiplist {\n\n    // 表头节点和表尾节点\n    struct zskiplistNode *header, *tail;\n\n    // 表中节点的数量\n    unsigned long length;\n\n    // 表中层数最大的节点的层数\n    int level;\n\n} zskiplist;\n```\n\n几个要点：\n\n- `level` 表示层，当有新的跳跃表节点 *insert* ，**level** 将会是 `[1,32]`之间的一个随机值\n  - 层的 **跨度** `level[i].span`，主要用于计算 **rank**。\n  - 对于某一个需要查询的节点，头结点到它的**跨度累积值**就是它的 **rank**\n- 前进指针和后退指针都是用于 **遍历**\n- 成员和分值\n  - 跳表内部按照分值由小到大来进行组织——从这一点上看，分值大的一般 **rank** 也大\n  - 分值可以重复，成员不可以\n\n*redis* 中的 **有序集合 zset** 使用了一个跳表 + 一个字典来进行实现。通过跳表来进行 *rank* 的从小到大排序，然后通过字典来实现对象到分值的一个映射。不会产生额外的数据空间浪费，并且能够让 **遍历** 和 **获取对象分值** 都能够有一个比较小的时间复杂度\n\n#### Intset 整数集合\n\n> 用于集合键的底层实现之一，如果集合只包含整数，并且数量不多，就采用整数集合来进行实现\n\n##### 数据结构\n\n```C\ntypedef struct intset {\n    \n    // 编码方式\n    uint32_t encoding;\n\n    // 集合包含的元素数量\n    uint32_t length;\n\n    // 保存元素的数组, 按照升序进行排列\n    int8_t contents[];\n\n} intset;\n```\n\n关注：\n\n- 编码方式决定了 **contents[]** 数组的元素的大小\n- 插入操作：\n  - 为了维护 **升序**关系，插入的时间复杂度是 $O(N)$ ——这里其实可以优化\n  - 若出现了大小超过编码的，需要进行 **升级**\n  - 不支持 **降级**\n\n\n\n### Ziplist 压缩列表\n\n> 可以用于基本的列表数据结构；也可以用于哈希字典 (键和值相邻排放) ，同时也是有序集合的底层实现之一。一般用于存储少量的列表项，并且列表项是一些小整数或小字符串\n\n","slug":"Redis-基本数据结构","published":1,"updated":"2020-10-19T09:47:13.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi110007x8me7lxw253z","content":"<h2 id=\"Redis-基本数据结构\"><a href=\"#Redis-基本数据结构\" class=\"headerlink\" title=\"Redis 基本数据结构\"></a>Redis 基本数据结构</h2><blockquote>\n<p><em>Redis</em> 的数据类型有五大类，分别是 <strong>列表、字符串、哈希表、有序集合、无序集合</strong></p>\n<p>字符串底层：SDS</p>\n<p>列表底层：链表或者是 <em>ziplist</em> 压缩列表</p>\n<p>哈希对象：ziplist 或者是 hashtable</p>\n<p>集合：<em>intset</em> 或 <em>hashtable</em></p>\n<p>有序集合：<em>ziplist</em> 或 <em>skiplist &amp; dictionary</em></p>\n</blockquote>\n<p>底层的数据结构实现讲解</p>\n<h3 id=\"简单动态字符串-SDS\"><a href=\"#简单动态字符串-SDS\" class=\"headerlink\" title=\"简单动态字符串 SDS\"></a>简单动态字符串 SDS</h3><h4 id=\"涉及数据结构\"><a href=\"#涉及数据结构\" class=\"headerlink\" title=\"涉及数据结构\"></a>涉及数据结构</h4><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> sdshdr\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// buf 中已占用空间的长度</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// buf 中剩余可用空间的长度</span>\n    <span class=\"token keyword\">int</span> free<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 数据空间</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"空间预加载策略\"><a href=\"#空间预加载策略\" class=\"headerlink\" title=\"空间预加载策略\"></a>空间预加载策略</h4><p>当我们进行 <code>sdscat(sds s1 , const char* t)</code> 的时候，<strong>可能</strong> 会引发空间重新分配</p>\n<ul>\n<li>如果 <strong>free space</strong> 足够，那么不进行分配</li>\n<li>如果不够，看 <strong>t</strong> 的大小是不是超过 1M (<code>SDS_MAX_PREALLOC</code>- $1024\\times 1024$) <ul>\n<li>超过 <strong>1M</strong> ，直接 <code>newLen + SDS_MAX_PREALLOC</code></li>\n<li>否则 <code>newLen = newLen * 2</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-c\"><code class=\"language-c\">sds <span class=\"token function\">sdsMakeRoomFor</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> size_t addlen<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> sdshdr <span class=\"token operator\">*</span>sh<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>newsh<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 获取 s 目前的空余空间长度</span>\n    size_t free <span class=\"token operator\">=</span> <span class=\"token function\">sdsavail</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    size_t len<span class=\"token punctuation\">,</span> newlen<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// s 目前的空余空间已经足够，无须再进行扩展，直接返回</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>free <span class=\"token operator\">>=</span> addlen<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 获取 s 目前已占用空间的长度</span>\n    len <span class=\"token operator\">=</span> <span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sh <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> sdshdr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// s 最少需要的长度</span>\n    newlen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span>addlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 根据新长度，为 s 分配新空间所需的大小</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newlen <span class=\"token operator\">&lt;</span> SDS_MAX_PREALLOC<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 如果新长度小于 SDS_MAX_PREALLOC </span>\n        <span class=\"token comment\" spellcheck=\"true\">// 那么为它分配两倍于所需长度的空间</span>\n        newlen <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC</span>\n        newlen <span class=\"token operator\">+</span><span class=\"token operator\">=</span> SDS_MAX_PREALLOC<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// T = O(N)</span>\n    newsh <span class=\"token operator\">=</span> <span class=\"token function\">zrealloc</span><span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> sdshdr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>newlen<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 内存不足，分配失败，返回</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newsh <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 更新 sds 的空余长度</span>\n    newsh<span class=\"token operator\">-></span>free <span class=\"token operator\">=</span> newlen <span class=\"token operator\">-</span> len<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 返回 sds</span>\n    <span class=\"token keyword\">return</span> newsh<span class=\"token operator\">-></span>buf<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"空间懒释放策略\"><a href=\"#空间懒释放策略\" class=\"headerlink\" title=\"空间懒释放策略\"></a>空间懒释放策略</h4><p><code>sdstrim(sds s, const char*)</code> 会削减掉 <strong>s</strong> 两边的字符</p>\n<p>去掉之后，我们不改变 <strong>len</strong> , 而是作为 <strong>free space</strong> 进行了保留</p>\n<h4 id=\"二进制安全\"><a href=\"#二进制安全\" class=\"headerlink\" title=\"二进制安全\"></a>二进制安全</h4><p>对于普通的 <strong>C</strong> 字符串，由于是按照空串 <code>\\0</code> 来作为结束标志</p>\n<p>而对于 <strong>SDS</strong> ，它使用的 <strong>len</strong> 字段就可以避免这一点</p>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><p>基本的数据结构——双向链表</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">/*\n * 双端链表节点\n */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> listNode <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 前置节点</span>\n    <span class=\"token keyword\">struct</span> listNode <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 后置节点</span>\n    <span class=\"token keyword\">struct</span> listNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 节点的值</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>value<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> listNode<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*\n * 双端链表迭代器\n */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> listIter <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// **当前**迭代到的节点</span>\n    listNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 迭代的方向</span>\n    <span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> listIter<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*\n * 双端链表结构\n */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> list <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 表头节点</span>\n    listNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 表尾节点</span>\n    listNode <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 节点值复制函数</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 节点值释放函数</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>free<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 节点值对比函数</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>match<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 链表所包含的节点数量</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> len<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> list<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>可以看出，<strong>Redis</strong>中的list采取了双端链表来进行实现。结构体内部包含了：</p>\n<ul>\n<li>头结点、尾结点</li>\n<li>链表长度</li>\n<li>三个支持多态的函数指针</li>\n</ul>\n<h3 id=\"字典-hash\"><a href=\"#字典-hash\" class=\"headerlink\" title=\"字典 hash\"></a>字典 hash</h3><p>Redis中称作 <strong>字典</strong>。它的实现上都是采取了 <strong>链地址法</strong> 的哈希表结构。</p>\n<blockquote>\n<p><em>redis</em> 后续还引入了 <em>zipmap</em> 来作为 <code>字符串到字符串</code>的小<em>hash</em> 底层数据结构</p>\n</blockquote>\n<h3 id=\"主要数据结构\"><a href=\"#主要数据结构\" class=\"headerlink\" title=\"主要数据结构\"></a>主要数据结构</h3><pre class=\" language-C\"><code class=\"language-C\">/*\n * 哈希表节点\n */\ntypedef struct dictEntry &#123;\n\n    // 键\n    void *key;\n\n    // 值\n    union &#123;\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n    &#125; v;\n\n    // 指向下个哈希表节点，形成链表\n    struct dictEntry *next;\n\n&#125; dictEntry;\n\n\n/*\n * 哈希表\n *\n * 每个字典都使用**两个**哈希表，从而实现渐进式 rehash 。\n */\ntypedef struct dictht &#123;\n\n    // 哈希表数组\n    dictEntry **table;\n\n    // 哈希表大小\n    unsigned long size;\n\n    // 哈希表大小掩码，用于计算索引值\n    // 总是等于 size - 1\n    unsigned long sizemask;\n\n    // 该哈希表已有节点的数量\n    unsigned long used;\n\n&#125; dictht;\n//=======================================\n/*\n * 字典\n */\ntypedef struct dict &#123;\n\n    // 类型特定函数\n    dictType *type;\n\n    // 私有数据\n    void *privdata;\n\n    // 哈希表\n    dictht ht[2];\n\n    // rehash 索引\n    // 当 rehash 不在进行时，值为 -1\n    int rehashidx; /* rehashing not in progress if rehashidx == -1 */\n\n    // 目前正在运行的安全迭代器的数量\n    int iterators; /* number of iterators currently running */\n\n&#125; dict;</code></pre>\n<p>可以看出，<strong>Entry</strong> 作为节点，维护了 <code>K,V</code> 关系；哈希表维护了基本的<strong>哈希表大小</strong>和<strong>已占用Hash数量</strong>。</p>\n<h4 id=\"哈希算法\"><a href=\"#哈希算法\" class=\"headerlink\" title=\"哈希算法\"></a>哈希算法</h4><p>根据 <code>hashFunc(key)</code> 可以得到哈希值 <strong>hash</strong> 。但是这个值往往很大，需要规整到 <code>[0,size-1]</code> 范围内，所以我们使用 <code>hash &amp; mask</code> 来进行 <strong>模计算</strong>。这里的 <strong>mask</strong> 为 <code>size - 1</code> </p>\n<h5 id=\"再哈希\"><a href=\"#再哈希\" class=\"headerlink\" title=\"再哈希\"></a>再哈希</h5><blockquote>\n<p>大多数的哈希表实现思路类似——<strong>size</strong>都需要是 <strong>2的幂次</strong>，便于进行和掩码的与运算</p>\n</blockquote>\n<p><code>dict</code> 结构中，采用了 <code>dictht ht[2];</code> 两个哈希表来进行。一般 <code>ht[0]</code> 存储数据，当要进行再哈希的时候，先给 <code>ht[1]</code> 分配一定的空间，随后把 <code>ht[0] </code> 的数据再哈希到 <code>ht[1]</code> 当中。完成之后，释放 <code>ht[0]</code> 空间，调换两个指针 (类似<em>JVM</em> <em>survivor0，1</em> 的拷贝)</p>\n<ul>\n<li>如果进行的是扩展操作，那么<em>rehash</em> 之后的大小是 大于等于 <code>ht[0].used * 2</code> 的第一个 $2^n$  (和 <em>Java</em>的实现有点区别，<em>redis</em> 这里是针对已经使用的大小乘以二，然后再找到不小于这个数的第一个二的次幂)</li>\n<li>如果是伸缩操作，那么 <em>rehash</em> 之后的大小是 大于等于  <code>ht[0].used</code> 的第一个 $2^n$ </li>\n</ul>\n<p>随后，我们进行一个再哈希 (也就是根据新的大小重新分配 <code>K,V</code> ) ，放置到 <code>ht[1]</code>。随后互换两者指针即可。</p>\n<h5 id=\"渐进式再哈希\"><a href=\"#渐进式再哈希\" class=\"headerlink\" title=\"渐进式再哈希\"></a>渐进式再哈希</h5><p>再哈希时的数据拷贝工作是最耗时的。Redis 采用 <strong>rehashidx</strong> 来进行渐进式的处理。</p>\n<ul>\n<li>初始值设置为0，表示再哈希开始</li>\n<li>每一次对哈希表的增删改查，都会随即触发再哈希。<ul>\n<li>仅仅再哈希 <strong>rehashidx</strong> 索引对应的节点</li>\n<li>此时的增删改查涉及到两个哈希表</li>\n</ul>\n</li>\n<li>完成所有的再哈希之后，设置为 -1，表示完成</li>\n</ul>\n<blockquote>\n<p>通过将再哈希的行为，均摊到增删改查当中，避免了集中式的再哈希操作</p>\n</blockquote>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><h4 id=\"跳表——有序集合key的底层实现\"><a href=\"#跳表——有序集合key的底层实现\" class=\"headerlink\" title=\"跳表——有序集合key的底层实现\"></a>跳表——有序集合key的底层实现</h4><blockquote>\n<p>使用于有序集合元素数量大，或者元素成员是字符串类型</p>\n<p>跳表还使用在了集群节点中的内部数据结构</p>\n</blockquote>\n<h5 id=\"跳表节点定义\"><a href=\"#跳表节点定义\" class=\"headerlink\" title=\"跳表节点定义\"></a>跳表节点定义</h5><p>每一个节点内部，除了基本的数据 <code>robj</code> ，还包含了后退指针，以及一个 <code>level</code> 数组</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> zskiplistNode <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 成员对象</span>\n    robj <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 分值</span>\n    <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 后退指针</span>\n    <span class=\"token keyword\">struct</span> zskiplistNode <span class=\"token operator\">*</span>backward<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 层</span>\n    <span class=\"token keyword\">struct</span> zskiplistLevel <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 前进指针</span>\n        <span class=\"token keyword\">struct</span> zskiplistNode <span class=\"token operator\">*</span>forward<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 跨度</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> span<span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> level<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> zskiplistNode<span class=\"token punctuation\">;</span></code></pre>\n<h5 id=\"跳表定义\"><a href=\"#跳表定义\" class=\"headerlink\" title=\"跳表定义\"></a>跳表定义</h5><pre class=\" language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> zskiplist <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 表头节点和表尾节点</span>\n    <span class=\"token keyword\">struct</span> zskiplistNode <span class=\"token operator\">*</span>header<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 表中节点的数量</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 表中层数最大的节点的层数</span>\n    <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> zskiplist<span class=\"token punctuation\">;</span></code></pre>\n<p>几个要点：</p>\n<ul>\n<li><code>level</code> 表示层，当有新的跳跃表节点 <em>insert</em> ，<strong>level</strong> 将会是 <code>[1,32]</code>之间的一个随机值<ul>\n<li>层的 <strong>跨度</strong> <code>level[i].span</code>，主要用于计算 <strong>rank</strong>。</li>\n<li>对于某一个需要查询的节点，头结点到它的<strong>跨度累积值</strong>就是它的 <strong>rank</strong></li>\n</ul>\n</li>\n<li>前进指针和后退指针都是用于 <strong>遍历</strong></li>\n<li>成员和分值<ul>\n<li>跳表内部按照分值由小到大来进行组织——从这一点上看，分值大的一般 <strong>rank</strong> 也大</li>\n<li>分值可以重复，成员不可以</li>\n</ul>\n</li>\n</ul>\n<p><em>redis</em> 中的 <strong>有序集合 zset</strong> 使用了一个跳表 + 一个字典来进行实现。通过跳表来进行 <em>rank</em> 的从小到大排序，然后通过字典来实现对象到分值的一个映射。不会产生额外的数据空间浪费，并且能够让 <strong>遍历</strong> 和 <strong>获取对象分值</strong> 都能够有一个比较小的时间复杂度</p>\n<h4 id=\"Intset-整数集合\"><a href=\"#Intset-整数集合\" class=\"headerlink\" title=\"Intset 整数集合\"></a>Intset 整数集合</h4><blockquote>\n<p>用于集合键的底层实现之一，如果集合只包含整数，并且数量不多，就采用整数集合来进行实现</p>\n</blockquote>\n<h5 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h5><pre class=\" language-C\"><code class=\"language-C\">typedef struct intset &#123;\n\n    // 编码方式\n    uint32_t encoding;\n\n    // 集合包含的元素数量\n    uint32_t length;\n\n    // 保存元素的数组, 按照升序进行排列\n    int8_t contents[];\n\n&#125; intset;</code></pre>\n<p>关注：</p>\n<ul>\n<li>编码方式决定了 <strong>contents[]</strong> 数组的元素的大小</li>\n<li>插入操作：<ul>\n<li>为了维护 <strong>升序</strong>关系，插入的时间复杂度是 $O(N)$ ——这里其实可以优化</li>\n<li>若出现了大小超过编码的，需要进行 <strong>升级</strong></li>\n<li>不支持 <strong>降级</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Ziplist-压缩列表\"><a href=\"#Ziplist-压缩列表\" class=\"headerlink\" title=\"Ziplist 压缩列表\"></a>Ziplist 压缩列表</h3><blockquote>\n<p>可以用于基本的列表数据结构；也可以用于哈希字典 (键和值相邻排放) ，同时也是有序集合的底层实现之一。一般用于存储少量的列表项，并且列表项是一些小整数或小字符串</p>\n</blockquote>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603231320933-cdd361afc4f0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80","excerpt":"","more":"<h2 id=\"Redis-基本数据结构\"><a href=\"#Redis-基本数据结构\" class=\"headerlink\" title=\"Redis 基本数据结构\"></a>Redis 基本数据结构</h2><blockquote>\n<p><em>Redis</em> 的数据类型有五大类，分别是 <strong>列表、字符串、哈希表、有序集合、无序集合</strong></p>\n<p>字符串底层：SDS</p>\n<p>列表底层：链表或者是 <em>ziplist</em> 压缩列表</p>\n<p>哈希对象：ziplist 或者是 hashtable</p>\n<p>集合：<em>intset</em> 或 <em>hashtable</em></p>\n<p>有序集合：<em>ziplist</em> 或 <em>skiplist &amp; dictionary</em></p>\n</blockquote>\n<p>底层的数据结构实现讲解</p>\n<h3 id=\"简单动态字符串-SDS\"><a href=\"#简单动态字符串-SDS\" class=\"headerlink\" title=\"简单动态字符串 SDS\"></a>简单动态字符串 SDS</h3><h4 id=\"涉及数据结构\"><a href=\"#涉及数据结构\" class=\"headerlink\" title=\"涉及数据结构\"></a>涉及数据结构</h4><pre><code class=\"c\">struct sdshdr\n&#123;\n\n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n&#125;;</code></pre>\n<h4 id=\"空间预加载策略\"><a href=\"#空间预加载策略\" class=\"headerlink\" title=\"空间预加载策略\"></a>空间预加载策略</h4><p>当我们进行 <code>sdscat(sds s1 , const char* t)</code> 的时候，<strong>可能</strong> 会引发空间重新分配</p>\n<ul>\n<li>如果 <strong>free space</strong> 足够，那么不进行分配</li>\n<li>如果不够，看 <strong>t</strong> 的大小是不是超过 1M (<code>SDS_MAX_PREALLOC</code>- $1024\\times 1024$) <ul>\n<li>超过 <strong>1M</strong> ，直接 <code>newLen + SDS_MAX_PREALLOC</code></li>\n<li>否则 <code>newLen = newLen * 2</code></li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"c\">sds sdsMakeRoomFor(sds s, size_t addlen) &#123;\n\n    struct sdshdr *sh, *newsh;\n\n    // 获取 s 目前的空余空间长度\n    size_t free = sdsavail(s);\n\n    size_t len, newlen;\n\n    // s 目前的空余空间已经足够，无须再进行扩展，直接返回\n    if (free &gt;= addlen) return s;\n\n    // 获取 s 目前已占用空间的长度\n    len = sdslen(s);\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // s 最少需要的长度\n    newlen = (len+addlen);\n\n    // 根据新长度，为 s 分配新空间所需的大小\n    if (newlen &lt; SDS_MAX_PREALLOC)\n        // 如果新长度小于 SDS_MAX_PREALLOC \n        // 那么为它分配两倍于所需长度的空间\n        newlen *= 2;\n    else\n        // 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC\n        newlen += SDS_MAX_PREALLOC;\n    // T = O(N)\n    newsh = zrealloc(sh, sizeof(struct sdshdr)+newlen+1);\n\n    // 内存不足，分配失败，返回\n    if (newsh == NULL) return NULL;\n\n    // 更新 sds 的空余长度\n    newsh-&gt;free = newlen - len;\n\n    // 返回 sds\n    return newsh-&gt;buf;\n&#125;</code></pre>\n<h4 id=\"空间懒释放策略\"><a href=\"#空间懒释放策略\" class=\"headerlink\" title=\"空间懒释放策略\"></a>空间懒释放策略</h4><p><code>sdstrim(sds s, const char*)</code> 会削减掉 <strong>s</strong> 两边的字符</p>\n<p>去掉之后，我们不改变 <strong>len</strong> , 而是作为 <strong>free space</strong> 进行了保留</p>\n<h4 id=\"二进制安全\"><a href=\"#二进制安全\" class=\"headerlink\" title=\"二进制安全\"></a>二进制安全</h4><p>对于普通的 <strong>C</strong> 字符串，由于是按照空串 <code>\\0</code> 来作为结束标志</p>\n<p>而对于 <strong>SDS</strong> ，它使用的 <strong>len</strong> 字段就可以避免这一点</p>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><p>基本的数据结构——双向链表</p>\n<pre><code class=\"c\">/*\n * 双端链表节点\n */\ntypedef struct listNode &#123;\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n&#125; listNode;\n\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter &#123;\n\n    // **当前**迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n&#125; listIter;\n\n/*\n * 双端链表结构\n */\ntypedef struct list &#123;\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n&#125; list;\n</code></pre>\n<p>可以看出，<strong>Redis</strong>中的list采取了双端链表来进行实现。结构体内部包含了：</p>\n<ul>\n<li>头结点、尾结点</li>\n<li>链表长度</li>\n<li>三个支持多态的函数指针</li>\n</ul>\n<h3 id=\"字典-hash\"><a href=\"#字典-hash\" class=\"headerlink\" title=\"字典 hash\"></a>字典 hash</h3><p>Redis中称作 <strong>字典</strong>。它的实现上都是采取了 <strong>链地址法</strong> 的哈希表结构。</p>\n<blockquote>\n<p><em>redis</em> 后续还引入了 <em>zipmap</em> 来作为 <code>字符串到字符串</code>的小<em>hash</em> 底层数据结构</p>\n</blockquote>\n<h3 id=\"主要数据结构\"><a href=\"#主要数据结构\" class=\"headerlink\" title=\"主要数据结构\"></a>主要数据结构</h3><pre><code class=\"C\">/*\n * 哈希表节点\n */\ntypedef struct dictEntry &#123;\n\n    // 键\n    void *key;\n\n    // 值\n    union &#123;\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n    &#125; v;\n\n    // 指向下个哈希表节点，形成链表\n    struct dictEntry *next;\n\n&#125; dictEntry;\n\n\n/*\n * 哈希表\n *\n * 每个字典都使用**两个**哈希表，从而实现渐进式 rehash 。\n */\ntypedef struct dictht &#123;\n\n    // 哈希表数组\n    dictEntry **table;\n\n    // 哈希表大小\n    unsigned long size;\n\n    // 哈希表大小掩码，用于计算索引值\n    // 总是等于 size - 1\n    unsigned long sizemask;\n\n    // 该哈希表已有节点的数量\n    unsigned long used;\n\n&#125; dictht;\n//=======================================\n/*\n * 字典\n */\ntypedef struct dict &#123;\n\n    // 类型特定函数\n    dictType *type;\n\n    // 私有数据\n    void *privdata;\n\n    // 哈希表\n    dictht ht[2];\n\n    // rehash 索引\n    // 当 rehash 不在进行时，值为 -1\n    int rehashidx; /* rehashing not in progress if rehashidx == -1 */\n\n    // 目前正在运行的安全迭代器的数量\n    int iterators; /* number of iterators currently running */\n\n&#125; dict;</code></pre>\n<p>可以看出，<strong>Entry</strong> 作为节点，维护了 <code>K,V</code> 关系；哈希表维护了基本的<strong>哈希表大小</strong>和<strong>已占用Hash数量</strong>。</p>\n<h4 id=\"哈希算法\"><a href=\"#哈希算法\" class=\"headerlink\" title=\"哈希算法\"></a>哈希算法</h4><p>根据 <code>hashFunc(key)</code> 可以得到哈希值 <strong>hash</strong> 。但是这个值往往很大，需要规整到 <code>[0,size-1]</code> 范围内，所以我们使用 <code>hash &amp; mask</code> 来进行 <strong>模计算</strong>。这里的 <strong>mask</strong> 为 <code>size - 1</code> </p>\n<h5 id=\"再哈希\"><a href=\"#再哈希\" class=\"headerlink\" title=\"再哈希\"></a>再哈希</h5><blockquote>\n<p>大多数的哈希表实现思路类似——<strong>size</strong>都需要是 <strong>2的幂次</strong>，便于进行和掩码的与运算</p>\n</blockquote>\n<p><code>dict</code> 结构中，采用了 <code>dictht ht[2];</code> 两个哈希表来进行。一般 <code>ht[0]</code> 存储数据，当要进行再哈希的时候，先给 <code>ht[1]</code> 分配一定的空间，随后把 <code>ht[0] </code> 的数据再哈希到 <code>ht[1]</code> 当中。完成之后，释放 <code>ht[0]</code> 空间，调换两个指针 (类似<em>JVM</em> <em>survivor0，1</em> 的拷贝)</p>\n<ul>\n<li>如果进行的是扩展操作，那么<em>rehash</em> 之后的大小是 大于等于 <code>ht[0].used * 2</code> 的第一个 $2^n$  (和 <em>Java</em>的实现有点区别，<em>redis</em> 这里是针对已经使用的大小乘以二，然后再找到不小于这个数的第一个二的次幂)</li>\n<li>如果是伸缩操作，那么 <em>rehash</em> 之后的大小是 大于等于  <code>ht[0].used</code> 的第一个 $2^n$ </li>\n</ul>\n<p>随后，我们进行一个再哈希 (也就是根据新的大小重新分配 <code>K,V</code> ) ，放置到 <code>ht[1]</code>。随后互换两者指针即可。</p>\n<h5 id=\"渐进式再哈希\"><a href=\"#渐进式再哈希\" class=\"headerlink\" title=\"渐进式再哈希\"></a>渐进式再哈希</h5><p>再哈希时的数据拷贝工作是最耗时的。Redis 采用 <strong>rehashidx</strong> 来进行渐进式的处理。</p>\n<ul>\n<li>初始值设置为0，表示再哈希开始</li>\n<li>每一次对哈希表的增删改查，都会随即触发再哈希。<ul>\n<li>仅仅再哈希 <strong>rehashidx</strong> 索引对应的节点</li>\n<li>此时的增删改查涉及到两个哈希表</li>\n</ul>\n</li>\n<li>完成所有的再哈希之后，设置为 -1，表示完成</li>\n</ul>\n<blockquote>\n<p>通过将再哈希的行为，均摊到增删改查当中，避免了集中式的再哈希操作</p>\n</blockquote>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><h4 id=\"跳表——有序集合key的底层实现\"><a href=\"#跳表——有序集合key的底层实现\" class=\"headerlink\" title=\"跳表——有序集合key的底层实现\"></a>跳表——有序集合key的底层实现</h4><blockquote>\n<p>使用于有序集合元素数量大，或者元素成员是字符串类型</p>\n<p>跳表还使用在了集群节点中的内部数据结构</p>\n</blockquote>\n<h5 id=\"跳表节点定义\"><a href=\"#跳表节点定义\" class=\"headerlink\" title=\"跳表节点定义\"></a>跳表节点定义</h5><p>每一个节点内部，除了基本的数据 <code>robj</code> ，还包含了后退指针，以及一个 <code>level</code> 数组</p>\n<pre><code class=\"c\">typedef struct zskiplistNode &#123;\n\n    // 成员对象\n    robj *obj;\n\n    // 分值\n    double score;\n\n    // 后退指针\n    struct zskiplistNode *backward;\n\n    // 层\n    struct zskiplistLevel &#123;\n\n        // 前进指针\n        struct zskiplistNode *forward;\n\n        // 跨度\n        unsigned int span;\n\n    &#125; level[];\n\n&#125; zskiplistNode;</code></pre>\n<h5 id=\"跳表定义\"><a href=\"#跳表定义\" class=\"headerlink\" title=\"跳表定义\"></a>跳表定义</h5><pre><code class=\"c\">typedef struct zskiplist &#123;\n\n    // 表头节点和表尾节点\n    struct zskiplistNode *header, *tail;\n\n    // 表中节点的数量\n    unsigned long length;\n\n    // 表中层数最大的节点的层数\n    int level;\n\n&#125; zskiplist;</code></pre>\n<p>几个要点：</p>\n<ul>\n<li><code>level</code> 表示层，当有新的跳跃表节点 <em>insert</em> ，<strong>level</strong> 将会是 <code>[1,32]</code>之间的一个随机值<ul>\n<li>层的 <strong>跨度</strong> <code>level[i].span</code>，主要用于计算 <strong>rank</strong>。</li>\n<li>对于某一个需要查询的节点，头结点到它的<strong>跨度累积值</strong>就是它的 <strong>rank</strong></li>\n</ul>\n</li>\n<li>前进指针和后退指针都是用于 <strong>遍历</strong></li>\n<li>成员和分值<ul>\n<li>跳表内部按照分值由小到大来进行组织——从这一点上看，分值大的一般 <strong>rank</strong> 也大</li>\n<li>分值可以重复，成员不可以</li>\n</ul>\n</li>\n</ul>\n<p><em>redis</em> 中的 <strong>有序集合 zset</strong> 使用了一个跳表 + 一个字典来进行实现。通过跳表来进行 <em>rank</em> 的从小到大排序，然后通过字典来实现对象到分值的一个映射。不会产生额外的数据空间浪费，并且能够让 <strong>遍历</strong> 和 <strong>获取对象分值</strong> 都能够有一个比较小的时间复杂度</p>\n<h4 id=\"Intset-整数集合\"><a href=\"#Intset-整数集合\" class=\"headerlink\" title=\"Intset 整数集合\"></a>Intset 整数集合</h4><blockquote>\n<p>用于集合键的底层实现之一，如果集合只包含整数，并且数量不多，就采用整数集合来进行实现</p>\n</blockquote>\n<h5 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h5><pre><code class=\"C\">typedef struct intset &#123;\n\n    // 编码方式\n    uint32_t encoding;\n\n    // 集合包含的元素数量\n    uint32_t length;\n\n    // 保存元素的数组, 按照升序进行排列\n    int8_t contents[];\n\n&#125; intset;</code></pre>\n<p>关注：</p>\n<ul>\n<li>编码方式决定了 <strong>contents[]</strong> 数组的元素的大小</li>\n<li>插入操作：<ul>\n<li>为了维护 <strong>升序</strong>关系，插入的时间复杂度是 $O(N)$ ——这里其实可以优化</li>\n<li>若出现了大小超过编码的，需要进行 <strong>升级</strong></li>\n<li>不支持 <strong>降级</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Ziplist-压缩列表\"><a href=\"#Ziplist-压缩列表\" class=\"headerlink\" title=\"Ziplist 压缩列表\"></a>Ziplist 压缩列表</h3><blockquote>\n<p>可以用于基本的列表数据结构；也可以用于哈希字典 (键和值相邻排放) ，同时也是有序集合的底层实现之一。一般用于存储少量的列表项，并且列表项是一些小整数或小字符串</p>\n</blockquote>\n"},{"title":"TCP/IP 阅读笔记(1)","date":"2019-12-14T14:24:04.000Z","description":"TCP协议基本内容","cover_img":"https://images.unsplash.com/photo-1465447142348-e9952c393450?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=968&q=80","feature_img":"https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","_content":"\n### TCP连接形式\n\nTCP连接使用了一对套接字 (`socket`) 来进行唯一表示，也就是把 `IP` 头部的源和目的IP地址，携同TCP头部的源端口号和目的端口号，来进行一个标识。\n\n### Seq 与 Ack\n\n序列号与响应号是通信双方进行确认判定的依据。每一次报文中的响应号就是上一次报文的序列号  + 1 ，表示了接收方想要接收的下一个序列号。\n\n我们所熟知的三次握手，其实本质上就是发送方和接收方的序列号交换：\n\n> 第一次报文发送：SYN表明是客户端期望进行序列号同步，并且发送自己的序列号\n>\n> 第二次报文发送：SYN表示是服务端期望进行序列号同步，返回之前客户端的序列号 + 1 , 表示此时客户端序列号已经同步。此时还需要发送服务端自己的序列号，等待客户端是否给予最后一次响应。\n>\n> 第三次报文发送：ACK确实就是服务端序列号 + 1 的话，那么表明服务端的序列号也已经同步。至此通过三次报文交换来实现全双工通信的两端序列号同步。\n\n对于四次挥手，其实也是序列号的交换问题。\n\n书上的问题给出了进一步的思考：如果出现同时建立连接和同时断开连接，报文发送个数是多少？\n\n- 对于同时建立连接的情况，一开始同时就会有两次报文发送，这时候两个报文都是 SYN，期望同步自己的序列号。此时连接两端的两个 `socket` 其实都只需要得到自己想要的 `ACK` 就可以了。这时候就是四次报文交换\n- 对于同时断开连接的情况，和上面完全一样，也是四次\n\n### TIME_WAIT问题\n\n四次挥手结束之后，连接断开的发起者还会继续等待 `2MSL` 的时间长度，这种做法能够避免最后一次 **ACK** 因为网络问题没有发送到，给 **被动断开方** 时间进行超时重传。\n\n在发起者还在等待的时候，其实两端的端口还是在连接的状态。问题就来了——端口占用问题。\n\n也就是说，如果我们这时候在服务端或者客户端，断开 `socket` 却又立即重启，这时候就会出现端口占用的情况，导致我们的连接被拒绝。\n\n","source":"_posts/TCP-IP-阅读笔记-1.md","raw":"---\ntitle: TCP/IP 阅读笔记(1)\ndate: 2019-12-14 22:24:04\ntags: 读书笔记\ndescription: TCP协议基本内容\ncover_img: https://images.unsplash.com/photo-1465447142348-e9952c393450?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=968&q=80\nfeature_img: https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\n---\n\n### TCP连接形式\n\nTCP连接使用了一对套接字 (`socket`) 来进行唯一表示，也就是把 `IP` 头部的源和目的IP地址，携同TCP头部的源端口号和目的端口号，来进行一个标识。\n\n### Seq 与 Ack\n\n序列号与响应号是通信双方进行确认判定的依据。每一次报文中的响应号就是上一次报文的序列号  + 1 ，表示了接收方想要接收的下一个序列号。\n\n我们所熟知的三次握手，其实本质上就是发送方和接收方的序列号交换：\n\n> 第一次报文发送：SYN表明是客户端期望进行序列号同步，并且发送自己的序列号\n>\n> 第二次报文发送：SYN表示是服务端期望进行序列号同步，返回之前客户端的序列号 + 1 , 表示此时客户端序列号已经同步。此时还需要发送服务端自己的序列号，等待客户端是否给予最后一次响应。\n>\n> 第三次报文发送：ACK确实就是服务端序列号 + 1 的话，那么表明服务端的序列号也已经同步。至此通过三次报文交换来实现全双工通信的两端序列号同步。\n\n对于四次挥手，其实也是序列号的交换问题。\n\n书上的问题给出了进一步的思考：如果出现同时建立连接和同时断开连接，报文发送个数是多少？\n\n- 对于同时建立连接的情况，一开始同时就会有两次报文发送，这时候两个报文都是 SYN，期望同步自己的序列号。此时连接两端的两个 `socket` 其实都只需要得到自己想要的 `ACK` 就可以了。这时候就是四次报文交换\n- 对于同时断开连接的情况，和上面完全一样，也是四次\n\n### TIME_WAIT问题\n\n四次挥手结束之后，连接断开的发起者还会继续等待 `2MSL` 的时间长度，这种做法能够避免最后一次 **ACK** 因为网络问题没有发送到，给 **被动断开方** 时间进行超时重传。\n\n在发起者还在等待的时候，其实两端的端口还是在连接的状态。问题就来了——端口占用问题。\n\n也就是说，如果我们这时候在服务端或者客户端，断开 `socket` 却又立即重启，这时候就会出现端口占用的情况，导致我们的连接被拒绝。\n\n","slug":"TCP-IP-阅读笔记-1","published":1,"updated":"2020-10-19T09:47:13.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi120009x8me0sjjcgnj","content":"<h3 id=\"TCP连接形式\"><a href=\"#TCP连接形式\" class=\"headerlink\" title=\"TCP连接形式\"></a>TCP连接形式</h3><p>TCP连接使用了一对套接字 (<code>socket</code>) 来进行唯一表示，也就是把 <code>IP</code> 头部的源和目的IP地址，携同TCP头部的源端口号和目的端口号，来进行一个标识。</p>\n<h3 id=\"Seq-与-Ack\"><a href=\"#Seq-与-Ack\" class=\"headerlink\" title=\"Seq 与 Ack\"></a>Seq 与 Ack</h3><p>序列号与响应号是通信双方进行确认判定的依据。每一次报文中的响应号就是上一次报文的序列号  + 1 ，表示了接收方想要接收的下一个序列号。</p>\n<p>我们所熟知的三次握手，其实本质上就是发送方和接收方的序列号交换：</p>\n<blockquote>\n<p>第一次报文发送：SYN表明是客户端期望进行序列号同步，并且发送自己的序列号</p>\n<p>第二次报文发送：SYN表示是服务端期望进行序列号同步，返回之前客户端的序列号 + 1 , 表示此时客户端序列号已经同步。此时还需要发送服务端自己的序列号，等待客户端是否给予最后一次响应。</p>\n<p>第三次报文发送：ACK确实就是服务端序列号 + 1 的话，那么表明服务端的序列号也已经同步。至此通过三次报文交换来实现全双工通信的两端序列号同步。</p>\n</blockquote>\n<p>对于四次挥手，其实也是序列号的交换问题。</p>\n<p>书上的问题给出了进一步的思考：如果出现同时建立连接和同时断开连接，报文发送个数是多少？</p>\n<ul>\n<li>对于同时建立连接的情况，一开始同时就会有两次报文发送，这时候两个报文都是 SYN，期望同步自己的序列号。此时连接两端的两个 <code>socket</code> 其实都只需要得到自己想要的 <code>ACK</code> 就可以了。这时候就是四次报文交换</li>\n<li>对于同时断开连接的情况，和上面完全一样，也是四次</li>\n</ul>\n<h3 id=\"TIME-WAIT问题\"><a href=\"#TIME-WAIT问题\" class=\"headerlink\" title=\"TIME_WAIT问题\"></a>TIME_WAIT问题</h3><p>四次挥手结束之后，连接断开的发起者还会继续等待 <code>2MSL</code> 的时间长度，这种做法能够避免最后一次 <strong>ACK</strong> 因为网络问题没有发送到，给 <strong>被动断开方</strong> 时间进行超时重传。</p>\n<p>在发起者还在等待的时候，其实两端的端口还是在连接的状态。问题就来了——端口占用问题。</p>\n<p>也就是说，如果我们这时候在服务端或者客户端，断开 <code>socket</code> 却又立即重启，这时候就会出现端口占用的情况，导致我们的连接被拒绝。</p>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603194477925-b65a2d92d015?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","excerpt":"","more":"<h3 id=\"TCP连接形式\"><a href=\"#TCP连接形式\" class=\"headerlink\" title=\"TCP连接形式\"></a>TCP连接形式</h3><p>TCP连接使用了一对套接字 (<code>socket</code>) 来进行唯一表示，也就是把 <code>IP</code> 头部的源和目的IP地址，携同TCP头部的源端口号和目的端口号，来进行一个标识。</p>\n<h3 id=\"Seq-与-Ack\"><a href=\"#Seq-与-Ack\" class=\"headerlink\" title=\"Seq 与 Ack\"></a>Seq 与 Ack</h3><p>序列号与响应号是通信双方进行确认判定的依据。每一次报文中的响应号就是上一次报文的序列号  + 1 ，表示了接收方想要接收的下一个序列号。</p>\n<p>我们所熟知的三次握手，其实本质上就是发送方和接收方的序列号交换：</p>\n<blockquote>\n<p>第一次报文发送：SYN表明是客户端期望进行序列号同步，并且发送自己的序列号</p>\n<p>第二次报文发送：SYN表示是服务端期望进行序列号同步，返回之前客户端的序列号 + 1 , 表示此时客户端序列号已经同步。此时还需要发送服务端自己的序列号，等待客户端是否给予最后一次响应。</p>\n<p>第三次报文发送：ACK确实就是服务端序列号 + 1 的话，那么表明服务端的序列号也已经同步。至此通过三次报文交换来实现全双工通信的两端序列号同步。</p>\n</blockquote>\n<p>对于四次挥手，其实也是序列号的交换问题。</p>\n<p>书上的问题给出了进一步的思考：如果出现同时建立连接和同时断开连接，报文发送个数是多少？</p>\n<ul>\n<li>对于同时建立连接的情况，一开始同时就会有两次报文发送，这时候两个报文都是 SYN，期望同步自己的序列号。此时连接两端的两个 <code>socket</code> 其实都只需要得到自己想要的 <code>ACK</code> 就可以了。这时候就是四次报文交换</li>\n<li>对于同时断开连接的情况，和上面完全一样，也是四次</li>\n</ul>\n<h3 id=\"TIME-WAIT问题\"><a href=\"#TIME-WAIT问题\" class=\"headerlink\" title=\"TIME_WAIT问题\"></a>TIME_WAIT问题</h3><p>四次挥手结束之后，连接断开的发起者还会继续等待 <code>2MSL</code> 的时间长度，这种做法能够避免最后一次 <strong>ACK</strong> 因为网络问题没有发送到，给 <strong>被动断开方</strong> 时间进行超时重传。</p>\n<p>在发起者还在等待的时候，其实两端的端口还是在连接的状态。问题就来了——端口占用问题。</p>\n<p>也就是说，如果我们这时候在服务端或者客户端，断开 <code>socket</code> 却又立即重启，这时候就会出现端口占用的情况，导致我们的连接被拒绝。</p>\n"},{"title":"cmake学习笔记","date":"2020-02-18T01:12:40.000Z","cover_img":null,"feature_img":null,"description":null,"keywords":null,"_content":"\n## Cmake学习笔记\n\n用于记录一下cmake开发中的一些整理性工作\n\n#### cmake变量\n\n使用 `set(A B)` 来定义`A`这个新的变量，之后就可以通过`${A}`来进行引用，可以想成一个**自定义宏**\n\n#### 动态/静态链接、头文件配置\n\n##### 头文件目录\n\n`INCLUDE_DIRECTORIES`\n\n指定项目使用到的头文件目录，可以一次包含多个头文件目录\n\n##### 添加库文件\n\n``\n\n\n\n#### 添加外部文件夹\n\n`add_subdirectory(source_dir,[binary_dir])`\n\n第一个参数就是外部文件夹的位置，而`binary_dir`表示输出的位置。如果代码目录在外部，则必须要指定第二个参数\n\n`ADD_SUBDIRECTORY`","source":"_posts/cmake学习笔记.md","raw":"---\ntitle: cmake学习笔记\ndate: 2020-02-18 09:12:40\ntags:\ncover_img:\nfeature_img:\ndescription:\nkeywords:\n---\n\n## Cmake学习笔记\n\n用于记录一下cmake开发中的一些整理性工作\n\n#### cmake变量\n\n使用 `set(A B)` 来定义`A`这个新的变量，之后就可以通过`${A}`来进行引用，可以想成一个**自定义宏**\n\n#### 动态/静态链接、头文件配置\n\n##### 头文件目录\n\n`INCLUDE_DIRECTORIES`\n\n指定项目使用到的头文件目录，可以一次包含多个头文件目录\n\n##### 添加库文件\n\n``\n\n\n\n#### 添加外部文件夹\n\n`add_subdirectory(source_dir,[binary_dir])`\n\n第一个参数就是外部文件夹的位置，而`binary_dir`表示输出的位置。如果代码目录在外部，则必须要指定第二个参数\n\n`ADD_SUBDIRECTORY`","slug":"cmake学习笔记","published":1,"updated":"2020-10-19T09:47:13.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi13000ax8mef65yfk7d","content":"<h2 id=\"Cmake学习笔记\"><a href=\"#Cmake学习笔记\" class=\"headerlink\" title=\"Cmake学习笔记\"></a>Cmake学习笔记</h2><p>用于记录一下cmake开发中的一些整理性工作</p>\n<h4 id=\"cmake变量\"><a href=\"#cmake变量\" class=\"headerlink\" title=\"cmake变量\"></a>cmake变量</h4><p>使用 <code>set(A B)</code> 来定义<code>A</code>这个新的变量，之后就可以通过<code>$&#123;A&#125;</code>来进行引用，可以想成一个<strong>自定义宏</strong></p>\n<h4 id=\"动态-静态链接、头文件配置\"><a href=\"#动态-静态链接、头文件配置\" class=\"headerlink\" title=\"动态/静态链接、头文件配置\"></a>动态/静态链接、头文件配置</h4><h5 id=\"头文件目录\"><a href=\"#头文件目录\" class=\"headerlink\" title=\"头文件目录\"></a>头文件目录</h5><p><code>INCLUDE_DIRECTORIES</code></p>\n<p>指定项目使用到的头文件目录，可以一次包含多个头文件目录</p>\n<h5 id=\"添加库文件\"><a href=\"#添加库文件\" class=\"headerlink\" title=\"添加库文件\"></a>添加库文件</h5><p>``</p>\n<h4 id=\"添加外部文件夹\"><a href=\"#添加外部文件夹\" class=\"headerlink\" title=\"添加外部文件夹\"></a>添加外部文件夹</h4><p><code>add_subdirectory(source_dir,[binary_dir])</code></p>\n<p>第一个参数就是外部文件夹的位置，而<code>binary_dir</code>表示输出的位置。如果代码目录在外部，则必须要指定第二个参数</p>\n<p><code>ADD_SUBDIRECTORY</code></p>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603247133426-705532600985?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80","excerpt":"","more":"<h2 id=\"Cmake学习笔记\"><a href=\"#Cmake学习笔记\" class=\"headerlink\" title=\"Cmake学习笔记\"></a>Cmake学习笔记</h2><p>用于记录一下cmake开发中的一些整理性工作</p>\n<h4 id=\"cmake变量\"><a href=\"#cmake变量\" class=\"headerlink\" title=\"cmake变量\"></a>cmake变量</h4><p>使用 <code>set(A B)</code> 来定义<code>A</code>这个新的变量，之后就可以通过<code>$&#123;A&#125;</code>来进行引用，可以想成一个<strong>自定义宏</strong></p>\n<h4 id=\"动态-静态链接、头文件配置\"><a href=\"#动态-静态链接、头文件配置\" class=\"headerlink\" title=\"动态/静态链接、头文件配置\"></a>动态/静态链接、头文件配置</h4><h5 id=\"头文件目录\"><a href=\"#头文件目录\" class=\"headerlink\" title=\"头文件目录\"></a>头文件目录</h5><p><code>INCLUDE_DIRECTORIES</code></p>\n<p>指定项目使用到的头文件目录，可以一次包含多个头文件目录</p>\n<h5 id=\"添加库文件\"><a href=\"#添加库文件\" class=\"headerlink\" title=\"添加库文件\"></a>添加库文件</h5><p>``</p>\n<h4 id=\"添加外部文件夹\"><a href=\"#添加外部文件夹\" class=\"headerlink\" title=\"添加外部文件夹\"></a>添加外部文件夹</h4><p><code>add_subdirectory(source_dir,[binary_dir])</code></p>\n<p>第一个参数就是外部文件夹的位置，而<code>binary_dir</code>表示输出的位置。如果代码目录在外部，则必须要指定第二个参数</p>\n<p><code>ADD_SUBDIRECTORY</code></p>\n"},{"title":"c++新特性","date":"2020-01-15T02:14:27.000Z","description":"虽说是新特性，但是C++ 11 & 14 已经推出了将近10年了.这次就好好整理一下","cover_img":"https://images.unsplash.com/photo-1565433435379-877a403f0f09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80","cover":"https://images.unsplash.com/photo-1565433435379-877a403f0f09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80","feature_img":"https://images.unsplash.com/photo-1534972195531-d756b9bfa9f2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","coverImg":"https://images.unsplash.com/photo-1565433435379-877a403f0f09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80","top_img":"https://images.unsplash.com/photo-1565433435379-877a403f0f09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80","_content":"\n## What’s new in C++ 11?\n\n###  storage duration specifier\n\n多个C++版本都对变量存储时间的定义有严格的说明\n\n- `auto` - *automatic* storage duration.\n\n- `register` - *automatic* storage duration. Also hints to the compiler to place the object in the processor's register. (deprecated) ——*since C++ 17*\n\n- `static` - *static* or *thread* storage duration and *internal* linkage\n\n- `extern` - *static* or *thread* storage duration and *external* linkage.\n\n- `thread_local` - *thread* storage duration\n\n  The `thread_local` keyword is only allowed for objects declared at namespace scope, objects declared at block scope, and static data members. It indicates that the object has **thread storage duration**. It can be combined with `static` or `extern` to specify internal or external linkage (except for static data members which always have external linkage), respectively, but that additional `static` doesn't affect the storage duration.\n\n- `mutable` - does not affect storage duration or linkage\n\n  注意：`mutable` 主要是标识 **const对象** 中某些可变的成员，实现了从二进制的物理 **const** 到逻辑 **const** (外观不变)\n\n### Variadic templates\n\n可变类模板，在 `c++ reference` 里面以 *parameter pack* 来代替\n\n```cpp\ntemplate<class... Types>\t\t\t//class ... Types 是一个 pack 的声明\t\nvoid f(Types... args) {}\t\t\t//Types... args 是\n```\n\n#### Pack Expansion\n\n- `&args...` 代表的是参数扩展\n- `&args`代表的是 *pack pattern* 本身\n\n### Move semantics\n\n> **凡是取地址（`&`）操作可以成功的都是左值，其余都是右值**\n>\n> - 等号左边的不一定是左值——可以通过操作符重载来让左部变成 **右值**\n\n#### 右值引用\n\n我们之前常见的都是 **左值引用**，指的是我们只能够将 **左值** 赋给一个引用。\n\n-  `int& a = 1` 就是非法的。而我们也可以 `int const& i = 42;` 来进行一个 *tricky* 的躲避\n\n  在 `c++11`中允许了右值引用的出现\n```\nint&& a = 3;\n```\n\n#### 移动语义\n\n我们在进行 `Test(const Test& test)` 拷贝构造函数的执行过程中，会造成很多的拷贝浪费。当单独的一次拷贝构造函数 (特别是对指针数组这些资源)过程消耗特别大的时候，对于性能来说是很低的。\n\n那么 `c++11`标准给出了 **移动拷贝构造函数** 和 **移动赋值操作符重载**。此外，还支持 `std::move()`来强制性让 **左值转化为右值**\n\n#### 完美转发\n\n我们想要实现\n\n> 多级函数调用过程中\n>\n> - 如果变量是左值，那么它作为其他函数的参数的时候也应该是 **左值**\n> - 如果变量是右值，那么它作为其他函数的参数的时候也应该是 **右值**\n\n```cpp\ntemplate <typename T>\nvoid func(T t) {\n    cout << \"in func\" << endl;\n}\n\ntemplate <typename T>\nvoid relay(T&& t) {\n    cout << \"in relay\" << endl;\n    func(t);\n}\n\nint main() {\n    relay(Test());\n}\n```\n\n上面这个例子就是一个 **反例**。我们在传入 `func(t)` 的时候，其实调用了 **拷贝构造函数** (因为编译器把 **t** 当做了一个 **左值**)\n\n> `std::forward<T>()` ，能够保留参数的左右值类型\n\n### Value Category\n\n不止左值右值那么简单\n\n> Cpp reference:\n>\n> Each C++ [expression](https://en.cppreference.com/w/cpp/language/expressions) (an operator with its operands, a literal, a variable name, etc.) is characterized by two independent properties: a *type* and a *value category*. Each expression has some non-reference type, and each expression belongs to exactly one of the three primary value categories: *prvalue*, *xvalue*, and *lvalue*.\n\n\n\n","source":"_posts/c-新特性.md","raw":"---\ntitle: c++新特性\ndate: 2020-01-15 10:14:27\ntags: 整理\ndescription: 虽说是新特性，但是C++ 11 & 14 已经推出了将近10年了.这次就好好整理一下\ncover_img: https://images.unsplash.com/photo-1565433435379-877a403f0f09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80\ncover: https://images.unsplash.com/photo-1565433435379-877a403f0f09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80\nfeature_img: https://images.unsplash.com/photo-1534972195531-d756b9bfa9f2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\ncoverImg: https://images.unsplash.com/photo-1565433435379-877a403f0f09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80\ntop_img: https://images.unsplash.com/photo-1565433435379-877a403f0f09?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80\n---\n\n## What’s new in C++ 11?\n\n###  storage duration specifier\n\n多个C++版本都对变量存储时间的定义有严格的说明\n\n- `auto` - *automatic* storage duration.\n\n- `register` - *automatic* storage duration. Also hints to the compiler to place the object in the processor's register. (deprecated) ——*since C++ 17*\n\n- `static` - *static* or *thread* storage duration and *internal* linkage\n\n- `extern` - *static* or *thread* storage duration and *external* linkage.\n\n- `thread_local` - *thread* storage duration\n\n  The `thread_local` keyword is only allowed for objects declared at namespace scope, objects declared at block scope, and static data members. It indicates that the object has **thread storage duration**. It can be combined with `static` or `extern` to specify internal or external linkage (except for static data members which always have external linkage), respectively, but that additional `static` doesn't affect the storage duration.\n\n- `mutable` - does not affect storage duration or linkage\n\n  注意：`mutable` 主要是标识 **const对象** 中某些可变的成员，实现了从二进制的物理 **const** 到逻辑 **const** (外观不变)\n\n### Variadic templates\n\n可变类模板，在 `c++ reference` 里面以 *parameter pack* 来代替\n\n```cpp\ntemplate<class... Types>\t\t\t//class ... Types 是一个 pack 的声明\t\nvoid f(Types... args) {}\t\t\t//Types... args 是\n```\n\n#### Pack Expansion\n\n- `&args...` 代表的是参数扩展\n- `&args`代表的是 *pack pattern* 本身\n\n### Move semantics\n\n> **凡是取地址（`&`）操作可以成功的都是左值，其余都是右值**\n>\n> - 等号左边的不一定是左值——可以通过操作符重载来让左部变成 **右值**\n\n#### 右值引用\n\n我们之前常见的都是 **左值引用**，指的是我们只能够将 **左值** 赋给一个引用。\n\n-  `int& a = 1` 就是非法的。而我们也可以 `int const& i = 42;` 来进行一个 *tricky* 的躲避\n\n  在 `c++11`中允许了右值引用的出现\n```\nint&& a = 3;\n```\n\n#### 移动语义\n\n我们在进行 `Test(const Test& test)` 拷贝构造函数的执行过程中，会造成很多的拷贝浪费。当单独的一次拷贝构造函数 (特别是对指针数组这些资源)过程消耗特别大的时候，对于性能来说是很低的。\n\n那么 `c++11`标准给出了 **移动拷贝构造函数** 和 **移动赋值操作符重载**。此外，还支持 `std::move()`来强制性让 **左值转化为右值**\n\n#### 完美转发\n\n我们想要实现\n\n> 多级函数调用过程中\n>\n> - 如果变量是左值，那么它作为其他函数的参数的时候也应该是 **左值**\n> - 如果变量是右值，那么它作为其他函数的参数的时候也应该是 **右值**\n\n```cpp\ntemplate <typename T>\nvoid func(T t) {\n    cout << \"in func\" << endl;\n}\n\ntemplate <typename T>\nvoid relay(T&& t) {\n    cout << \"in relay\" << endl;\n    func(t);\n}\n\nint main() {\n    relay(Test());\n}\n```\n\n上面这个例子就是一个 **反例**。我们在传入 `func(t)` 的时候，其实调用了 **拷贝构造函数** (因为编译器把 **t** 当做了一个 **左值**)\n\n> `std::forward<T>()` ，能够保留参数的左右值类型\n\n### Value Category\n\n不止左值右值那么简单\n\n> Cpp reference:\n>\n> Each C++ [expression](https://en.cppreference.com/w/cpp/language/expressions) (an operator with its operands, a literal, a variable name, etc.) is characterized by two independent properties: a *type* and a *value category*. Each expression has some non-reference type, and each expression belongs to exactly one of the three primary value categories: *prvalue*, *xvalue*, and *lvalue*.\n\n\n\n","slug":"c-新特性","published":1,"updated":"2020-10-21T10:39:07.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi14000ex8me42hnfko3","content":"<h2 id=\"What’s-new-in-C-11\"><a href=\"#What’s-new-in-C-11\" class=\"headerlink\" title=\"What’s new in C++ 11?\"></a>What’s new in C++ 11?</h2><h3 id=\"storage-duration-specifier\"><a href=\"#storage-duration-specifier\" class=\"headerlink\" title=\"storage duration specifier\"></a>storage duration specifier</h3><p>多个C++版本都对变量存储时间的定义有严格的说明</p>\n<ul>\n<li><p><code>auto</code> - <em>automatic</em> storage duration.</p>\n</li>\n<li><p><code>register</code> - <em>automatic</em> storage duration. Also hints to the compiler to place the object in the processor’s register. (deprecated) ——<em>since C++ 17</em></p>\n</li>\n<li><p><code>static</code> - <em>static</em> or <em>thread</em> storage duration and <em>internal</em> linkage</p>\n</li>\n<li><p><code>extern</code> - <em>static</em> or <em>thread</em> storage duration and <em>external</em> linkage.</p>\n</li>\n<li><p><code>thread_local</code> - <em>thread</em> storage duration</p>\n<p>The <code>thread_local</code> keyword is only allowed for objects declared at namespace scope, objects declared at block scope, and static data members. It indicates that the object has <strong>thread storage duration</strong>. It can be combined with <code>static</code> or <code>extern</code> to specify internal or external linkage (except for static data members which always have external linkage), respectively, but that additional <code>static</code> doesn’t affect the storage duration.</p>\n</li>\n<li><p><code>mutable</code> - does not affect storage duration or linkage</p>\n<p>注意：<code>mutable</code> 主要是标识 <strong>const对象</strong> 中某些可变的成员，实现了从二进制的物理 <strong>const</strong> 到逻辑 <strong>const</strong> (外观不变)</p>\n</li>\n</ul>\n<h3 id=\"Variadic-templates\"><a href=\"#Variadic-templates\" class=\"headerlink\" title=\"Variadic templates\"></a>Variadic templates</h3><p>可变类模板，在 <code>c++ reference</code> 里面以 <em>parameter pack</em> 来代替</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Types<span class=\"token operator\">></span>            <span class=\"token comment\" spellcheck=\"true\">//class ... Types 是一个 pack 的声明    </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>Types<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">//Types... args 是</span></code></pre>\n<h4 id=\"Pack-Expansion\"><a href=\"#Pack-Expansion\" class=\"headerlink\" title=\"Pack Expansion\"></a>Pack Expansion</h4><ul>\n<li><code>&amp;args...</code> 代表的是参数扩展</li>\n<li><code>&amp;args</code>代表的是 <em>pack pattern</em> 本身</li>\n</ul>\n<h3 id=\"Move-semantics\"><a href=\"#Move-semantics\" class=\"headerlink\" title=\"Move semantics\"></a>Move semantics</h3><blockquote>\n<p><strong>凡是取地址（<code>&amp;</code>）操作可以成功的都是左值，其余都是右值</strong></p>\n<ul>\n<li>等号左边的不一定是左值——可以通过操作符重载来让左部变成 <strong>右值</strong></li>\n</ul>\n</blockquote>\n<h4 id=\"右值引用\"><a href=\"#右值引用\" class=\"headerlink\" title=\"右值引用\"></a>右值引用</h4><p>我们之前常见的都是 <strong>左值引用</strong>，指的是我们只能够将 <strong>左值</strong> 赋给一个引用。</p>\n<ul>\n<li><p><code>int&amp; a = 1</code> 就是非法的。而我们也可以 <code>int const&amp; i = 42;</code> 来进行一个 <em>tricky</em> 的躲避</p>\n<p>在 <code>c++11</code>中允许了右值引用的出现</p>\n<pre><code>int&amp;&amp; a = 3;</code></pre>\n</li>\n</ul>\n<h4 id=\"移动语义\"><a href=\"#移动语义\" class=\"headerlink\" title=\"移动语义\"></a>移动语义</h4><p>我们在进行 <code>Test(const Test&amp; test)</code> 拷贝构造函数的执行过程中，会造成很多的拷贝浪费。当单独的一次拷贝构造函数 (特别是对指针数组这些资源)过程消耗特别大的时候，对于性能来说是很低的。</p>\n<p>那么 <code>c++11</code>标准给出了 <strong>移动拷贝构造函数</strong> 和 <strong>移动赋值操作符重载</strong>。此外，还支持 <code>std::move()</code>来强制性让 <strong>左值转化为右值</strong></p>\n<h4 id=\"完美转发\"><a href=\"#完美转发\" class=\"headerlink\" title=\"完美转发\"></a>完美转发</h4><p>我们想要实现</p>\n<blockquote>\n<p>多级函数调用过程中</p>\n<ul>\n<li>如果变量是左值，那么它作为其他函数的参数的时候也应该是 <strong>左值</strong></li>\n<li>如果变量是右值，那么它作为其他函数的参数的时候也应该是 <strong>右值</strong></li>\n</ul>\n</blockquote>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>T t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"in func\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">relay</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"in relay\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">relay</span><span class=\"token punctuation\">(</span><span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>上面这个例子就是一个 <strong>反例</strong>。我们在传入 <code>func(t)</code> 的时候，其实调用了 <strong>拷贝构造函数</strong> (因为编译器把 <strong>t</strong> 当做了一个 <strong>左值</strong>)</p>\n<blockquote>\n<p><code>std::forward&lt;T&gt;()</code> ，能够保留参数的左右值类型</p>\n</blockquote>\n<h3 id=\"Value-Category\"><a href=\"#Value-Category\" class=\"headerlink\" title=\"Value Category\"></a>Value Category</h3><p>不止左值右值那么简单</p>\n<blockquote>\n<p>Cpp reference:</p>\n<p>Each C++ <a href=\"https://en.cppreference.com/w/cpp/language/expressions\">expression</a> (an operator with its operands, a literal, a variable name, etc.) is characterized by two independent properties: a <em>type</em> and a <em>value category</em>. Each expression has some non-reference type, and each expression belongs to exactly one of the three primary value categories: <em>prvalue</em>, <em>xvalue</em>, and <em>lvalue</em>.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What’s-new-in-C-11\"><a href=\"#What’s-new-in-C-11\" class=\"headerlink\" title=\"What’s new in C++ 11?\"></a>What’s new in C++ 11?</h2><h3 id=\"storage-duration-specifier\"><a href=\"#storage-duration-specifier\" class=\"headerlink\" title=\"storage duration specifier\"></a>storage duration specifier</h3><p>多个C++版本都对变量存储时间的定义有严格的说明</p>\n<ul>\n<li><p><code>auto</code> - <em>automatic</em> storage duration.</p>\n</li>\n<li><p><code>register</code> - <em>automatic</em> storage duration. Also hints to the compiler to place the object in the processor’s register. (deprecated) ——<em>since C++ 17</em></p>\n</li>\n<li><p><code>static</code> - <em>static</em> or <em>thread</em> storage duration and <em>internal</em> linkage</p>\n</li>\n<li><p><code>extern</code> - <em>static</em> or <em>thread</em> storage duration and <em>external</em> linkage.</p>\n</li>\n<li><p><code>thread_local</code> - <em>thread</em> storage duration</p>\n<p>The <code>thread_local</code> keyword is only allowed for objects declared at namespace scope, objects declared at block scope, and static data members. It indicates that the object has <strong>thread storage duration</strong>. It can be combined with <code>static</code> or <code>extern</code> to specify internal or external linkage (except for static data members which always have external linkage), respectively, but that additional <code>static</code> doesn’t affect the storage duration.</p>\n</li>\n<li><p><code>mutable</code> - does not affect storage duration or linkage</p>\n<p>注意：<code>mutable</code> 主要是标识 <strong>const对象</strong> 中某些可变的成员，实现了从二进制的物理 <strong>const</strong> 到逻辑 <strong>const</strong> (外观不变)</p>\n</li>\n</ul>\n<h3 id=\"Variadic-templates\"><a href=\"#Variadic-templates\" class=\"headerlink\" title=\"Variadic templates\"></a>Variadic templates</h3><p>可变类模板，在 <code>c++ reference</code> 里面以 <em>parameter pack</em> 来代替</p>\n<pre><code class=\"cpp\">template&lt;class... Types&gt;            //class ... Types 是一个 pack 的声明    \nvoid f(Types... args) &#123;&#125;            //Types... args 是</code></pre>\n<h4 id=\"Pack-Expansion\"><a href=\"#Pack-Expansion\" class=\"headerlink\" title=\"Pack Expansion\"></a>Pack Expansion</h4><ul>\n<li><code>&amp;args...</code> 代表的是参数扩展</li>\n<li><code>&amp;args</code>代表的是 <em>pack pattern</em> 本身</li>\n</ul>\n<h3 id=\"Move-semantics\"><a href=\"#Move-semantics\" class=\"headerlink\" title=\"Move semantics\"></a>Move semantics</h3><blockquote>\n<p><strong>凡是取地址（<code>&amp;</code>）操作可以成功的都是左值，其余都是右值</strong></p>\n<ul>\n<li>等号左边的不一定是左值——可以通过操作符重载来让左部变成 <strong>右值</strong></li>\n</ul>\n</blockquote>\n<h4 id=\"右值引用\"><a href=\"#右值引用\" class=\"headerlink\" title=\"右值引用\"></a>右值引用</h4><p>我们之前常见的都是 <strong>左值引用</strong>，指的是我们只能够将 <strong>左值</strong> 赋给一个引用。</p>\n<ul>\n<li><p><code>int&amp; a = 1</code> 就是非法的。而我们也可以 <code>int const&amp; i = 42;</code> 来进行一个 <em>tricky</em> 的躲避</p>\n<p>在 <code>c++11</code>中允许了右值引用的出现</p>\n<pre><code>int&amp;&amp; a = 3;</code></pre>\n</li>\n</ul>\n<h4 id=\"移动语义\"><a href=\"#移动语义\" class=\"headerlink\" title=\"移动语义\"></a>移动语义</h4><p>我们在进行 <code>Test(const Test&amp; test)</code> 拷贝构造函数的执行过程中，会造成很多的拷贝浪费。当单独的一次拷贝构造函数 (特别是对指针数组这些资源)过程消耗特别大的时候，对于性能来说是很低的。</p>\n<p>那么 <code>c++11</code>标准给出了 <strong>移动拷贝构造函数</strong> 和 <strong>移动赋值操作符重载</strong>。此外，还支持 <code>std::move()</code>来强制性让 <strong>左值转化为右值</strong></p>\n<h4 id=\"完美转发\"><a href=\"#完美转发\" class=\"headerlink\" title=\"完美转发\"></a>完美转发</h4><p>我们想要实现</p>\n<blockquote>\n<p>多级函数调用过程中</p>\n<ul>\n<li>如果变量是左值，那么它作为其他函数的参数的时候也应该是 <strong>左值</strong></li>\n<li>如果变量是右值，那么它作为其他函数的参数的时候也应该是 <strong>右值</strong></li>\n</ul>\n</blockquote>\n<pre><code class=\"cpp\">template &lt;typename T&gt;\nvoid func(T t) &#123;\n    cout &lt;&lt; &quot;in func&quot; &lt;&lt; endl;\n&#125;\n\ntemplate &lt;typename T&gt;\nvoid relay(T&amp;&amp; t) &#123;\n    cout &lt;&lt; &quot;in relay&quot; &lt;&lt; endl;\n    func(t);\n&#125;\n\nint main() &#123;\n    relay(Test());\n&#125;</code></pre>\n<p>上面这个例子就是一个 <strong>反例</strong>。我们在传入 <code>func(t)</code> 的时候，其实调用了 <strong>拷贝构造函数</strong> (因为编译器把 <strong>t</strong> 当做了一个 <strong>左值</strong>)</p>\n<blockquote>\n<p><code>std::forward&lt;T&gt;()</code> ，能够保留参数的左右值类型</p>\n</blockquote>\n<h3 id=\"Value-Category\"><a href=\"#Value-Category\" class=\"headerlink\" title=\"Value Category\"></a>Value Category</h3><p>不止左值右值那么简单</p>\n<blockquote>\n<p>Cpp reference:</p>\n<p>Each C++ <a href=\"https://en.cppreference.com/w/cpp/language/expressions\">expression</a> (an operator with its operands, a literal, a variable name, etc.) is characterized by two independent properties: a <em>type</em> and a <em>value category</em>. Each expression has some non-reference type, and each expression belongs to exactly one of the three primary value categories: <em>prvalue</em>, <em>xvalue</em>, and <em>lvalue</em>.</p>\n</blockquote>\n"},{"title":"TCP-IP-阅读笔记-2 加密算法","date":"2020-02-17T11:50:35.000Z","cover_img":"https://images.unsplash.com/photo-1566664345779-062ed10879e0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1267&q=80","feature_img":"https://images.unsplash.com/photo-1581893106728-1e2197903b0a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80","description":null,"keywords":null,"_content":"\n## 从HTTPs说起\n\n现实中和加密有关的网络攻击可以大致分为两种：**被动攻击**和 **主动攻击**。其中被动指的是攻击者窃听数据，信息传输双方很可能不知道攻击者的存在；而主动攻击更多的就是数据的伪造，直接导致信息传输中的数据改变。\n\n我们常见的数据传输有如下\n\n### 对称加密\n\n指的就是加、解密使用的同是一串密钥，所以被称做对称加密。对称加密只有一个密钥作为私钥。\n常见的对称加密算法：DES，AES等。\n\n一方通过密钥将信息加密后，把密文传给另一方，另一方通过这个相同的密钥将密文解密，转换成可以理解的明文。他们之间的关系如下：\n\n```\n明文 <-> 密钥 <-> 密文\n```\n\n这样的一种信息传输方式虽然**高效**，但是非常容易被第三方获取到密钥。一旦密钥泄露，那么被动攻击和主动攻击就都有可能。\n\n### 非对称加密\n\n每个人生成一个“私钥-公钥”对\n\n> 使用私钥加密的信息，只能由该私钥对应的公钥才能解密，使用公钥加密的信息，只能由该公钥对应的私钥才能解密\n\n```\n然后可以把你的public key分发给想给你传密文的用户，然后用户使用该public key加密过得密文，只有使用你的private key才能解密\n```\n\n简而言之，每一方自己生成 *private-public* 对，私钥由自己所有，而公钥可以自由地进行分享。通过这种方式进行的数据传输，相比之前的对称加密明显要安全很多——第三方在不知道私钥的情况下，无法窃听到传输的明文内容\n\n但这种方式无法避免**主动攻击**，也就是说，如果第三方在中间截获了某一方(**A**)的公钥，随后将自己的公钥进行替换 (美其名曰**偷梁换柱**)，让另一方(**B**)用 **假的** 公钥进行数据加密，那么这样第三方就可以轻松获取到**B**发送的信息；同时也可以往他们其中的某一方进行虚假数据的传输\n\n### HTTPs协议出场\n\n> 在我个人的理解当中，https兼并了对称加密和非对称加密，通过 **三对随机数** 来进行协商，随后实现 **每一次交互都可以生成不同的密钥条件下的对称加密传输**\n>\n\n 加粗的句话略有点绕口，我们慢慢说开来。\n\n在HTTPs下，我们的研究对象从原来的两个，增加另一个第三方——**证书(颁发者)**。我们可以简单地想成另外一对公钥私钥。那么现在我们就有了三对公钥和私钥，接下来的工作就是依据某一个协议来利用好这三对。\n\n#### 准备工作\n\n假定证书一方足够可靠 (也会出现证书造假的不安全情况发生，这里不提)，另外两方我们设定为**服务端**和**客户端**。\n\n- 对于服务端和客户端，都可以获取到证书的**公钥**\n- 服务端需要在协商之前 (连接建立之前)，将自己的公钥发给证书一方，如果服务端可以进行认证，那么服务端可以收到 **由证书方的私钥加密过后的公钥**，如下图：\n\n<img src=\"https://showme.codes/assets/images/2017-2-20-292372-f3dd4b7370df950e.png\" alt=\"第一版数字证书的内容\"  />\n\n#### 协商\n\n这样一来，我们的准备工作也就差不多了。那么之前那个密钥协商过程是如何进行的呢？\n\n- 首先进行常规的 TCP 三次握手工作\n- SSL一层建立在 TCP之上，HTTP之下。三次握手结束之后，**客户端** 发送一个 `client hello` 给服务端，其中包含了如下内容：\n  - 可支持的加密算法和版本\n  - 客户端生成的第一个随机数 **random1**\n\n- **服务端** 收到信息之后，需要验证是否兼容 **加密算法和版本** (不兼容就不能继续进行接下来的协商了)；若兼容，那么服务端生成第二个随机数 **random2** ，并且把我们之前服务端向证书机构加密过后的公钥也一起发送给 **客户端**。称这一步为 `serverhello`\n- **客户端** 需要先对服务端进行一下身份验证，在 CA 中验证合法性。验证通过之后，就可以使用证书颁发者的公钥，解密**得到服务端的公钥**。随后，客户端生成第三个随机数 **random3** ，使用服务端的公钥进行加密，再送回给服务端，我们称这个密文为 `PreMaster Key`\n- 服务端可以用自己的私钥，解密 `PreMaster Key` ， 得到第三个随机数。至此，三个随机数、此次HTTPs交互的加密算法，在两边都已经协商完成。只需要根据`加密算法 + 三个随机数`共同生成一个密钥，两方就可以得到一致的对称密钥\n- 此后的传输，直接可以使用该对称密钥进行加密解密\n\n#### 更多的思考\n\n> 为什么需要三个随机数？\n>\n> 保证每一次交互 (http连接) 之初生成的密钥具有随机性(加密算法可变，三个随机数可变)，那么居心叵测之人就无法得到密钥和加密算法内容","source":"_posts/TCP-IP-阅读笔记-2 加密.md","raw":"---\ntitle: TCP-IP-阅读笔记-2 加密算法\ndate: 2020-02-17 19:50:35\ntags: 笔记\ncover_img: https://images.unsplash.com/photo-1566664345779-062ed10879e0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1267&q=80\nfeature_img: https://images.unsplash.com/photo-1581893106728-1e2197903b0a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80\ndescription:\nkeywords:\n---\n\n## 从HTTPs说起\n\n现实中和加密有关的网络攻击可以大致分为两种：**被动攻击**和 **主动攻击**。其中被动指的是攻击者窃听数据，信息传输双方很可能不知道攻击者的存在；而主动攻击更多的就是数据的伪造，直接导致信息传输中的数据改变。\n\n我们常见的数据传输有如下\n\n### 对称加密\n\n指的就是加、解密使用的同是一串密钥，所以被称做对称加密。对称加密只有一个密钥作为私钥。\n常见的对称加密算法：DES，AES等。\n\n一方通过密钥将信息加密后，把密文传给另一方，另一方通过这个相同的密钥将密文解密，转换成可以理解的明文。他们之间的关系如下：\n\n```\n明文 <-> 密钥 <-> 密文\n```\n\n这样的一种信息传输方式虽然**高效**，但是非常容易被第三方获取到密钥。一旦密钥泄露，那么被动攻击和主动攻击就都有可能。\n\n### 非对称加密\n\n每个人生成一个“私钥-公钥”对\n\n> 使用私钥加密的信息，只能由该私钥对应的公钥才能解密，使用公钥加密的信息，只能由该公钥对应的私钥才能解密\n\n```\n然后可以把你的public key分发给想给你传密文的用户，然后用户使用该public key加密过得密文，只有使用你的private key才能解密\n```\n\n简而言之，每一方自己生成 *private-public* 对，私钥由自己所有，而公钥可以自由地进行分享。通过这种方式进行的数据传输，相比之前的对称加密明显要安全很多——第三方在不知道私钥的情况下，无法窃听到传输的明文内容\n\n但这种方式无法避免**主动攻击**，也就是说，如果第三方在中间截获了某一方(**A**)的公钥，随后将自己的公钥进行替换 (美其名曰**偷梁换柱**)，让另一方(**B**)用 **假的** 公钥进行数据加密，那么这样第三方就可以轻松获取到**B**发送的信息；同时也可以往他们其中的某一方进行虚假数据的传输\n\n### HTTPs协议出场\n\n> 在我个人的理解当中，https兼并了对称加密和非对称加密，通过 **三对随机数** 来进行协商，随后实现 **每一次交互都可以生成不同的密钥条件下的对称加密传输**\n>\n\n 加粗的句话略有点绕口，我们慢慢说开来。\n\n在HTTPs下，我们的研究对象从原来的两个，增加另一个第三方——**证书(颁发者)**。我们可以简单地想成另外一对公钥私钥。那么现在我们就有了三对公钥和私钥，接下来的工作就是依据某一个协议来利用好这三对。\n\n#### 准备工作\n\n假定证书一方足够可靠 (也会出现证书造假的不安全情况发生，这里不提)，另外两方我们设定为**服务端**和**客户端**。\n\n- 对于服务端和客户端，都可以获取到证书的**公钥**\n- 服务端需要在协商之前 (连接建立之前)，将自己的公钥发给证书一方，如果服务端可以进行认证，那么服务端可以收到 **由证书方的私钥加密过后的公钥**，如下图：\n\n<img src=\"https://showme.codes/assets/images/2017-2-20-292372-f3dd4b7370df950e.png\" alt=\"第一版数字证书的内容\"  />\n\n#### 协商\n\n这样一来，我们的准备工作也就差不多了。那么之前那个密钥协商过程是如何进行的呢？\n\n- 首先进行常规的 TCP 三次握手工作\n- SSL一层建立在 TCP之上，HTTP之下。三次握手结束之后，**客户端** 发送一个 `client hello` 给服务端，其中包含了如下内容：\n  - 可支持的加密算法和版本\n  - 客户端生成的第一个随机数 **random1**\n\n- **服务端** 收到信息之后，需要验证是否兼容 **加密算法和版本** (不兼容就不能继续进行接下来的协商了)；若兼容，那么服务端生成第二个随机数 **random2** ，并且把我们之前服务端向证书机构加密过后的公钥也一起发送给 **客户端**。称这一步为 `serverhello`\n- **客户端** 需要先对服务端进行一下身份验证，在 CA 中验证合法性。验证通过之后，就可以使用证书颁发者的公钥，解密**得到服务端的公钥**。随后，客户端生成第三个随机数 **random3** ，使用服务端的公钥进行加密，再送回给服务端，我们称这个密文为 `PreMaster Key`\n- 服务端可以用自己的私钥，解密 `PreMaster Key` ， 得到第三个随机数。至此，三个随机数、此次HTTPs交互的加密算法，在两边都已经协商完成。只需要根据`加密算法 + 三个随机数`共同生成一个密钥，两方就可以得到一致的对称密钥\n- 此后的传输，直接可以使用该对称密钥进行加密解密\n\n#### 更多的思考\n\n> 为什么需要三个随机数？\n>\n> 保证每一次交互 (http连接) 之初生成的密钥具有随机性(加密算法可变，三个随机数可变)，那么居心叵测之人就无法得到密钥和加密算法内容","slug":"TCP-IP-阅读笔记-2 加密","published":1,"updated":"2020-10-19T09:47:13.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi15000fx8me83ci1thw","content":"<h2 id=\"从HTTPs说起\"><a href=\"#从HTTPs说起\" class=\"headerlink\" title=\"从HTTPs说起\"></a>从HTTPs说起</h2><p>现实中和加密有关的网络攻击可以大致分为两种：<strong>被动攻击</strong>和 <strong>主动攻击</strong>。其中被动指的是攻击者窃听数据，信息传输双方很可能不知道攻击者的存在；而主动攻击更多的就是数据的伪造，直接导致信息传输中的数据改变。</p>\n<p>我们常见的数据传输有如下</p>\n<h3 id=\"对称加密\"><a href=\"#对称加密\" class=\"headerlink\" title=\"对称加密\"></a>对称加密</h3><p>指的就是加、解密使用的同是一串密钥，所以被称做对称加密。对称加密只有一个密钥作为私钥。<br>常见的对称加密算法：DES，AES等。</p>\n<p>一方通过密钥将信息加密后，把密文传给另一方，另一方通过这个相同的密钥将密文解密，转换成可以理解的明文。他们之间的关系如下：</p>\n<pre><code>明文 &lt;-&gt; 密钥 &lt;-&gt; 密文</code></pre>\n<p>这样的一种信息传输方式虽然<strong>高效</strong>，但是非常容易被第三方获取到密钥。一旦密钥泄露，那么被动攻击和主动攻击就都有可能。</p>\n<h3 id=\"非对称加密\"><a href=\"#非对称加密\" class=\"headerlink\" title=\"非对称加密\"></a>非对称加密</h3><p>每个人生成一个“私钥-公钥”对</p>\n<blockquote>\n<p>使用私钥加密的信息，只能由该私钥对应的公钥才能解密，使用公钥加密的信息，只能由该公钥对应的私钥才能解密</p>\n</blockquote>\n<pre><code>然后可以把你的public key分发给想给你传密文的用户，然后用户使用该public key加密过得密文，只有使用你的private key才能解密</code></pre>\n<p>简而言之，每一方自己生成 <em>private-public</em> 对，私钥由自己所有，而公钥可以自由地进行分享。通过这种方式进行的数据传输，相比之前的对称加密明显要安全很多——第三方在不知道私钥的情况下，无法窃听到传输的明文内容</p>\n<p>但这种方式无法避免<strong>主动攻击</strong>，也就是说，如果第三方在中间截获了某一方(<strong>A</strong>)的公钥，随后将自己的公钥进行替换 (美其名曰<strong>偷梁换柱</strong>)，让另一方(<strong>B</strong>)用 <strong>假的</strong> 公钥进行数据加密，那么这样第三方就可以轻松获取到<strong>B</strong>发送的信息；同时也可以往他们其中的某一方进行虚假数据的传输</p>\n<h3 id=\"HTTPs协议出场\"><a href=\"#HTTPs协议出场\" class=\"headerlink\" title=\"HTTPs协议出场\"></a>HTTPs协议出场</h3><blockquote>\n<p>在我个人的理解当中，https兼并了对称加密和非对称加密，通过 <strong>三对随机数</strong> 来进行协商，随后实现 <strong>每一次交互都可以生成不同的密钥条件下的对称加密传输</strong></p>\n</blockquote>\n<p> 加粗的句话略有点绕口，我们慢慢说开来。</p>\n<p>在HTTPs下，我们的研究对象从原来的两个，增加另一个第三方——**证书(颁发者)**。我们可以简单地想成另外一对公钥私钥。那么现在我们就有了三对公钥和私钥，接下来的工作就是依据某一个协议来利用好这三对。</p>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>假定证书一方足够可靠 (也会出现证书造假的不安全情况发生，这里不提)，另外两方我们设定为<strong>服务端</strong>和<strong>客户端</strong>。</p>\n<ul>\n<li>对于服务端和客户端，都可以获取到证书的<strong>公钥</strong></li>\n<li>服务端需要在协商之前 (连接建立之前)，将自己的公钥发给证书一方，如果服务端可以进行认证，那么服务端可以收到 <strong>由证书方的私钥加密过后的公钥</strong>，如下图：</li>\n</ul>\n<img src=\"https://showme.codes/assets/images/2017-2-20-292372-f3dd4b7370df950e.png\" alt=\"第一版数字证书的内容\"  />\n\n<h4 id=\"协商\"><a href=\"#协商\" class=\"headerlink\" title=\"协商\"></a>协商</h4><p>这样一来，我们的准备工作也就差不多了。那么之前那个密钥协商过程是如何进行的呢？</p>\n<ul>\n<li><p>首先进行常规的 TCP 三次握手工作</p>\n</li>\n<li><p>SSL一层建立在 TCP之上，HTTP之下。三次握手结束之后，<strong>客户端</strong> 发送一个 <code>client hello</code> 给服务端，其中包含了如下内容：</p>\n<ul>\n<li>可支持的加密算法和版本</li>\n<li>客户端生成的第一个随机数 <strong>random1</strong></li>\n</ul>\n</li>\n<li><p><strong>服务端</strong> 收到信息之后，需要验证是否兼容 <strong>加密算法和版本</strong> (不兼容就不能继续进行接下来的协商了)；若兼容，那么服务端生成第二个随机数 <strong>random2</strong> ，并且把我们之前服务端向证书机构加密过后的公钥也一起发送给 <strong>客户端</strong>。称这一步为 <code>serverhello</code></p>\n</li>\n<li><p><strong>客户端</strong> 需要先对服务端进行一下身份验证，在 CA 中验证合法性。验证通过之后，就可以使用证书颁发者的公钥，解密<strong>得到服务端的公钥</strong>。随后，客户端生成第三个随机数 <strong>random3</strong> ，使用服务端的公钥进行加密，再送回给服务端，我们称这个密文为 <code>PreMaster Key</code></p>\n</li>\n<li><p>服务端可以用自己的私钥，解密 <code>PreMaster Key</code> ， 得到第三个随机数。至此，三个随机数、此次HTTPs交互的加密算法，在两边都已经协商完成。只需要根据<code>加密算法 + 三个随机数</code>共同生成一个密钥，两方就可以得到一致的对称密钥</p>\n</li>\n<li><p>此后的传输，直接可以使用该对称密钥进行加密解密</p>\n</li>\n</ul>\n<h4 id=\"更多的思考\"><a href=\"#更多的思考\" class=\"headerlink\" title=\"更多的思考\"></a>更多的思考</h4><blockquote>\n<p>为什么需要三个随机数？</p>\n<p>保证每一次交互 (http连接) 之初生成的密钥具有随机性(加密算法可变，三个随机数可变)，那么居心叵测之人就无法得到密钥和加密算法内容</p>\n</blockquote>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603060044864-9c8826fb35af?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","excerpt":"","more":"<h2 id=\"从HTTPs说起\"><a href=\"#从HTTPs说起\" class=\"headerlink\" title=\"从HTTPs说起\"></a>从HTTPs说起</h2><p>现实中和加密有关的网络攻击可以大致分为两种：<strong>被动攻击</strong>和 <strong>主动攻击</strong>。其中被动指的是攻击者窃听数据，信息传输双方很可能不知道攻击者的存在；而主动攻击更多的就是数据的伪造，直接导致信息传输中的数据改变。</p>\n<p>我们常见的数据传输有如下</p>\n<h3 id=\"对称加密\"><a href=\"#对称加密\" class=\"headerlink\" title=\"对称加密\"></a>对称加密</h3><p>指的就是加、解密使用的同是一串密钥，所以被称做对称加密。对称加密只有一个密钥作为私钥。<br>常见的对称加密算法：DES，AES等。</p>\n<p>一方通过密钥将信息加密后，把密文传给另一方，另一方通过这个相同的密钥将密文解密，转换成可以理解的明文。他们之间的关系如下：</p>\n<pre><code>明文 &lt;-&gt; 密钥 &lt;-&gt; 密文</code></pre>\n<p>这样的一种信息传输方式虽然<strong>高效</strong>，但是非常容易被第三方获取到密钥。一旦密钥泄露，那么被动攻击和主动攻击就都有可能。</p>\n<h3 id=\"非对称加密\"><a href=\"#非对称加密\" class=\"headerlink\" title=\"非对称加密\"></a>非对称加密</h3><p>每个人生成一个“私钥-公钥”对</p>\n<blockquote>\n<p>使用私钥加密的信息，只能由该私钥对应的公钥才能解密，使用公钥加密的信息，只能由该公钥对应的私钥才能解密</p>\n</blockquote>\n<pre><code>然后可以把你的public key分发给想给你传密文的用户，然后用户使用该public key加密过得密文，只有使用你的private key才能解密</code></pre>\n<p>简而言之，每一方自己生成 <em>private-public</em> 对，私钥由自己所有，而公钥可以自由地进行分享。通过这种方式进行的数据传输，相比之前的对称加密明显要安全很多——第三方在不知道私钥的情况下，无法窃听到传输的明文内容</p>\n<p>但这种方式无法避免<strong>主动攻击</strong>，也就是说，如果第三方在中间截获了某一方(<strong>A</strong>)的公钥，随后将自己的公钥进行替换 (美其名曰<strong>偷梁换柱</strong>)，让另一方(<strong>B</strong>)用 <strong>假的</strong> 公钥进行数据加密，那么这样第三方就可以轻松获取到<strong>B</strong>发送的信息；同时也可以往他们其中的某一方进行虚假数据的传输</p>\n<h3 id=\"HTTPs协议出场\"><a href=\"#HTTPs协议出场\" class=\"headerlink\" title=\"HTTPs协议出场\"></a>HTTPs协议出场</h3><blockquote>\n<p>在我个人的理解当中，https兼并了对称加密和非对称加密，通过 <strong>三对随机数</strong> 来进行协商，随后实现 <strong>每一次交互都可以生成不同的密钥条件下的对称加密传输</strong></p>\n</blockquote>\n<p> 加粗的句话略有点绕口，我们慢慢说开来。</p>\n<p>在HTTPs下，我们的研究对象从原来的两个，增加另一个第三方——**证书(颁发者)**。我们可以简单地想成另外一对公钥私钥。那么现在我们就有了三对公钥和私钥，接下来的工作就是依据某一个协议来利用好这三对。</p>\n<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>假定证书一方足够可靠 (也会出现证书造假的不安全情况发生，这里不提)，另外两方我们设定为<strong>服务端</strong>和<strong>客户端</strong>。</p>\n<ul>\n<li>对于服务端和客户端，都可以获取到证书的<strong>公钥</strong></li>\n<li>服务端需要在协商之前 (连接建立之前)，将自己的公钥发给证书一方，如果服务端可以进行认证，那么服务端可以收到 <strong>由证书方的私钥加密过后的公钥</strong>，如下图：</li>\n</ul>\n<img src=\"https://showme.codes/assets/images/2017-2-20-292372-f3dd4b7370df950e.png\" alt=\"第一版数字证书的内容\"  />\n\n<h4 id=\"协商\"><a href=\"#协商\" class=\"headerlink\" title=\"协商\"></a>协商</h4><p>这样一来，我们的准备工作也就差不多了。那么之前那个密钥协商过程是如何进行的呢？</p>\n<ul>\n<li><p>首先进行常规的 TCP 三次握手工作</p>\n</li>\n<li><p>SSL一层建立在 TCP之上，HTTP之下。三次握手结束之后，<strong>客户端</strong> 发送一个 <code>client hello</code> 给服务端，其中包含了如下内容：</p>\n<ul>\n<li>可支持的加密算法和版本</li>\n<li>客户端生成的第一个随机数 <strong>random1</strong></li>\n</ul>\n</li>\n<li><p><strong>服务端</strong> 收到信息之后，需要验证是否兼容 <strong>加密算法和版本</strong> (不兼容就不能继续进行接下来的协商了)；若兼容，那么服务端生成第二个随机数 <strong>random2</strong> ，并且把我们之前服务端向证书机构加密过后的公钥也一起发送给 <strong>客户端</strong>。称这一步为 <code>serverhello</code></p>\n</li>\n<li><p><strong>客户端</strong> 需要先对服务端进行一下身份验证，在 CA 中验证合法性。验证通过之后，就可以使用证书颁发者的公钥，解密<strong>得到服务端的公钥</strong>。随后，客户端生成第三个随机数 <strong>random3</strong> ，使用服务端的公钥进行加密，再送回给服务端，我们称这个密文为 <code>PreMaster Key</code></p>\n</li>\n<li><p>服务端可以用自己的私钥，解密 <code>PreMaster Key</code> ， 得到第三个随机数。至此，三个随机数、此次HTTPs交互的加密算法，在两边都已经协商完成。只需要根据<code>加密算法 + 三个随机数</code>共同生成一个密钥，两方就可以得到一致的对称密钥</p>\n</li>\n<li><p>此后的传输，直接可以使用该对称密钥进行加密解密</p>\n</li>\n</ul>\n<h4 id=\"更多的思考\"><a href=\"#更多的思考\" class=\"headerlink\" title=\"更多的思考\"></a>更多的思考</h4><blockquote>\n<p>为什么需要三个随机数？</p>\n<p>保证每一次交互 (http连接) 之初生成的密钥具有随机性(加密算法可变，三个随机数可变)，那么居心叵测之人就无法得到密钥和加密算法内容</p>\n</blockquote>\n"},{"title":"LC周赛 2019-10-05","date":"2019-10-08T01:57:04.000Z","description":"20191005周赛记录","cover_img":"https://images.unsplash.com/photo-1492366254240-43affaefc3e3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=602&q=80","feature_img":"https://images.unsplash.com/photo-1495539406979-bf61750d38ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","_content":"\n## 1. Play with Chips\n\n### 描述\n\nThere are some chips, and the i-th chip is at position `chips[i]`.\n\nYou can perform any of the two following types of moves **any number of times** (possibly zero) **on any chip**:\n\n- Move the `i`-th chip by 2 units to the left or to the right with a cost of **0**.\n- Move the `i`-th chip by 1 unit to the left or to the right with a cost of **1**.\n\nThere can be two or more chips at the same position initially.\n\nReturn the minimum cost needed to move all the chips to the same position (any position).\n\n### 思路 \n\n如果两个chip的位置相差为偶数, 则 `cost = 0`. 否则 `coust = 1 `\n\n我们预先获取chip的一个哈希来进行缓存, 之后遍历哈希中的每一个数, 作为 **目的地**.\n\n那么我们的问题就变成 ： 找出那一个 **目的地** , 使得 `cost` 最小即可\n\n```java\n    public int minCostToMoveChips(int[] chips) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : chips) {\n            set.add(num);\n        }\n        int min = Integer.MAX_VALUE;\n        for (int num : set) {\n            int sum = 0;\n            for (int chip : chips) {\n                int dis = Math.abs(num - chip);\n                sum += dis % 2;\n                if (sum > min) break;\n            }\n            min = Math.min(sum, min);\n        }\n        return min;\n    }\n```\n\n## 2. Longest Arithmetic Subsequence of Given Difference\n\n### 描述\n\nGiven an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.\n\n**Example 1:**\n\n```\nInput: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].\n```\n\n**Example 2:**\n\n```\nInput: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.\n```\n\n**Example 3:**\n\n```\nInput: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].\n```\n\n### 思路\n\n一开始很明显想到用 `DP` 来解决. 每一步前进的同时需要缓存下当前位置, 便于后续的查找\n\n我们缓存如下的内容：\n\n- 每一个数字和它所处可能位置 `Set` 的哈希映射\n- DP 数组，用于当前 `dp[i]` 的确定\n\n一开始就这样做了，但是 error 了一次. 原因就是这里的 dp 数组并不是单调上升，因为可能会出现中间断层的情况，例如 `[1,2,3,1,2,3,4]` , 中间的 `1` 位置就是断层的出现点. (之后一想，其实也可以通过自己的维护来进行避免，问题不大)\n\n最终代码如下\n\n```java\n public int longestSubsequence(int[] arr, int difference) {\n        int n = arr.length;\n        int[] dp = new int[n];\n        Map<Integer, Set<Integer>> map = new HashMap<>();\n        dp[0] = 1;\n        Set<Integer> set = new HashSet<>();\n        set.add(0);\n        map.put(arr[0], set);\n        for (int i = 1; i < n; ++i) {\n            if (!map.containsKey(arr[i])) {\n                set = new HashSet<>();\n                set.add(i);\n                map.put(arr[i], set);\n            } else {\n                set = map.get(arr[i]);\n                set.add(i);\n                map.put(arr[i], set);\n            }\n\n            int target = arr[i] - difference;\n            if (!map.containsKey(target)) { //不包含前一个数\n                dp[i] = 1;\n            } else {\n                set = map.get(target);\n                int maxLen = 0;\n                for (int num : set) {\n                    maxLen = Math.max(maxLen, dp[num]);\n                }\n                dp[i] = maxLen + 1;\n            }\n        }\n        int ans = 0;\n        for (int num : dp) {\n            ans = Math.max(num, ans);\n        }\n        return ans;\n    }\n```\n\n## 3. Path with Maximum Gold\n\n### 描述\n\nIn a gold mine `grid` of size `m * n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.\n\nReturn the maximum amount of gold you can collect under the conditions:\n\n- Every time you are located in a cell you will collect all the gold in that cell.\n- From your position you can walk one step to the left, right, up or down.\n- You can't visit the same cell more than once.\n- Never visit a cell with `0` gold.\n- You can start and stop collecting gold from **any** position in the grid that has some gold. \n\n**Example 1:**\n\n```\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.\n```\n\n**Example 2:**\n\n```\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.\n```\n\n### 思路\n\n很简单的 DFS 算法实现, 没什么好说的\n\n```java\npublic int getMaximumGold(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int max = 0;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] != 0) {\n                    max = Math.max(max, dfs(grid, new int[]{i, j}, 0));\n                }\n            }\n        }\n        return max;\n    }\n\n    private int dfs(int[][] grid, int[] startPos, int gold) {\n        int m = grid.length, n = grid[0].length;\n        int r = startPos[0], c = startPos[1];\n        if (r < 0 || c < 0 || r >= m || c >= n || grid[r][c] == 0) return gold;\n        gold += grid[r][c];\n        int[][] nums = new int[m][n];\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                nums[i][j] = grid[i][j];\n            }\n        }\n        nums[r][c] = 0;             //Get the gold\n        int a1 = dfs(nums, new int[]{r, c + 1}, gold);\n        int b1 = dfs(nums, new int[]{r, c - 1}, gold);\n        int c1 = dfs(nums, new int[]{r + 1, c}, gold);\n        int d1 = dfs(nums, new int[]{r - 1, c}, gold);\n        return Arrays.stream(new int[]{a1, b1, c1, d1}).max().getAsInt();\n    }\n```\n\n## 4. Count Vowels Permutation\n\n### 描述\n\nGiven an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\n\n- Each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\n- Each vowel `'a'` may only be followed by an `'e'`.\n- Each vowel `'e'` may only be followed by an `'a'` or an `'i'`.\n- Each vowel `'i'` **may not** be followed by another `'i'`.\n- Each vowel `'o'` may only be followed by an `'i'` or a `'u'`.\n- Each vowel `'u'` may only be followed by an `'a'.`\n\nSince the answer may be too large, return it modulo `10^9 + 7.`\n\n**Example 1:**\n\n```\nInput: n = 1\nOutput: 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".\n```\n\n**Example 2:**\n\n```\nInput: n = 2\nOutput: 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".\n```\n\n**Example 3:** \n\n```\nInput: n = 5\nOutput: 68\n```\n\n### 思路\n\n假定某一步的最末位中, ‘a’ , ‘e’ , ‘i’ , ‘o’ , ‘u’ 的个数分别是 a , e , i , o , u ，那么下一步末位的个数就分别是 `u+e+i`, `a + i`, `e + o` , `i` , `o +i` \n\n我这里用了一个hash来保存 (小声：这个hard题是简单题的赶脚233)\n\n```java\nclass Solution {\nprivate final long mod = 1_000_000_007;\n    public int countVowelPermutation(int n) {\n        Map<Character, Long> map = new HashMap<>();\n        map.put('a', 1L);\n        map.put('e', 1L);\n        map.put('i', 1L);\n        map.put('o', 1L);\n        map.put('u', 1L);\n        for (int i = 1; i < n; ++i) {\n            Map<Character, Long> tmp = new HashMap<>();\n            tmp.put('a', (map.get('u') + map.get('e') + map.get('i')) % mod);\n            tmp.put('e', (map.get('a') + map.get('i')) % mod);\n            tmp.put('i', (map.get('e') + map.get('o')) % mod);\n            tmp.put('o', (map.get('i')) % mod);\n            tmp.put('u', (map.get('o') + map.get('i')) % mod);\n\n            map = tmp;\n        }\n        return (int) (map.values().stream().reduce(Long::sum).get() % mod);\n    }\n}\n```\n\n## 结语\n\n这次周赛4个题目全部 AC , RANK  740","source":"_posts/leetcode-周赛20191005.md","raw":"---\ntitle: LC周赛 2019-10-05\ndate: 2019-10-08 09:57:04\ntags: \n  - competition\ncategories: \n  - 算法\ndescription: 20191005周赛记录\ncover_img: https://images.unsplash.com/photo-1492366254240-43affaefc3e3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=602&q=80\nfeature_img: https://images.unsplash.com/photo-1495539406979-bf61750d38ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\n---\n\n## 1. Play with Chips\n\n### 描述\n\nThere are some chips, and the i-th chip is at position `chips[i]`.\n\nYou can perform any of the two following types of moves **any number of times** (possibly zero) **on any chip**:\n\n- Move the `i`-th chip by 2 units to the left or to the right with a cost of **0**.\n- Move the `i`-th chip by 1 unit to the left or to the right with a cost of **1**.\n\nThere can be two or more chips at the same position initially.\n\nReturn the minimum cost needed to move all the chips to the same position (any position).\n\n### 思路 \n\n如果两个chip的位置相差为偶数, 则 `cost = 0`. 否则 `coust = 1 `\n\n我们预先获取chip的一个哈希来进行缓存, 之后遍历哈希中的每一个数, 作为 **目的地**.\n\n那么我们的问题就变成 ： 找出那一个 **目的地** , 使得 `cost` 最小即可\n\n```java\n    public int minCostToMoveChips(int[] chips) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : chips) {\n            set.add(num);\n        }\n        int min = Integer.MAX_VALUE;\n        for (int num : set) {\n            int sum = 0;\n            for (int chip : chips) {\n                int dis = Math.abs(num - chip);\n                sum += dis % 2;\n                if (sum > min) break;\n            }\n            min = Math.min(sum, min);\n        }\n        return min;\n    }\n```\n\n## 2. Longest Arithmetic Subsequence of Given Difference\n\n### 描述\n\nGiven an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.\n\n**Example 1:**\n\n```\nInput: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].\n```\n\n**Example 2:**\n\n```\nInput: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.\n```\n\n**Example 3:**\n\n```\nInput: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].\n```\n\n### 思路\n\n一开始很明显想到用 `DP` 来解决. 每一步前进的同时需要缓存下当前位置, 便于后续的查找\n\n我们缓存如下的内容：\n\n- 每一个数字和它所处可能位置 `Set` 的哈希映射\n- DP 数组，用于当前 `dp[i]` 的确定\n\n一开始就这样做了，但是 error 了一次. 原因就是这里的 dp 数组并不是单调上升，因为可能会出现中间断层的情况，例如 `[1,2,3,1,2,3,4]` , 中间的 `1` 位置就是断层的出现点. (之后一想，其实也可以通过自己的维护来进行避免，问题不大)\n\n最终代码如下\n\n```java\n public int longestSubsequence(int[] arr, int difference) {\n        int n = arr.length;\n        int[] dp = new int[n];\n        Map<Integer, Set<Integer>> map = new HashMap<>();\n        dp[0] = 1;\n        Set<Integer> set = new HashSet<>();\n        set.add(0);\n        map.put(arr[0], set);\n        for (int i = 1; i < n; ++i) {\n            if (!map.containsKey(arr[i])) {\n                set = new HashSet<>();\n                set.add(i);\n                map.put(arr[i], set);\n            } else {\n                set = map.get(arr[i]);\n                set.add(i);\n                map.put(arr[i], set);\n            }\n\n            int target = arr[i] - difference;\n            if (!map.containsKey(target)) { //不包含前一个数\n                dp[i] = 1;\n            } else {\n                set = map.get(target);\n                int maxLen = 0;\n                for (int num : set) {\n                    maxLen = Math.max(maxLen, dp[num]);\n                }\n                dp[i] = maxLen + 1;\n            }\n        }\n        int ans = 0;\n        for (int num : dp) {\n            ans = Math.max(num, ans);\n        }\n        return ans;\n    }\n```\n\n## 3. Path with Maximum Gold\n\n### 描述\n\nIn a gold mine `grid` of size `m * n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.\n\nReturn the maximum amount of gold you can collect under the conditions:\n\n- Every time you are located in a cell you will collect all the gold in that cell.\n- From your position you can walk one step to the left, right, up or down.\n- You can't visit the same cell more than once.\n- Never visit a cell with `0` gold.\n- You can start and stop collecting gold from **any** position in the grid that has some gold. \n\n**Example 1:**\n\n```\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.\n```\n\n**Example 2:**\n\n```\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.\n```\n\n### 思路\n\n很简单的 DFS 算法实现, 没什么好说的\n\n```java\npublic int getMaximumGold(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int max = 0;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] != 0) {\n                    max = Math.max(max, dfs(grid, new int[]{i, j}, 0));\n                }\n            }\n        }\n        return max;\n    }\n\n    private int dfs(int[][] grid, int[] startPos, int gold) {\n        int m = grid.length, n = grid[0].length;\n        int r = startPos[0], c = startPos[1];\n        if (r < 0 || c < 0 || r >= m || c >= n || grid[r][c] == 0) return gold;\n        gold += grid[r][c];\n        int[][] nums = new int[m][n];\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                nums[i][j] = grid[i][j];\n            }\n        }\n        nums[r][c] = 0;             //Get the gold\n        int a1 = dfs(nums, new int[]{r, c + 1}, gold);\n        int b1 = dfs(nums, new int[]{r, c - 1}, gold);\n        int c1 = dfs(nums, new int[]{r + 1, c}, gold);\n        int d1 = dfs(nums, new int[]{r - 1, c}, gold);\n        return Arrays.stream(new int[]{a1, b1, c1, d1}).max().getAsInt();\n    }\n```\n\n## 4. Count Vowels Permutation\n\n### 描述\n\nGiven an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\n\n- Each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\n- Each vowel `'a'` may only be followed by an `'e'`.\n- Each vowel `'e'` may only be followed by an `'a'` or an `'i'`.\n- Each vowel `'i'` **may not** be followed by another `'i'`.\n- Each vowel `'o'` may only be followed by an `'i'` or a `'u'`.\n- Each vowel `'u'` may only be followed by an `'a'.`\n\nSince the answer may be too large, return it modulo `10^9 + 7.`\n\n**Example 1:**\n\n```\nInput: n = 1\nOutput: 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".\n```\n\n**Example 2:**\n\n```\nInput: n = 2\nOutput: 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".\n```\n\n**Example 3:** \n\n```\nInput: n = 5\nOutput: 68\n```\n\n### 思路\n\n假定某一步的最末位中, ‘a’ , ‘e’ , ‘i’ , ‘o’ , ‘u’ 的个数分别是 a , e , i , o , u ，那么下一步末位的个数就分别是 `u+e+i`, `a + i`, `e + o` , `i` , `o +i` \n\n我这里用了一个hash来保存 (小声：这个hard题是简单题的赶脚233)\n\n```java\nclass Solution {\nprivate final long mod = 1_000_000_007;\n    public int countVowelPermutation(int n) {\n        Map<Character, Long> map = new HashMap<>();\n        map.put('a', 1L);\n        map.put('e', 1L);\n        map.put('i', 1L);\n        map.put('o', 1L);\n        map.put('u', 1L);\n        for (int i = 1; i < n; ++i) {\n            Map<Character, Long> tmp = new HashMap<>();\n            tmp.put('a', (map.get('u') + map.get('e') + map.get('i')) % mod);\n            tmp.put('e', (map.get('a') + map.get('i')) % mod);\n            tmp.put('i', (map.get('e') + map.get('o')) % mod);\n            tmp.put('o', (map.get('i')) % mod);\n            tmp.put('u', (map.get('o') + map.get('i')) % mod);\n\n            map = tmp;\n        }\n        return (int) (map.values().stream().reduce(Long::sum).get() % mod);\n    }\n}\n```\n\n## 结语\n\n这次周赛4个题目全部 AC , RANK  740","slug":"leetcode-周赛20191005","published":1,"updated":"2020-10-19T09:47:13.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi16000ix8me0sro8yg4","content":"<h2 id=\"1-Play-with-Chips\"><a href=\"#1-Play-with-Chips\" class=\"headerlink\" title=\"1. Play with Chips\"></a>1. Play with Chips</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>There are some chips, and the i-th chip is at position <code>chips[i]</code>.</p>\n<p>You can perform any of the two following types of moves <strong>any number of times</strong> (possibly zero) <strong>on any chip</strong>:</p>\n<ul>\n<li>Move the <code>i</code>-th chip by 2 units to the left or to the right with a cost of <strong>0</strong>.</li>\n<li>Move the <code>i</code>-th chip by 1 unit to the left or to the right with a cost of <strong>1</strong>.</li>\n</ul>\n<p>There can be two or more chips at the same position initially.</p>\n<p>Return the minimum cost needed to move all the chips to the same position (any position).</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>如果两个chip的位置相差为偶数, 则 <code>cost = 0</code>. 否则 <code>coust = 1 </code></p>\n<p>我们预先获取chip的一个哈希来进行缓存, 之后遍历哈希中的每一个数, 作为 <strong>目的地</strong>.</p>\n<p>那么我们的问题就变成 ： 找出那一个 <strong>目的地</strong> , 使得 <code>cost</code> 最小即可</p>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minCostToMoveChips</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chips<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Set<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> chips<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> Integer<span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> chip <span class=\"token operator\">:</span> chips<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> dis <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> chip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sum <span class=\"token operator\">+=</span> dis <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> min<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"2-Longest-Arithmetic-Subsequence-of-Given-Difference\"><a href=\"#2-Longest-Arithmetic-Subsequence-of-Given-Difference\" class=\"headerlink\" title=\"2. Longest Arithmetic Subsequence of Given Difference\"></a>2. Longest Arithmetic Subsequence of Given Difference</h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Given an integer array <code>arr</code> and an integer <code>difference</code>, return the length of the longest subsequence in <code>arr</code> which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals <code>difference</code>.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code>Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].</code></pre>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>一开始很明显想到用 <code>DP</code> 来解决. 每一步前进的同时需要缓存下当前位置, 便于后续的查找</p>\n<p>我们缓存如下的内容：</p>\n<ul>\n<li>每一个数字和它所处可能位置 <code>Set</code> 的哈希映射</li>\n<li>DP 数组，用于当前 <code>dp[i]</code> 的确定</li>\n</ul>\n<p>一开始就这样做了，但是 error 了一次. 原因就是这里的 dp 数组并不是单调上升，因为可能会出现中间断层的情况，例如 <code>[1,2,3,1,2,3,4]</code> , 中间的 <code>1</code> 位置就是断层的出现点. (之后一想，其实也可以通过自己的维护来进行避免，问题不大)</p>\n<p>最终代码如下</p>\n<pre class=\" language-java\"><code class=\"language-java\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">longestSubsequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> difference<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        Map<span class=\"token operator\">&lt;</span>Integer<span class=\"token punctuation\">,</span> Set<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">>></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        Set<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                set <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> difference<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//不包含前一个数</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                set <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> maxLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    maxLen <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxLen<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> maxLen <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> dp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            ans <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"3-Path-with-Maximum-Gold\"><a href=\"#3-Path-with-Maximum-Gold\" class=\"headerlink\" title=\"3. Path with Maximum Gold\"></a>3. Path with Maximum Gold</h2><h3 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>In a gold mine <code>grid</code> of size <code>m * n</code>, each cell in this mine has an integer representing the amount of gold in that cell, <code>0</code> if it is empty.</p>\n<p>Return the maximum amount of gold you can collect under the conditions:</p>\n<ul>\n<li>Every time you are located in a cell you will collect all the gold in that cell.</li>\n<li>From your position you can walk one step to the left, right, up or down.</li>\n<li>You can’t visit the same cell more than once.</li>\n<li>Never visit a cell with <code>0</code> gold.</li>\n<li>You can start and stop collecting gold from <strong>any</strong> position in the grid that has some gold. </li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -&gt; 8 -&gt; 7.</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7.</code></pre>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>很简单的 DFS 算法实现, 没什么好说的</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaximumGold</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>i<span class=\"token punctuation\">,</span> j<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> startPos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> gold<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> startPos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> startPos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> r <span class=\"token operator\">>=</span> m <span class=\"token operator\">||</span> c <span class=\"token operator\">>=</span> n <span class=\"token operator\">||</span> grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> gold<span class=\"token punctuation\">;</span>\n        gold <span class=\"token operator\">+=</span> grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">//Get the gold</span>\n        <span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>r<span class=\"token punctuation\">,</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> gold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b1 <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>r<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> gold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> gold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> d1 <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>r <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> gold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>a1<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> d1<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"4-Count-Vowels-Permutation\"><a href=\"#4-Count-Vowels-Permutation\" class=\"headerlink\" title=\"4. Count Vowels Permutation\"></a>4. Count Vowels Permutation</h2><h3 id=\"描述-3\"><a href=\"#描述-3\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Given an integer <code>n</code>, your task is to count how many strings of length <code>n</code> can be formed under the following rules:</p>\n<ul>\n<li>Each character is a lower case vowel (<code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>)</li>\n<li>Each vowel <code>&#39;a&#39;</code> may only be followed by an <code>&#39;e&#39;</code>.</li>\n<li>Each vowel <code>&#39;e&#39;</code> may only be followed by an <code>&#39;a&#39;</code> or an <code>&#39;i&#39;</code>.</li>\n<li>Each vowel <code>&#39;i&#39;</code> <strong>may not</strong> be followed by another <code>&#39;i&#39;</code>.</li>\n<li>Each vowel <code>&#39;o&#39;</code> may only be followed by an <code>&#39;i&#39;</code> or a <code>&#39;u&#39;</code>.</li>\n<li>Each vowel <code>&#39;u&#39;</code> may only be followed by an <code>&#39;a&#39;.</code></li>\n</ul>\n<p>Since the answer may be too large, return it modulo <code>10^9 + 7.</code></p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: n = 1\nOutput: 5\nExplanation: All possible strings are: &quot;a&quot;, &quot;e&quot;, &quot;i&quot; , &quot;o&quot; and &quot;u&quot;.</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: n = 2\nOutput: 10\nExplanation: All possible strings are: &quot;ae&quot;, &quot;ea&quot;, &quot;ei&quot;, &quot;ia&quot;, &quot;ie&quot;, &quot;io&quot;, &quot;iu&quot;, &quot;oi&quot;, &quot;ou&quot; and &quot;ua&quot;.</code></pre>\n<p><strong>Example 3:</strong> </p>\n<pre><code>Input: n = 5\nOutput: 68</code></pre>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>假定某一步的最末位中, ‘a’ , ‘e’ , ‘i’ , ‘o’ , ‘u’ 的个数分别是 a , e , i , o , u ，那么下一步末位的个数就分别是 <code>u+e+i</code>, <code>a + i</code>, <code>e + o</code> , <code>i</code> , <code>o +i</code> </p>\n<p>我这里用了一个hash来保存 (小声：这个hard题是简单题的赶脚233)</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> mod <span class=\"token operator\">=</span> 1_000_000_007<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">countVowelPermutation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Map<span class=\"token operator\">&lt;</span>Character<span class=\"token punctuation\">,</span> Long<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> 1L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> 1L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> 1L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> 1L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span> 1L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            Map<span class=\"token operator\">&lt;</span>Character<span class=\"token punctuation\">,</span> Long<span class=\"token operator\">></span> tmp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tmp<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'u'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tmp<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tmp<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tmp<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tmp<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            map <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>Long<span class=\"token operator\">:</span><span class=\"token operator\">:</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这次周赛4个题目全部 AC , RANK  740</p>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1593642634315-48f5414c3ad9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80","excerpt":"","more":"<h2 id=\"1-Play-with-Chips\"><a href=\"#1-Play-with-Chips\" class=\"headerlink\" title=\"1. Play with Chips\"></a>1. Play with Chips</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>There are some chips, and the i-th chip is at position <code>chips[i]</code>.</p>\n<p>You can perform any of the two following types of moves <strong>any number of times</strong> (possibly zero) <strong>on any chip</strong>:</p>\n<ul>\n<li>Move the <code>i</code>-th chip by 2 units to the left or to the right with a cost of <strong>0</strong>.</li>\n<li>Move the <code>i</code>-th chip by 1 unit to the left or to the right with a cost of <strong>1</strong>.</li>\n</ul>\n<p>There can be two or more chips at the same position initially.</p>\n<p>Return the minimum cost needed to move all the chips to the same position (any position).</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>如果两个chip的位置相差为偶数, 则 <code>cost = 0</code>. 否则 <code>coust = 1 </code></p>\n<p>我们预先获取chip的一个哈希来进行缓存, 之后遍历哈希中的每一个数, 作为 <strong>目的地</strong>.</p>\n<p>那么我们的问题就变成 ： 找出那一个 <strong>目的地</strong> , 使得 <code>cost</code> 最小即可</p>\n<pre><code class=\"java\">    public int minCostToMoveChips(int[] chips) &#123;\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        for (int num : chips) &#123;\n            set.add(num);\n        &#125;\n        int min = Integer.MAX_VALUE;\n        for (int num : set) &#123;\n            int sum = 0;\n            for (int chip : chips) &#123;\n                int dis = Math.abs(num - chip);\n                sum += dis % 2;\n                if (sum &gt; min) break;\n            &#125;\n            min = Math.min(sum, min);\n        &#125;\n        return min;\n    &#125;</code></pre>\n<h2 id=\"2-Longest-Arithmetic-Subsequence-of-Given-Difference\"><a href=\"#2-Longest-Arithmetic-Subsequence-of-Given-Difference\" class=\"headerlink\" title=\"2. Longest Arithmetic Subsequence of Given Difference\"></a>2. Longest Arithmetic Subsequence of Given Difference</h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Given an integer array <code>arr</code> and an integer <code>difference</code>, return the length of the longest subsequence in <code>arr</code> which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals <code>difference</code>.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code>Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].</code></pre>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>一开始很明显想到用 <code>DP</code> 来解决. 每一步前进的同时需要缓存下当前位置, 便于后续的查找</p>\n<p>我们缓存如下的内容：</p>\n<ul>\n<li>每一个数字和它所处可能位置 <code>Set</code> 的哈希映射</li>\n<li>DP 数组，用于当前 <code>dp[i]</code> 的确定</li>\n</ul>\n<p>一开始就这样做了，但是 error 了一次. 原因就是这里的 dp 数组并不是单调上升，因为可能会出现中间断层的情况，例如 <code>[1,2,3,1,2,3,4]</code> , 中间的 <code>1</code> 位置就是断层的出现点. (之后一想，其实也可以通过自己的维护来进行避免，问题不大)</p>\n<p>最终代码如下</p>\n<pre><code class=\"java\"> public int longestSubsequence(int[] arr, int difference) &#123;\n        int n = arr.length;\n        int[] dp = new int[n];\n        Map&lt;Integer, Set&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n        dp[0] = 1;\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        set.add(0);\n        map.put(arr[0], set);\n        for (int i = 1; i &lt; n; ++i) &#123;\n            if (!map.containsKey(arr[i])) &#123;\n                set = new HashSet&lt;&gt;();\n                set.add(i);\n                map.put(arr[i], set);\n            &#125; else &#123;\n                set = map.get(arr[i]);\n                set.add(i);\n                map.put(arr[i], set);\n            &#125;\n\n            int target = arr[i] - difference;\n            if (!map.containsKey(target)) &#123; //不包含前一个数\n                dp[i] = 1;\n            &#125; else &#123;\n                set = map.get(target);\n                int maxLen = 0;\n                for (int num : set) &#123;\n                    maxLen = Math.max(maxLen, dp[num]);\n                &#125;\n                dp[i] = maxLen + 1;\n            &#125;\n        &#125;\n        int ans = 0;\n        for (int num : dp) &#123;\n            ans = Math.max(num, ans);\n        &#125;\n        return ans;\n    &#125;</code></pre>\n<h2 id=\"3-Path-with-Maximum-Gold\"><a href=\"#3-Path-with-Maximum-Gold\" class=\"headerlink\" title=\"3. Path with Maximum Gold\"></a>3. Path with Maximum Gold</h2><h3 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>In a gold mine <code>grid</code> of size <code>m * n</code>, each cell in this mine has an integer representing the amount of gold in that cell, <code>0</code> if it is empty.</p>\n<p>Return the maximum amount of gold you can collect under the conditions:</p>\n<ul>\n<li>Every time you are located in a cell you will collect all the gold in that cell.</li>\n<li>From your position you can walk one step to the left, right, up or down.</li>\n<li>You can’t visit the same cell more than once.</li>\n<li>Never visit a cell with <code>0</code> gold.</li>\n<li>You can start and stop collecting gold from <strong>any</strong> position in the grid that has some gold. </li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -&gt; 8 -&gt; 7.</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7.</code></pre>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>很简单的 DFS 算法实现, 没什么好说的</p>\n<pre><code class=\"java\">public int getMaximumGold(int[][] grid) &#123;\n        int m = grid.length;\n        int n = grid[0].length;\n        int max = 0;\n        for (int i = 0; i &lt; m; ++i) &#123;\n            for (int j = 0; j &lt; n; ++j) &#123;\n                if (grid[i][j] != 0) &#123;\n                    max = Math.max(max, dfs(grid, new int[]&#123;i, j&#125;, 0));\n                &#125;\n            &#125;\n        &#125;\n        return max;\n    &#125;\n\n    private int dfs(int[][] grid, int[] startPos, int gold) &#123;\n        int m = grid.length, n = grid[0].length;\n        int r = startPos[0], c = startPos[1];\n        if (r &lt; 0 || c &lt; 0 || r &gt;= m || c &gt;= n || grid[r][c] == 0) return gold;\n        gold += grid[r][c];\n        int[][] nums = new int[m][n];\n        for (int i = 0; i &lt; m; ++i) &#123;\n            for (int j = 0; j &lt; n; ++j) &#123;\n                nums[i][j] = grid[i][j];\n            &#125;\n        &#125;\n        nums[r][c] = 0;             //Get the gold\n        int a1 = dfs(nums, new int[]&#123;r, c + 1&#125;, gold);\n        int b1 = dfs(nums, new int[]&#123;r, c - 1&#125;, gold);\n        int c1 = dfs(nums, new int[]&#123;r + 1, c&#125;, gold);\n        int d1 = dfs(nums, new int[]&#123;r - 1, c&#125;, gold);\n        return Arrays.stream(new int[]&#123;a1, b1, c1, d1&#125;).max().getAsInt();\n    &#125;</code></pre>\n<h2 id=\"4-Count-Vowels-Permutation\"><a href=\"#4-Count-Vowels-Permutation\" class=\"headerlink\" title=\"4. Count Vowels Permutation\"></a>4. Count Vowels Permutation</h2><h3 id=\"描述-3\"><a href=\"#描述-3\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Given an integer <code>n</code>, your task is to count how many strings of length <code>n</code> can be formed under the following rules:</p>\n<ul>\n<li>Each character is a lower case vowel (<code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>)</li>\n<li>Each vowel <code>&#39;a&#39;</code> may only be followed by an <code>&#39;e&#39;</code>.</li>\n<li>Each vowel <code>&#39;e&#39;</code> may only be followed by an <code>&#39;a&#39;</code> or an <code>&#39;i&#39;</code>.</li>\n<li>Each vowel <code>&#39;i&#39;</code> <strong>may not</strong> be followed by another <code>&#39;i&#39;</code>.</li>\n<li>Each vowel <code>&#39;o&#39;</code> may only be followed by an <code>&#39;i&#39;</code> or a <code>&#39;u&#39;</code>.</li>\n<li>Each vowel <code>&#39;u&#39;</code> may only be followed by an <code>&#39;a&#39;.</code></li>\n</ul>\n<p>Since the answer may be too large, return it modulo <code>10^9 + 7.</code></p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: n = 1\nOutput: 5\nExplanation: All possible strings are: &quot;a&quot;, &quot;e&quot;, &quot;i&quot; , &quot;o&quot; and &quot;u&quot;.</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: n = 2\nOutput: 10\nExplanation: All possible strings are: &quot;ae&quot;, &quot;ea&quot;, &quot;ei&quot;, &quot;ia&quot;, &quot;ie&quot;, &quot;io&quot;, &quot;iu&quot;, &quot;oi&quot;, &quot;ou&quot; and &quot;ua&quot;.</code></pre>\n<p><strong>Example 3:</strong> </p>\n<pre><code>Input: n = 5\nOutput: 68</code></pre>\n<h3 id=\"思路-3\"><a href=\"#思路-3\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>假定某一步的最末位中, ‘a’ , ‘e’ , ‘i’ , ‘o’ , ‘u’ 的个数分别是 a , e , i , o , u ，那么下一步末位的个数就分别是 <code>u+e+i</code>, <code>a + i</code>, <code>e + o</code> , <code>i</code> , <code>o +i</code> </p>\n<p>我这里用了一个hash来保存 (小声：这个hard题是简单题的赶脚233)</p>\n<pre><code class=\"java\">class Solution &#123;\nprivate final long mod = 1_000_000_007;\n    public int countVowelPermutation(int n) &#123;\n        Map&lt;Character, Long&gt; map = new HashMap&lt;&gt;();\n        map.put(&#39;a&#39;, 1L);\n        map.put(&#39;e&#39;, 1L);\n        map.put(&#39;i&#39;, 1L);\n        map.put(&#39;o&#39;, 1L);\n        map.put(&#39;u&#39;, 1L);\n        for (int i = 1; i &lt; n; ++i) &#123;\n            Map&lt;Character, Long&gt; tmp = new HashMap&lt;&gt;();\n            tmp.put(&#39;a&#39;, (map.get(&#39;u&#39;) + map.get(&#39;e&#39;) + map.get(&#39;i&#39;)) % mod);\n            tmp.put(&#39;e&#39;, (map.get(&#39;a&#39;) + map.get(&#39;i&#39;)) % mod);\n            tmp.put(&#39;i&#39;, (map.get(&#39;e&#39;) + map.get(&#39;o&#39;)) % mod);\n            tmp.put(&#39;o&#39;, (map.get(&#39;i&#39;)) % mod);\n            tmp.put(&#39;u&#39;, (map.get(&#39;o&#39;) + map.get(&#39;i&#39;)) % mod);\n\n            map = tmp;\n        &#125;\n        return (int) (map.values().stream().reduce(Long::sum).get() % mod);\n    &#125;\n&#125;</code></pre>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这次周赛4个题目全部 AC , RANK  740</p>\n"},{"title":"初探Anna","date":"2020-02-17T03:05:56.000Z","cover_img":"https://images.unsplash.com/photo-1551342909-187e24a5797d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=675&q=80","feature_img":"https://images.unsplash.com/photo-1517999349371-c43520457b23?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","description":"由伯克利开发的新一代数据库引擎","keywords":null,"_content":"## Anna初探\n\n### 背景\n\n实习中主要做的是数据库引擎的开发。这一次遇到的是伯克利开发的 *Anna* ，将透过两篇paper来大致讲述一下入门的内容。\n\n### 进入正题\n\n解决目标：\n\n- *data scaling* ：牵涉到数据分片 **partition**\n- *workload scaling* ：牵涉到 **multi-master replication**\n- 硬件最大化利用 & 多核计算机性能 ：**wait-free execution** (每一个core尽可能让他们一直工作)\n- 无协调的一致性 **coordination-free consistency model**\n  - 一致性哈希 & 哈希环\n\n> ##### Lattice 晶格\n>\n> 离散里面的一种偏序结构. 整个图里面只有一个起点和一个终点\n>\n> 达到的事务隔离级别 ：**read-committed transaction**\n>\n> 就这一点，论文中提到了 **casual consistency** 和 **read committed** 两种一致性的*level* ，具体就留到后面展开论述\n\n#### 可用的分布式状态模型类别\n\n- 共享内存\n\n  该方式常常需要额外的加锁去锁来进行一致性维护，因而极大地影响了系统运行效率\n\n  Lattice也不能解决异步请求的数据同步问题，它最重要的 **merge function** 也是需要\n\n- 消息传递\n\n采用了消息传递的架构后，工作节点能够拥有类似于 **local-thread** 的私有状态(*state*)。由于对外界不可见，也就没有了并发的问题\n\n但是由于各个副本之间牵涉到数据的同步，这就会有一个新的 **状态一致性** 问题的出现，我们需要采用新的机制来进行改进\n\n**Single-Master**\n\n- Key值只有一个副本，可以有比较好的一致性\n- 问题：速度不能超过一个node ，这是一个瓶颈\n\n**Multi-Master**\n\n- Key值存在于多个副本中\n- 周期性进行广播发送*update* 信息\n- 问题：一致性不能够保证\n\n> **Anna** 使用的是无协调的 *multi-master replication* ，并且基于 **lattice** 来进行一致性的保证\n\n### Anna架构\n\n主要根据两篇(2018 , 2019) 中先后两个版本的 *Anna* 架构不同点入手\n\n> #### Lattice based\n>\n> *Lattice* 是这个框架主打的内容：在给定的一个偏序条件下，只要该偏序关系重的 **least upper bound** 又满足了\n>\n> - Commutativity 交换律\n> - Associativity 结合律\n> - Idempotence 幂等\n>\n> 那么就可以说是满足一个晶格的关系。这样的系统我们也称作 **ACI system**\n\n2018 Anna-ieee 中的架构图如下 （单一server）\n\n<img src=\"https://i.loli.net/2020/02/17/4xZGNqDcfgkKAlj.png\" alt=\"image.png\"  />\n\n每一个 *actor*都会周期性发出广播，告知 *changeset* 所关联的 *master* ，将更新信息 *merge* 进入各自的私有状态空间，并且清空 *changeset*\n\n#### 多Tire架构\n\n这一个架构是在 2019 anna-vldb 中给出的，和之前的区别主要是适用于云端的分布式系统。更多地把架构重点放在了 **水平扩展** 、**数据访问偏好&负载均衡**、**数据垂直转移**\n\n分布式Anna架构如下图：\n\n> 多个 *Tier* -> 一个 *Tier* 内部有多个 *node* -> 一个 *node* 内部有多个 *worker thread*\n\n<img src=\"https://i.loli.net/2020/02/17/RLbxf3vWFSJcnC4.png\" alt=\"image.png\"  />\n\n\n\n### 回到我们的一致性问题\n\n*ACI* 系统中，由于它的组件也必然满足一个lattice关系，我们就可以采用 **自底向上组合** 的方式来进行系统逻辑的构建\n\n<img src=\"https://i.loli.net/2020/02/17/cYaxepWz2ZdgVTj.png\" alt=\"image.png\" style=\"zoom: 77%;\" />\n\n如上图所示 （*casual consistency*）\n\n- 每一个工作节点(worker)的状态都采用 **MapLattice** 来进行表示\n- **MapLattice**的键，是一种不可变的类型(*immutable*) ；对于值，则是 **ValueLattice**\n\n> 对于 **MapLattice** 的 *merge* 算子，会对两个 MapLattice 的键进行 *Union* 操作，若键相同，那么会进行 **ValueLattice** 的 *merge* 算子\n\n---\n\n接下来我们需要看之前提及的 **casual consistency** 和 **read committed** \n\n#### Casual Consistency\n\n> A , B 两个用户同时在进行事务处理，如果 B 能够见到 A 的更新，那么 B 的更新将会 *Overwrite* A用户的更新；如果不能够看到，那么就会触发数据记录的 *merge* 算子\n\n关键点：**vector lock**\n\n支持 *casual consistency* 的方案中，*vector lock* 的键由客户端的 *proxy ids* 组成，值则由相对应的版本号组成。他们相互具有关联关系。这里的 *version number* 可以由 **MaxIntLattice** 来进行实现，它每次都取**更新前后的最大值**，所以它的值必定是递增的，也契合了版本号递增的特点。\n\n当进行一次写操作的时候，会把 **vector lock** 的版本号进行增加，连同数据项一起进行写入\n\n图中的 **pair lattice** 也具有 *merge* 算子，具体算法如下\n\n> 对于两个 **pair lattice** P(a,b) 和 Q(a,b) ，如果 P.a > Q.a (表示偏序大小关系) ，我们称 **P casually follows Q** ，并且将 *merge* 结果设置为 P\n>\n> 如果不能够进行比较，那么*merge* 结果就是\n>\n> ![image.png](https://i.loli.net/2020/02/17/cbe2SQOmtJ9KPrx.png)\n\n#### Read Committed\n\n和数据库事务隔离级别一样，读提交的要求就是避免 **脏读** 和 **脏写**\n\n##### 脏写\n\n多个写事件的执行中，我们只需要添加一个 *larger timestamp wins* 策略\n\n##### 脏读\n\n添加事务写入的缓冲区，保证未提交的事务不会被放入 *KVS*\n\n\n\n\n\n### 遗留的一些问题\n\n- Critical path of every request 是什么？\n\n","source":"_posts/初探Anna.md","raw":"---\ntitle: 初探Anna\ndate: 2020-02-17 11:05:56\ntags: 笔记\ncover_img: https://images.unsplash.com/photo-1551342909-187e24a5797d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=675&q=80\nfeature_img: https://images.unsplash.com/photo-1517999349371-c43520457b23?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\ndescription: 由伯克利开发的新一代数据库引擎\nkeywords:\n---\n## Anna初探\n\n### 背景\n\n实习中主要做的是数据库引擎的开发。这一次遇到的是伯克利开发的 *Anna* ，将透过两篇paper来大致讲述一下入门的内容。\n\n### 进入正题\n\n解决目标：\n\n- *data scaling* ：牵涉到数据分片 **partition**\n- *workload scaling* ：牵涉到 **multi-master replication**\n- 硬件最大化利用 & 多核计算机性能 ：**wait-free execution** (每一个core尽可能让他们一直工作)\n- 无协调的一致性 **coordination-free consistency model**\n  - 一致性哈希 & 哈希环\n\n> ##### Lattice 晶格\n>\n> 离散里面的一种偏序结构. 整个图里面只有一个起点和一个终点\n>\n> 达到的事务隔离级别 ：**read-committed transaction**\n>\n> 就这一点，论文中提到了 **casual consistency** 和 **read committed** 两种一致性的*level* ，具体就留到后面展开论述\n\n#### 可用的分布式状态模型类别\n\n- 共享内存\n\n  该方式常常需要额外的加锁去锁来进行一致性维护，因而极大地影响了系统运行效率\n\n  Lattice也不能解决异步请求的数据同步问题，它最重要的 **merge function** 也是需要\n\n- 消息传递\n\n采用了消息传递的架构后，工作节点能够拥有类似于 **local-thread** 的私有状态(*state*)。由于对外界不可见，也就没有了并发的问题\n\n但是由于各个副本之间牵涉到数据的同步，这就会有一个新的 **状态一致性** 问题的出现，我们需要采用新的机制来进行改进\n\n**Single-Master**\n\n- Key值只有一个副本，可以有比较好的一致性\n- 问题：速度不能超过一个node ，这是一个瓶颈\n\n**Multi-Master**\n\n- Key值存在于多个副本中\n- 周期性进行广播发送*update* 信息\n- 问题：一致性不能够保证\n\n> **Anna** 使用的是无协调的 *multi-master replication* ，并且基于 **lattice** 来进行一致性的保证\n\n### Anna架构\n\n主要根据两篇(2018 , 2019) 中先后两个版本的 *Anna* 架构不同点入手\n\n> #### Lattice based\n>\n> *Lattice* 是这个框架主打的内容：在给定的一个偏序条件下，只要该偏序关系重的 **least upper bound** 又满足了\n>\n> - Commutativity 交换律\n> - Associativity 结合律\n> - Idempotence 幂等\n>\n> 那么就可以说是满足一个晶格的关系。这样的系统我们也称作 **ACI system**\n\n2018 Anna-ieee 中的架构图如下 （单一server）\n\n<img src=\"https://i.loli.net/2020/02/17/4xZGNqDcfgkKAlj.png\" alt=\"image.png\"  />\n\n每一个 *actor*都会周期性发出广播，告知 *changeset* 所关联的 *master* ，将更新信息 *merge* 进入各自的私有状态空间，并且清空 *changeset*\n\n#### 多Tire架构\n\n这一个架构是在 2019 anna-vldb 中给出的，和之前的区别主要是适用于云端的分布式系统。更多地把架构重点放在了 **水平扩展** 、**数据访问偏好&负载均衡**、**数据垂直转移**\n\n分布式Anna架构如下图：\n\n> 多个 *Tier* -> 一个 *Tier* 内部有多个 *node* -> 一个 *node* 内部有多个 *worker thread*\n\n<img src=\"https://i.loli.net/2020/02/17/RLbxf3vWFSJcnC4.png\" alt=\"image.png\"  />\n\n\n\n### 回到我们的一致性问题\n\n*ACI* 系统中，由于它的组件也必然满足一个lattice关系，我们就可以采用 **自底向上组合** 的方式来进行系统逻辑的构建\n\n<img src=\"https://i.loli.net/2020/02/17/cYaxepWz2ZdgVTj.png\" alt=\"image.png\" style=\"zoom: 77%;\" />\n\n如上图所示 （*casual consistency*）\n\n- 每一个工作节点(worker)的状态都采用 **MapLattice** 来进行表示\n- **MapLattice**的键，是一种不可变的类型(*immutable*) ；对于值，则是 **ValueLattice**\n\n> 对于 **MapLattice** 的 *merge* 算子，会对两个 MapLattice 的键进行 *Union* 操作，若键相同，那么会进行 **ValueLattice** 的 *merge* 算子\n\n---\n\n接下来我们需要看之前提及的 **casual consistency** 和 **read committed** \n\n#### Casual Consistency\n\n> A , B 两个用户同时在进行事务处理，如果 B 能够见到 A 的更新，那么 B 的更新将会 *Overwrite* A用户的更新；如果不能够看到，那么就会触发数据记录的 *merge* 算子\n\n关键点：**vector lock**\n\n支持 *casual consistency* 的方案中，*vector lock* 的键由客户端的 *proxy ids* 组成，值则由相对应的版本号组成。他们相互具有关联关系。这里的 *version number* 可以由 **MaxIntLattice** 来进行实现，它每次都取**更新前后的最大值**，所以它的值必定是递增的，也契合了版本号递增的特点。\n\n当进行一次写操作的时候，会把 **vector lock** 的版本号进行增加，连同数据项一起进行写入\n\n图中的 **pair lattice** 也具有 *merge* 算子，具体算法如下\n\n> 对于两个 **pair lattice** P(a,b) 和 Q(a,b) ，如果 P.a > Q.a (表示偏序大小关系) ，我们称 **P casually follows Q** ，并且将 *merge* 结果设置为 P\n>\n> 如果不能够进行比较，那么*merge* 结果就是\n>\n> ![image.png](https://i.loli.net/2020/02/17/cbe2SQOmtJ9KPrx.png)\n\n#### Read Committed\n\n和数据库事务隔离级别一样，读提交的要求就是避免 **脏读** 和 **脏写**\n\n##### 脏写\n\n多个写事件的执行中，我们只需要添加一个 *larger timestamp wins* 策略\n\n##### 脏读\n\n添加事务写入的缓冲区，保证未提交的事务不会被放入 *KVS*\n\n\n\n\n\n### 遗留的一些问题\n\n- Critical path of every request 是什么？\n\n","slug":"初探Anna","published":1,"updated":"2020-10-19T09:47:13.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi17000kx8med5vv1deb","content":"<h2 id=\"Anna初探\"><a href=\"#Anna初探\" class=\"headerlink\" title=\"Anna初探\"></a>Anna初探</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>实习中主要做的是数据库引擎的开发。这一次遇到的是伯克利开发的 <em>Anna</em> ，将透过两篇paper来大致讲述一下入门的内容。</p>\n<h3 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h3><p>解决目标：</p>\n<ul>\n<li><em>data scaling</em> ：牵涉到数据分片 <strong>partition</strong></li>\n<li><em>workload scaling</em> ：牵涉到 <strong>multi-master replication</strong></li>\n<li>硬件最大化利用 &amp; 多核计算机性能 ：<strong>wait-free execution</strong> (每一个core尽可能让他们一直工作)</li>\n<li>无协调的一致性 <strong>coordination-free consistency model</strong><ul>\n<li>一致性哈希 &amp; 哈希环</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h5 id=\"Lattice-晶格\"><a href=\"#Lattice-晶格\" class=\"headerlink\" title=\"Lattice 晶格\"></a>Lattice 晶格</h5><p>离散里面的一种偏序结构. 整个图里面只有一个起点和一个终点</p>\n<p>达到的事务隔离级别 ：<strong>read-committed transaction</strong></p>\n<p>就这一点，论文中提到了 <strong>casual consistency</strong> 和 <strong>read committed</strong> 两种一致性的<em>level</em> ，具体就留到后面展开论述</p>\n</blockquote>\n<h4 id=\"可用的分布式状态模型类别\"><a href=\"#可用的分布式状态模型类别\" class=\"headerlink\" title=\"可用的分布式状态模型类别\"></a>可用的分布式状态模型类别</h4><ul>\n<li><p>共享内存</p>\n<p>该方式常常需要额外的加锁去锁来进行一致性维护，因而极大地影响了系统运行效率</p>\n<p>Lattice也不能解决异步请求的数据同步问题，它最重要的 <strong>merge function</strong> 也是需要</p>\n</li>\n<li><p>消息传递</p>\n</li>\n</ul>\n<p>采用了消息传递的架构后，工作节点能够拥有类似于 <strong>local-thread</strong> 的私有状态(<em>state</em>)。由于对外界不可见，也就没有了并发的问题</p>\n<p>但是由于各个副本之间牵涉到数据的同步，这就会有一个新的 <strong>状态一致性</strong> 问题的出现，我们需要采用新的机制来进行改进</p>\n<p><strong>Single-Master</strong></p>\n<ul>\n<li>Key值只有一个副本，可以有比较好的一致性</li>\n<li>问题：速度不能超过一个node ，这是一个瓶颈</li>\n</ul>\n<p><strong>Multi-Master</strong></p>\n<ul>\n<li>Key值存在于多个副本中</li>\n<li>周期性进行广播发送<em>update</em> 信息</li>\n<li>问题：一致性不能够保证</li>\n</ul>\n<blockquote>\n<p><strong>Anna</strong> 使用的是无协调的 <em>multi-master replication</em> ，并且基于 <strong>lattice</strong> 来进行一致性的保证</p>\n</blockquote>\n<h3 id=\"Anna架构\"><a href=\"#Anna架构\" class=\"headerlink\" title=\"Anna架构\"></a>Anna架构</h3><p>主要根据两篇(2018 , 2019) 中先后两个版本的 <em>Anna</em> 架构不同点入手</p>\n<blockquote>\n<h4 id=\"Lattice-based\"><a href=\"#Lattice-based\" class=\"headerlink\" title=\"Lattice based\"></a>Lattice based</h4><p><em>Lattice</em> 是这个框架主打的内容：在给定的一个偏序条件下，只要该偏序关系重的 <strong>least upper bound</strong> 又满足了</p>\n<ul>\n<li>Commutativity 交换律</li>\n<li>Associativity 结合律</li>\n<li>Idempotence 幂等</li>\n</ul>\n<p>那么就可以说是满足一个晶格的关系。这样的系统我们也称作 <strong>ACI system</strong></p>\n</blockquote>\n<p>2018 Anna-ieee 中的架构图如下 （单一server）</p>\n<img src=\"https://i.loli.net/2020/02/17/4xZGNqDcfgkKAlj.png\" alt=\"image.png\"  />\n\n<p>每一个 <em>actor</em>都会周期性发出广播，告知 <em>changeset</em> 所关联的 <em>master</em> ，将更新信息 <em>merge</em> 进入各自的私有状态空间，并且清空 <em>changeset</em></p>\n<h4 id=\"多Tire架构\"><a href=\"#多Tire架构\" class=\"headerlink\" title=\"多Tire架构\"></a>多Tire架构</h4><p>这一个架构是在 2019 anna-vldb 中给出的，和之前的区别主要是适用于云端的分布式系统。更多地把架构重点放在了 <strong>水平扩展</strong> 、<strong>数据访问偏好&amp;负载均衡</strong>、<strong>数据垂直转移</strong></p>\n<p>分布式Anna架构如下图：</p>\n<blockquote>\n<p>多个 <em>Tier</em> -&gt; 一个 <em>Tier</em> 内部有多个 <em>node</em> -&gt; 一个 <em>node</em> 内部有多个 <em>worker thread</em></p>\n</blockquote>\n<img src=\"https://i.loli.net/2020/02/17/RLbxf3vWFSJcnC4.png\" alt=\"image.png\"  />\n\n\n\n<h3 id=\"回到我们的一致性问题\"><a href=\"#回到我们的一致性问题\" class=\"headerlink\" title=\"回到我们的一致性问题\"></a>回到我们的一致性问题</h3><p><em>ACI</em> 系统中，由于它的组件也必然满足一个lattice关系，我们就可以采用 <strong>自底向上组合</strong> 的方式来进行系统逻辑的构建</p>\n<img src=\"https://i.loli.net/2020/02/17/cYaxepWz2ZdgVTj.png\" alt=\"image.png\" style=\"zoom: 77%;\" />\n\n<p>如上图所示 （<em>casual consistency</em>）</p>\n<ul>\n<li>每一个工作节点(worker)的状态都采用 <strong>MapLattice</strong> 来进行表示</li>\n<li><strong>MapLattice</strong>的键，是一种不可变的类型(<em>immutable</em>) ；对于值，则是 <strong>ValueLattice</strong></li>\n</ul>\n<blockquote>\n<p>对于 <strong>MapLattice</strong> 的 <em>merge</em> 算子，会对两个 MapLattice 的键进行 <em>Union</em> 操作，若键相同，那么会进行 <strong>ValueLattice</strong> 的 <em>merge</em> 算子</p>\n</blockquote>\n<hr>\n<p>接下来我们需要看之前提及的 <strong>casual consistency</strong> 和 <strong>read committed</strong> </p>\n<h4 id=\"Casual-Consistency\"><a href=\"#Casual-Consistency\" class=\"headerlink\" title=\"Casual Consistency\"></a>Casual Consistency</h4><blockquote>\n<p>A , B 两个用户同时在进行事务处理，如果 B 能够见到 A 的更新，那么 B 的更新将会 <em>Overwrite</em> A用户的更新；如果不能够看到，那么就会触发数据记录的 <em>merge</em> 算子</p>\n</blockquote>\n<p>关键点：<strong>vector lock</strong></p>\n<p>支持 <em>casual consistency</em> 的方案中，<em>vector lock</em> 的键由客户端的 <em>proxy ids</em> 组成，值则由相对应的版本号组成。他们相互具有关联关系。这里的 <em>version number</em> 可以由 <strong>MaxIntLattice</strong> 来进行实现，它每次都取<strong>更新前后的最大值</strong>，所以它的值必定是递增的，也契合了版本号递增的特点。</p>\n<p>当进行一次写操作的时候，会把 <strong>vector lock</strong> 的版本号进行增加，连同数据项一起进行写入</p>\n<p>图中的 <strong>pair lattice</strong> 也具有 <em>merge</em> 算子，具体算法如下</p>\n<blockquote>\n<p>对于两个 <strong>pair lattice</strong> P(a,b) 和 Q(a,b) ，如果 P.a &gt; Q.a (表示偏序大小关系) ，我们称 <strong>P casually follows Q</strong> ，并且将 <em>merge</em> 结果设置为 P</p>\n<p>如果不能够进行比较，那么<em>merge</em> 结果就是</p>\n<p><img src=\"https://i.loli.net/2020/02/17/cbe2SQOmtJ9KPrx.png\" alt=\"image.png\"></p>\n</blockquote>\n<h4 id=\"Read-Committed\"><a href=\"#Read-Committed\" class=\"headerlink\" title=\"Read Committed\"></a>Read Committed</h4><p>和数据库事务隔离级别一样，读提交的要求就是避免 <strong>脏读</strong> 和 <strong>脏写</strong></p>\n<h5 id=\"脏写\"><a href=\"#脏写\" class=\"headerlink\" title=\"脏写\"></a>脏写</h5><p>多个写事件的执行中，我们只需要添加一个 <em>larger timestamp wins</em> 策略</p>\n<h5 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h5><p>添加事务写入的缓冲区，保证未提交的事务不会被放入 <em>KVS</em></p>\n<h3 id=\"遗留的一些问题\"><a href=\"#遗留的一些问题\" class=\"headerlink\" title=\"遗留的一些问题\"></a>遗留的一些问题</h3><ul>\n<li>Critical path of every request 是什么？</li>\n</ul>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603060044864-9c8826fb35af?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","excerpt":"","more":"<h2 id=\"Anna初探\"><a href=\"#Anna初探\" class=\"headerlink\" title=\"Anna初探\"></a>Anna初探</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>实习中主要做的是数据库引擎的开发。这一次遇到的是伯克利开发的 <em>Anna</em> ，将透过两篇paper来大致讲述一下入门的内容。</p>\n<h3 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h3><p>解决目标：</p>\n<ul>\n<li><em>data scaling</em> ：牵涉到数据分片 <strong>partition</strong></li>\n<li><em>workload scaling</em> ：牵涉到 <strong>multi-master replication</strong></li>\n<li>硬件最大化利用 &amp; 多核计算机性能 ：<strong>wait-free execution</strong> (每一个core尽可能让他们一直工作)</li>\n<li>无协调的一致性 <strong>coordination-free consistency model</strong><ul>\n<li>一致性哈希 &amp; 哈希环</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h5 id=\"Lattice-晶格\"><a href=\"#Lattice-晶格\" class=\"headerlink\" title=\"Lattice 晶格\"></a>Lattice 晶格</h5><p>离散里面的一种偏序结构. 整个图里面只有一个起点和一个终点</p>\n<p>达到的事务隔离级别 ：<strong>read-committed transaction</strong></p>\n<p>就这一点，论文中提到了 <strong>casual consistency</strong> 和 <strong>read committed</strong> 两种一致性的<em>level</em> ，具体就留到后面展开论述</p>\n</blockquote>\n<h4 id=\"可用的分布式状态模型类别\"><a href=\"#可用的分布式状态模型类别\" class=\"headerlink\" title=\"可用的分布式状态模型类别\"></a>可用的分布式状态模型类别</h4><ul>\n<li><p>共享内存</p>\n<p>该方式常常需要额外的加锁去锁来进行一致性维护，因而极大地影响了系统运行效率</p>\n<p>Lattice也不能解决异步请求的数据同步问题，它最重要的 <strong>merge function</strong> 也是需要</p>\n</li>\n<li><p>消息传递</p>\n</li>\n</ul>\n<p>采用了消息传递的架构后，工作节点能够拥有类似于 <strong>local-thread</strong> 的私有状态(<em>state</em>)。由于对外界不可见，也就没有了并发的问题</p>\n<p>但是由于各个副本之间牵涉到数据的同步，这就会有一个新的 <strong>状态一致性</strong> 问题的出现，我们需要采用新的机制来进行改进</p>\n<p><strong>Single-Master</strong></p>\n<ul>\n<li>Key值只有一个副本，可以有比较好的一致性</li>\n<li>问题：速度不能超过一个node ，这是一个瓶颈</li>\n</ul>\n<p><strong>Multi-Master</strong></p>\n<ul>\n<li>Key值存在于多个副本中</li>\n<li>周期性进行广播发送<em>update</em> 信息</li>\n<li>问题：一致性不能够保证</li>\n</ul>\n<blockquote>\n<p><strong>Anna</strong> 使用的是无协调的 <em>multi-master replication</em> ，并且基于 <strong>lattice</strong> 来进行一致性的保证</p>\n</blockquote>\n<h3 id=\"Anna架构\"><a href=\"#Anna架构\" class=\"headerlink\" title=\"Anna架构\"></a>Anna架构</h3><p>主要根据两篇(2018 , 2019) 中先后两个版本的 <em>Anna</em> 架构不同点入手</p>\n<blockquote>\n<h4 id=\"Lattice-based\"><a href=\"#Lattice-based\" class=\"headerlink\" title=\"Lattice based\"></a>Lattice based</h4><p><em>Lattice</em> 是这个框架主打的内容：在给定的一个偏序条件下，只要该偏序关系重的 <strong>least upper bound</strong> 又满足了</p>\n<ul>\n<li>Commutativity 交换律</li>\n<li>Associativity 结合律</li>\n<li>Idempotence 幂等</li>\n</ul>\n<p>那么就可以说是满足一个晶格的关系。这样的系统我们也称作 <strong>ACI system</strong></p>\n</blockquote>\n<p>2018 Anna-ieee 中的架构图如下 （单一server）</p>\n<img src=\"https://i.loli.net/2020/02/17/4xZGNqDcfgkKAlj.png\" alt=\"image.png\"  />\n\n<p>每一个 <em>actor</em>都会周期性发出广播，告知 <em>changeset</em> 所关联的 <em>master</em> ，将更新信息 <em>merge</em> 进入各自的私有状态空间，并且清空 <em>changeset</em></p>\n<h4 id=\"多Tire架构\"><a href=\"#多Tire架构\" class=\"headerlink\" title=\"多Tire架构\"></a>多Tire架构</h4><p>这一个架构是在 2019 anna-vldb 中给出的，和之前的区别主要是适用于云端的分布式系统。更多地把架构重点放在了 <strong>水平扩展</strong> 、<strong>数据访问偏好&amp;负载均衡</strong>、<strong>数据垂直转移</strong></p>\n<p>分布式Anna架构如下图：</p>\n<blockquote>\n<p>多个 <em>Tier</em> -&gt; 一个 <em>Tier</em> 内部有多个 <em>node</em> -&gt; 一个 <em>node</em> 内部有多个 <em>worker thread</em></p>\n</blockquote>\n<img src=\"https://i.loli.net/2020/02/17/RLbxf3vWFSJcnC4.png\" alt=\"image.png\"  />\n\n\n\n<h3 id=\"回到我们的一致性问题\"><a href=\"#回到我们的一致性问题\" class=\"headerlink\" title=\"回到我们的一致性问题\"></a>回到我们的一致性问题</h3><p><em>ACI</em> 系统中，由于它的组件也必然满足一个lattice关系，我们就可以采用 <strong>自底向上组合</strong> 的方式来进行系统逻辑的构建</p>\n<img src=\"https://i.loli.net/2020/02/17/cYaxepWz2ZdgVTj.png\" alt=\"image.png\" style=\"zoom: 77%;\" />\n\n<p>如上图所示 （<em>casual consistency</em>）</p>\n<ul>\n<li>每一个工作节点(worker)的状态都采用 <strong>MapLattice</strong> 来进行表示</li>\n<li><strong>MapLattice</strong>的键，是一种不可变的类型(<em>immutable</em>) ；对于值，则是 <strong>ValueLattice</strong></li>\n</ul>\n<blockquote>\n<p>对于 <strong>MapLattice</strong> 的 <em>merge</em> 算子，会对两个 MapLattice 的键进行 <em>Union</em> 操作，若键相同，那么会进行 <strong>ValueLattice</strong> 的 <em>merge</em> 算子</p>\n</blockquote>\n<hr>\n<p>接下来我们需要看之前提及的 <strong>casual consistency</strong> 和 <strong>read committed</strong> </p>\n<h4 id=\"Casual-Consistency\"><a href=\"#Casual-Consistency\" class=\"headerlink\" title=\"Casual Consistency\"></a>Casual Consistency</h4><blockquote>\n<p>A , B 两个用户同时在进行事务处理，如果 B 能够见到 A 的更新，那么 B 的更新将会 <em>Overwrite</em> A用户的更新；如果不能够看到，那么就会触发数据记录的 <em>merge</em> 算子</p>\n</blockquote>\n<p>关键点：<strong>vector lock</strong></p>\n<p>支持 <em>casual consistency</em> 的方案中，<em>vector lock</em> 的键由客户端的 <em>proxy ids</em> 组成，值则由相对应的版本号组成。他们相互具有关联关系。这里的 <em>version number</em> 可以由 <strong>MaxIntLattice</strong> 来进行实现，它每次都取<strong>更新前后的最大值</strong>，所以它的值必定是递增的，也契合了版本号递增的特点。</p>\n<p>当进行一次写操作的时候，会把 <strong>vector lock</strong> 的版本号进行增加，连同数据项一起进行写入</p>\n<p>图中的 <strong>pair lattice</strong> 也具有 <em>merge</em> 算子，具体算法如下</p>\n<blockquote>\n<p>对于两个 <strong>pair lattice</strong> P(a,b) 和 Q(a,b) ，如果 P.a &gt; Q.a (表示偏序大小关系) ，我们称 <strong>P casually follows Q</strong> ，并且将 <em>merge</em> 结果设置为 P</p>\n<p>如果不能够进行比较，那么<em>merge</em> 结果就是</p>\n<p><img src=\"https://i.loli.net/2020/02/17/cbe2SQOmtJ9KPrx.png\" alt=\"image.png\"></p>\n</blockquote>\n<h4 id=\"Read-Committed\"><a href=\"#Read-Committed\" class=\"headerlink\" title=\"Read Committed\"></a>Read Committed</h4><p>和数据库事务隔离级别一样，读提交的要求就是避免 <strong>脏读</strong> 和 <strong>脏写</strong></p>\n<h5 id=\"脏写\"><a href=\"#脏写\" class=\"headerlink\" title=\"脏写\"></a>脏写</h5><p>多个写事件的执行中，我们只需要添加一个 <em>larger timestamp wins</em> 策略</p>\n<h5 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h5><p>添加事务写入的缓冲区，保证未提交的事务不会被放入 <em>KVS</em></p>\n<h3 id=\"遗留的一些问题\"><a href=\"#遗留的一些问题\" class=\"headerlink\" title=\"遗留的一些问题\"></a>遗留的一些问题</h3><ul>\n<li>Critical path of every request 是什么？</li>\n</ul>\n"},{"title":"数据库-索引","date":"2019-12-05T13:54:56.000Z","author":"Caribou","description":"数据库索引相关内容","cover_img":"https://images.unsplash.com/photo-1533750204176-3b0d38e9ac1e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","feature_img":"https://images.unsplash.com/photo-1504639725590-34d0984388bd?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80","_content":"\n## 索引\n\n#### 页存储\n\n<img src=\"https://i.loli.net/2019/12/05/dQE6NVkHZJcWfye.png\" style=\"zoom:50%;\" />\n\n如上就是数据库在Disk Storage的一个存储方式。一个页包含若干 *Data Rows* , 通过 *Row directory* 来进行索引\n\n> A row in a table can be uniquely specified with the page number (P) and slot number (S).\n\n##### 位图索引\n\nhttps://www.cnblogs.com/LBSer/p/3322630.html\n\n位图索引中只维护distinct值，也就是说重复的值是不维护在树中\n\n对于每一个列建立一个\n\n- 位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，而身份证号这种类型不适合用位图索引。\n\n- 此外，位图索引适合静态数据，而不适合索引频繁更新的列\n\n##### 散列索引\n\n散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个槽中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。\n\n散列索引根据对应键的散列码来找到最终的索引项的技术，其实和B树就差不多，也就是一种索引之上的二级辅助索引，我理解散列索引都是二级或更高级的稀疏索引，否则桶就太多了，效率也不会很高\n\n##### 聚簇索引\n\n所谓聚簇索引，就是指**主索引文件**和**数据文件**为==同一份文件==，聚簇索引主要用在**Innodb**存储引擎中。在该索引实现方式中B+Tree的叶子节点上的data就是数据本身，key为主键，如果是一般索引的话，data便会指向对应的主索引，如下图所示：\n\n在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。\n\n##### 非聚簇索引\n\n聚簇索引的叶节点就是数据节点，而非聚簇索引的叶节点仍然是索引节点，并保留一个链接**指向对应数据块**。\n\n##### 辅助索引\n\n在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要**二次查找**。辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据叶，再通过数据叶中的Page Directory找到数据行\n\n##### 唯一索引\n\n表明此索引的==每一个索引值只对应唯一的数据记录==，对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复\n\n##### 主键索引\n\n在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问\n\n---\n\n数据库引擎 ：myISAM , innodb\n\nmyisam索引：因为myisam的索引和数据是分开存储存储的，myisam通过**key_buffer**把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因  \n\ninnodb索引：innodb的数据和索引放在一起，当找到索引也就找到了数据\n\n<img src=\"https://img-blog.csdn.net/20161102111454921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\" style=\"zoom:75%;\" />\n\n1.对于**非聚簇索引表**来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据。\n\n2.对于**聚簇索引表**来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)\n\n> ##### 聚簇索引的优点\n>\n> 1.当你需要取出==一定范围内==的数据时，用聚簇索引也比用非聚簇索引好。\n>\n> 2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。\n>\n> 3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。\n>\n> ##### 聚簇索引的缺点\n>\n> 1.**插入速度严重依赖于插入顺序**，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。\n>\n> 2.**更新主键的代价很高，因为将会导致被更新的行移动**。因此，对于InnoDB表，我们一般定义主键为不可更新。\n>\n> 3.**二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。**\n>\n> 二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。\n>\n> 4.**采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多**，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价。\n\n\n\n","source":"_posts/数据库整理-索引.md","raw":"---\ntitle: 数据库-索引\ndate: 2019-12-05 21:54:56\nauthor: Caribou\ntags: \n  - 笔记\ncategories: \n  - 笔记\ndescription: 数据库索引相关内容\ncover_img: https://images.unsplash.com/photo-1533750204176-3b0d38e9ac1e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\nfeature_img: https://images.unsplash.com/photo-1504639725590-34d0984388bd?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=967&q=80\n---\n\n## 索引\n\n#### 页存储\n\n<img src=\"https://i.loli.net/2019/12/05/dQE6NVkHZJcWfye.png\" style=\"zoom:50%;\" />\n\n如上就是数据库在Disk Storage的一个存储方式。一个页包含若干 *Data Rows* , 通过 *Row directory* 来进行索引\n\n> A row in a table can be uniquely specified with the page number (P) and slot number (S).\n\n##### 位图索引\n\nhttps://www.cnblogs.com/LBSer/p/3322630.html\n\n位图索引中只维护distinct值，也就是说重复的值是不维护在树中\n\n对于每一个列建立一个\n\n- 位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，而身份证号这种类型不适合用位图索引。\n\n- 此外，位图索引适合静态数据，而不适合索引频繁更新的列\n\n##### 散列索引\n\n散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个槽中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。\n\n散列索引根据对应键的散列码来找到最终的索引项的技术，其实和B树就差不多，也就是一种索引之上的二级辅助索引，我理解散列索引都是二级或更高级的稀疏索引，否则桶就太多了，效率也不会很高\n\n##### 聚簇索引\n\n所谓聚簇索引，就是指**主索引文件**和**数据文件**为==同一份文件==，聚簇索引主要用在**Innodb**存储引擎中。在该索引实现方式中B+Tree的叶子节点上的data就是数据本身，key为主键，如果是一般索引的话，data便会指向对应的主索引，如下图所示：\n\n在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。\n\n##### 非聚簇索引\n\n聚簇索引的叶节点就是数据节点，而非聚簇索引的叶节点仍然是索引节点，并保留一个链接**指向对应数据块**。\n\n##### 辅助索引\n\n在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要**二次查找**。辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据叶，再通过数据叶中的Page Directory找到数据行\n\n##### 唯一索引\n\n表明此索引的==每一个索引值只对应唯一的数据记录==，对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复\n\n##### 主键索引\n\n在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问\n\n---\n\n数据库引擎 ：myISAM , innodb\n\nmyisam索引：因为myisam的索引和数据是分开存储存储的，myisam通过**key_buffer**把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因  \n\ninnodb索引：innodb的数据和索引放在一起，当找到索引也就找到了数据\n\n<img src=\"https://img-blog.csdn.net/20161102111454921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\" style=\"zoom:75%;\" />\n\n1.对于**非聚簇索引表**来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据。\n\n2.对于**聚簇索引表**来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)\n\n> ##### 聚簇索引的优点\n>\n> 1.当你需要取出==一定范围内==的数据时，用聚簇索引也比用非聚簇索引好。\n>\n> 2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。\n>\n> 3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。\n>\n> ##### 聚簇索引的缺点\n>\n> 1.**插入速度严重依赖于插入顺序**，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。\n>\n> 2.**更新主键的代价很高，因为将会导致被更新的行移动**。因此，对于InnoDB表，我们一般定义主键为不可更新。\n>\n> 3.**二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。**\n>\n> 二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。\n>\n> 4.**采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多**，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价。\n\n\n\n","slug":"数据库整理-索引","published":1,"updated":"2020-10-19T09:47:13.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi18000ox8megf3i7c4j","content":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h4 id=\"页存储\"><a href=\"#页存储\" class=\"headerlink\" title=\"页存储\"></a>页存储</h4><img src=\"https://i.loli.net/2019/12/05/dQE6NVkHZJcWfye.png\" style=\"zoom:50%;\" />\n\n<p>如上就是数据库在Disk Storage的一个存储方式。一个页包含若干 <em>Data Rows</em> , 通过 <em>Row directory</em> 来进行索引</p>\n<blockquote>\n<p>A row in a table can be uniquely specified with the page number (P) and slot number (S).</p>\n</blockquote>\n<h5 id=\"位图索引\"><a href=\"#位图索引\" class=\"headerlink\" title=\"位图索引\"></a>位图索引</h5><p><a href=\"https://www.cnblogs.com/LBSer/p/3322630.html\">https://www.cnblogs.com/LBSer/p/3322630.html</a></p>\n<p>位图索引中只维护distinct值，也就是说重复的值是不维护在树中</p>\n<p>对于每一个列建立一个</p>\n<ul>\n<li><p>位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，而身份证号这种类型不适合用位图索引。</p>\n</li>\n<li><p>此外，位图索引适合静态数据，而不适合索引频繁更新的列</p>\n</li>\n</ul>\n<h5 id=\"散列索引\"><a href=\"#散列索引\" class=\"headerlink\" title=\"散列索引\"></a>散列索引</h5><p>散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个槽中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。</p>\n<p>散列索引根据对应键的散列码来找到最终的索引项的技术，其实和B树就差不多，也就是一种索引之上的二级辅助索引，我理解散列索引都是二级或更高级的稀疏索引，否则桶就太多了，效率也不会很高</p>\n<h5 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h5><p>所谓聚簇索引，就是指<strong>主索引文件</strong>和<strong>数据文件</strong>为==同一份文件==，聚簇索引主要用在<strong>Innodb</strong>存储引擎中。在该索引实现方式中B+Tree的叶子节点上的data就是数据本身，key为主键，如果是一般索引的话，data便会指向对应的主索引，如下图所示：</p>\n<p>在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。</p>\n<h5 id=\"非聚簇索引\"><a href=\"#非聚簇索引\" class=\"headerlink\" title=\"非聚簇索引\"></a>非聚簇索引</h5><p>聚簇索引的叶节点就是数据节点，而非聚簇索引的叶节点仍然是索引节点，并保留一个链接<strong>指向对应数据块</strong>。</p>\n<h5 id=\"辅助索引\"><a href=\"#辅助索引\" class=\"headerlink\" title=\"辅助索引\"></a>辅助索引</h5><p>在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要<strong>二次查找</strong>。辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据叶，再通过数据叶中的Page Directory找到数据行</p>\n<h5 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h5><p>表明此索引的==每一个索引值只对应唯一的数据记录==，对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复</p>\n<h5 id=\"主键索引\"><a href=\"#主键索引\" class=\"headerlink\" title=\"主键索引\"></a>主键索引</h5><p>在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问</p>\n<hr>\n<p>数据库引擎 ：myISAM , innodb</p>\n<p>myisam索引：因为myisam的索引和数据是分开存储存储的，myisam通过<strong>key_buffer</strong>把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因  </p>\n<p>innodb索引：innodb的数据和索引放在一起，当找到索引也就找到了数据</p>\n<img src=\"https://img-blog.csdn.net/20161102111454921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\" style=\"zoom:75%;\" />\n\n<p>1.对于<strong>非聚簇索引表</strong>来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据。</p>\n<p>2.对于<strong>聚簇索引表</strong>来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)</p>\n<blockquote>\n<h5 id=\"聚簇索引的优点\"><a href=\"#聚簇索引的优点\" class=\"headerlink\" title=\"聚簇索引的优点\"></a>聚簇索引的优点</h5><p>1.当你需要取出==一定范围内==的数据时，用聚簇索引也比用非聚簇索引好。</p>\n<p>2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。</p>\n<p>3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</p>\n<h5 id=\"聚簇索引的缺点\"><a href=\"#聚簇索引的缺点\" class=\"headerlink\" title=\"聚簇索引的缺点\"></a>聚簇索引的缺点</h5><p>1.<strong>插入速度严重依赖于插入顺序</strong>，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。</p>\n<p>2.<strong>更新主键的代价很高，因为将会导致被更新的行移动</strong>。因此，对于InnoDB表，我们一般定义主键为不可更新。</p>\n<p>3.<strong>二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。</strong></p>\n<p>二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。</p>\n<p>4.<strong>采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多</strong>，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价。</p>\n</blockquote>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603194477925-b65a2d92d015?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","excerpt":"","more":"<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h4 id=\"页存储\"><a href=\"#页存储\" class=\"headerlink\" title=\"页存储\"></a>页存储</h4><img src=\"https://i.loli.net/2019/12/05/dQE6NVkHZJcWfye.png\" style=\"zoom:50%;\" />\n\n<p>如上就是数据库在Disk Storage的一个存储方式。一个页包含若干 <em>Data Rows</em> , 通过 <em>Row directory</em> 来进行索引</p>\n<blockquote>\n<p>A row in a table can be uniquely specified with the page number (P) and slot number (S).</p>\n</blockquote>\n<h5 id=\"位图索引\"><a href=\"#位图索引\" class=\"headerlink\" title=\"位图索引\"></a>位图索引</h5><p><a href=\"https://www.cnblogs.com/LBSer/p/3322630.html\">https://www.cnblogs.com/LBSer/p/3322630.html</a></p>\n<p>位图索引中只维护distinct值，也就是说重复的值是不维护在树中</p>\n<p>对于每一个列建立一个</p>\n<ul>\n<li><p>位图索引适合只有几个固定值的列，如性别、婚姻状况、行政区等等，而身份证号这种类型不适合用位图索引。</p>\n</li>\n<li><p>此外，位图索引适合静态数据，而不适合索引频繁更新的列</p>\n</li>\n</ul>\n<h5 id=\"散列索引\"><a href=\"#散列索引\" class=\"headerlink\" title=\"散列索引\"></a>散列索引</h5><p>散列文件组织就是根据一个键通过散列计算把对应的记录都放到同一个槽中，这样的话相同的键值对应的记录就一定是放在同一个文件里了，也就减少了文件读取的次数，提高了效率。</p>\n<p>散列索引根据对应键的散列码来找到最终的索引项的技术，其实和B树就差不多，也就是一种索引之上的二级辅助索引，我理解散列索引都是二级或更高级的稀疏索引，否则桶就太多了，效率也不会很高</p>\n<h5 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h5><p>所谓聚簇索引，就是指<strong>主索引文件</strong>和<strong>数据文件</strong>为==同一份文件==，聚簇索引主要用在<strong>Innodb</strong>存储引擎中。在该索引实现方式中B+Tree的叶子节点上的data就是数据本身，key为主键，如果是一般索引的话，data便会指向对应的主索引，如下图所示：</p>\n<p>在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。</p>\n<h5 id=\"非聚簇索引\"><a href=\"#非聚簇索引\" class=\"headerlink\" title=\"非聚簇索引\"></a>非聚簇索引</h5><p>聚簇索引的叶节点就是数据节点，而非聚簇索引的叶节点仍然是索引节点，并保留一个链接<strong>指向对应数据块</strong>。</p>\n<h5 id=\"辅助索引\"><a href=\"#辅助索引\" class=\"headerlink\" title=\"辅助索引\"></a>辅助索引</h5><p>在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要<strong>二次查找</strong>。辅助索引叶子节点存储的不再是行的物理位置，而是主键值。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据叶，再通过数据叶中的Page Directory找到数据行</p>\n<h5 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h5><p>表明此索引的==每一个索引值只对应唯一的数据记录==，对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复</p>\n<h5 id=\"主键索引\"><a href=\"#主键索引\" class=\"headerlink\" title=\"主键索引\"></a>主键索引</h5><p>在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问</p>\n<hr>\n<p>数据库引擎 ：myISAM , innodb</p>\n<p>myisam索引：因为myisam的索引和数据是分开存储存储的，myisam通过<strong>key_buffer</strong>把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因  </p>\n<p>innodb索引：innodb的数据和索引放在一起，当找到索引也就找到了数据</p>\n<img src=\"https://img-blog.csdn.net/20161102111454921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"img\" style=\"zoom:75%;\" />\n\n<p>1.对于<strong>非聚簇索引表</strong>来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的数据。</p>\n<p>2.对于<strong>聚簇索引表</strong>来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)</p>\n<blockquote>\n<h5 id=\"聚簇索引的优点\"><a href=\"#聚簇索引的优点\" class=\"headerlink\" title=\"聚簇索引的优点\"></a>聚簇索引的优点</h5><p>1.当你需要取出==一定范围内==的数据时，用聚簇索引也比用非聚簇索引好。</p>\n<p>2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。</p>\n<p>3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</p>\n<h5 id=\"聚簇索引的缺点\"><a href=\"#聚簇索引的缺点\" class=\"headerlink\" title=\"聚簇索引的缺点\"></a>聚簇索引的缺点</h5><p>1.<strong>插入速度严重依赖于插入顺序</strong>，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。</p>\n<p>2.<strong>更新主键的代价很高，因为将会导致被更新的行移动</strong>。因此，对于InnoDB表，我们一般定义主键为不可更新。</p>\n<p>3.<strong>二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。</strong></p>\n<p>二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。</p>\n<p>4.<strong>采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多</strong>，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价。</p>\n</blockquote>\n"},{"title":"杂谈-沉思帖","date":"2019-12-22T15:35:20.000Z","description":"总结2019经历","cover_img":"https://images.unsplash.com/photo-1526285592708-e83cf5365929?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","feature_img":"https://images.unsplash.com/photo-1495539406979-bf61750d38ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80","_content":"\n> 多尝试新的方向，不浮躁地随波逐流；\n>\n> 有一个自己喜爱的方向是如此地难能可贵\n\n## 杂谈-沉思帖\n\n2019 秋季这个课表算是无法无天了，虽然在春季就做了一些心理预设，但是当它到来的时候，特别是到了现在考试周将近，还是压得人喘不过气。\n\n前一段时间一直在各处投递简历。在打消了出国打算、ML的打算之后，我从暑期就开始对自己的方向进行了思考，留给我试错的时间已经不多了，在后续的一年半时间中，我是需要针对一桩事业真正投入地进行付出，并且能够有一定的产出的。在我各处找着实习的时候，字节一面后十分钟的拒信给了我巨大的打击——\n\n> 基础不牢，地动山摇\n\n面试官丢给我的几乎每一个计网问题我都招架不来，可以说上个学期学的内容全数奉还给了老师。内心千万个声音在警戒着我：你的基础根本不牢固，做了种种项目又有什么用？\n\n图森的面试官告诉我，如果这些基本的网络知识不过关，如何能够在出错的时候进行精准的错误排查？特别是在客户流量比较大的情况下，网络阻塞、丢包这些错误屡见不鲜，如何可以最大限度地减少经济损失？\n\n> 网络协议中每一层的网络攻击可以有哪些？\n\n这个问题我可能一辈子也不忘了，图森的二面官这么一个问题丢过来，我当时的反应就是：一个也没有。\n\n后续的结果也显而易见，又是一封拒信。虽然 `coding` 过关，但是基础过于不扎实而不会要我。\n\n所以，基础 基础 基础！！！\n\n什么叫做基础呢？\n\n其实这些问题，老师课上也没有系统性的说过。我丢失了大一的时候看书的习惯，大二只是对课堂内的东西进行机械接受。最讽刺的就是，当字节面试官问“你觉得计网是一门怎么样的课”的时候，我第一反应回答就是“一门背书的课”。我现在回顾过来，真想好好打当时的自己一个巴掌。不过事实的确如此，我在大二下就是背书来学计网的，当时的我根本没有心思听老师讲课，只想着多做一些项目美滋滋。\n\n现在就到了要亡羊补牢的时候了，11月上旬的样子吧，我开始恶补我之前的 `JVM`, 计网，多线程，`linux` 内核相关的知识。加上后续几个面试的逼迫，我可以说拼了老命在学 (这么紧的课程还要面试，真的会折磨我自己)\n\n`12.21` ，*TX* 的面试官突然打来电话，约了一面。可以说这次是我把握比较好的一次面试了。说着，人的确就是一个犯贱的种，需要一些外力压迫来威胁自己去学习。还有一个很重要的点就是，我真的过于浮躁了，急于求成想去学 *ML* 但是发现真实资源如此贫乏(一整个院搞什么ML? 我们又不是人工智能学院！) 没有一个前辈带领的路走得真心艰苦，没有方向，没有可以去追随的人，于是放弃。现在是时候好好静下心去听听自己了。\n\n> 冬至已至。\n>\n> 希望新的一年，能够笃定，坚毅。","source":"_posts/杂谈-鸡血帖.md","raw":"---\ntitle: 杂谈-沉思帖\ndate: 2019-12-22 23:35:20\ntags: \n  - UpUp\ncategories: \n  - 杂谈\ndescription: 总结2019经历\ncover_img: https://images.unsplash.com/photo-1526285592708-e83cf5365929?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\nfeature_img: https://images.unsplash.com/photo-1495539406979-bf61750d38ad?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\n---\n\n> 多尝试新的方向，不浮躁地随波逐流；\n>\n> 有一个自己喜爱的方向是如此地难能可贵\n\n## 杂谈-沉思帖\n\n2019 秋季这个课表算是无法无天了，虽然在春季就做了一些心理预设，但是当它到来的时候，特别是到了现在考试周将近，还是压得人喘不过气。\n\n前一段时间一直在各处投递简历。在打消了出国打算、ML的打算之后，我从暑期就开始对自己的方向进行了思考，留给我试错的时间已经不多了，在后续的一年半时间中，我是需要针对一桩事业真正投入地进行付出，并且能够有一定的产出的。在我各处找着实习的时候，字节一面后十分钟的拒信给了我巨大的打击——\n\n> 基础不牢，地动山摇\n\n面试官丢给我的几乎每一个计网问题我都招架不来，可以说上个学期学的内容全数奉还给了老师。内心千万个声音在警戒着我：你的基础根本不牢固，做了种种项目又有什么用？\n\n图森的面试官告诉我，如果这些基本的网络知识不过关，如何能够在出错的时候进行精准的错误排查？特别是在客户流量比较大的情况下，网络阻塞、丢包这些错误屡见不鲜，如何可以最大限度地减少经济损失？\n\n> 网络协议中每一层的网络攻击可以有哪些？\n\n这个问题我可能一辈子也不忘了，图森的二面官这么一个问题丢过来，我当时的反应就是：一个也没有。\n\n后续的结果也显而易见，又是一封拒信。虽然 `coding` 过关，但是基础过于不扎实而不会要我。\n\n所以，基础 基础 基础！！！\n\n什么叫做基础呢？\n\n其实这些问题，老师课上也没有系统性的说过。我丢失了大一的时候看书的习惯，大二只是对课堂内的东西进行机械接受。最讽刺的就是，当字节面试官问“你觉得计网是一门怎么样的课”的时候，我第一反应回答就是“一门背书的课”。我现在回顾过来，真想好好打当时的自己一个巴掌。不过事实的确如此，我在大二下就是背书来学计网的，当时的我根本没有心思听老师讲课，只想着多做一些项目美滋滋。\n\n现在就到了要亡羊补牢的时候了，11月上旬的样子吧，我开始恶补我之前的 `JVM`, 计网，多线程，`linux` 内核相关的知识。加上后续几个面试的逼迫，我可以说拼了老命在学 (这么紧的课程还要面试，真的会折磨我自己)\n\n`12.21` ，*TX* 的面试官突然打来电话，约了一面。可以说这次是我把握比较好的一次面试了。说着，人的确就是一个犯贱的种，需要一些外力压迫来威胁自己去学习。还有一个很重要的点就是，我真的过于浮躁了，急于求成想去学 *ML* 但是发现真实资源如此贫乏(一整个院搞什么ML? 我们又不是人工智能学院！) 没有一个前辈带领的路走得真心艰苦，没有方向，没有可以去追随的人，于是放弃。现在是时候好好静下心去听听自己了。\n\n> 冬至已至。\n>\n> 希望新的一年，能够笃定，坚毅。","slug":"杂谈-鸡血帖","published":1,"updated":"2020-10-19T09:47:13.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi1a000qx8mefr8oc7d9","content":"<blockquote>\n<p>多尝试新的方向，不浮躁地随波逐流；</p>\n<p>有一个自己喜爱的方向是如此地难能可贵</p>\n</blockquote>\n<h2 id=\"杂谈-沉思帖\"><a href=\"#杂谈-沉思帖\" class=\"headerlink\" title=\"杂谈-沉思帖\"></a>杂谈-沉思帖</h2><p>2019 秋季这个课表算是无法无天了，虽然在春季就做了一些心理预设，但是当它到来的时候，特别是到了现在考试周将近，还是压得人喘不过气。</p>\n<p>前一段时间一直在各处投递简历。在打消了出国打算、ML的打算之后，我从暑期就开始对自己的方向进行了思考，留给我试错的时间已经不多了，在后续的一年半时间中，我是需要针对一桩事业真正投入地进行付出，并且能够有一定的产出的。在我各处找着实习的时候，字节一面后十分钟的拒信给了我巨大的打击——</p>\n<blockquote>\n<p>基础不牢，地动山摇</p>\n</blockquote>\n<p>面试官丢给我的几乎每一个计网问题我都招架不来，可以说上个学期学的内容全数奉还给了老师。内心千万个声音在警戒着我：你的基础根本不牢固，做了种种项目又有什么用？</p>\n<p>图森的面试官告诉我，如果这些基本的网络知识不过关，如何能够在出错的时候进行精准的错误排查？特别是在客户流量比较大的情况下，网络阻塞、丢包这些错误屡见不鲜，如何可以最大限度地减少经济损失？</p>\n<blockquote>\n<p>网络协议中每一层的网络攻击可以有哪些？</p>\n</blockquote>\n<p>这个问题我可能一辈子也不忘了，图森的二面官这么一个问题丢过来，我当时的反应就是：一个也没有。</p>\n<p>后续的结果也显而易见，又是一封拒信。虽然 <code>coding</code> 过关，但是基础过于不扎实而不会要我。</p>\n<p>所以，基础 基础 基础！！！</p>\n<p>什么叫做基础呢？</p>\n<p>其实这些问题，老师课上也没有系统性的说过。我丢失了大一的时候看书的习惯，大二只是对课堂内的东西进行机械接受。最讽刺的就是，当字节面试官问“你觉得计网是一门怎么样的课”的时候，我第一反应回答就是“一门背书的课”。我现在回顾过来，真想好好打当时的自己一个巴掌。不过事实的确如此，我在大二下就是背书来学计网的，当时的我根本没有心思听老师讲课，只想着多做一些项目美滋滋。</p>\n<p>现在就到了要亡羊补牢的时候了，11月上旬的样子吧，我开始恶补我之前的 <code>JVM</code>, 计网，多线程，<code>linux</code> 内核相关的知识。加上后续几个面试的逼迫，我可以说拼了老命在学 (这么紧的课程还要面试，真的会折磨我自己)</p>\n<p><code>12.21</code> ，<em>TX</em> 的面试官突然打来电话，约了一面。可以说这次是我把握比较好的一次面试了。说着，人的确就是一个犯贱的种，需要一些外力压迫来威胁自己去学习。还有一个很重要的点就是，我真的过于浮躁了，急于求成想去学 <em>ML</em> 但是发现真实资源如此贫乏(一整个院搞什么ML? 我们又不是人工智能学院！) 没有一个前辈带领的路走得真心艰苦，没有方向，没有可以去追随的人，于是放弃。现在是时候好好静下心去听听自己了。</p>\n<blockquote>\n<p>冬至已至。</p>\n<p>希望新的一年，能够笃定，坚毅。</p>\n</blockquote>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603194477925-b65a2d92d015?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","excerpt":"","more":"<blockquote>\n<p>多尝试新的方向，不浮躁地随波逐流；</p>\n<p>有一个自己喜爱的方向是如此地难能可贵</p>\n</blockquote>\n<h2 id=\"杂谈-沉思帖\"><a href=\"#杂谈-沉思帖\" class=\"headerlink\" title=\"杂谈-沉思帖\"></a>杂谈-沉思帖</h2><p>2019 秋季这个课表算是无法无天了，虽然在春季就做了一些心理预设，但是当它到来的时候，特别是到了现在考试周将近，还是压得人喘不过气。</p>\n<p>前一段时间一直在各处投递简历。在打消了出国打算、ML的打算之后，我从暑期就开始对自己的方向进行了思考，留给我试错的时间已经不多了，在后续的一年半时间中，我是需要针对一桩事业真正投入地进行付出，并且能够有一定的产出的。在我各处找着实习的时候，字节一面后十分钟的拒信给了我巨大的打击——</p>\n<blockquote>\n<p>基础不牢，地动山摇</p>\n</blockquote>\n<p>面试官丢给我的几乎每一个计网问题我都招架不来，可以说上个学期学的内容全数奉还给了老师。内心千万个声音在警戒着我：你的基础根本不牢固，做了种种项目又有什么用？</p>\n<p>图森的面试官告诉我，如果这些基本的网络知识不过关，如何能够在出错的时候进行精准的错误排查？特别是在客户流量比较大的情况下，网络阻塞、丢包这些错误屡见不鲜，如何可以最大限度地减少经济损失？</p>\n<blockquote>\n<p>网络协议中每一层的网络攻击可以有哪些？</p>\n</blockquote>\n<p>这个问题我可能一辈子也不忘了，图森的二面官这么一个问题丢过来，我当时的反应就是：一个也没有。</p>\n<p>后续的结果也显而易见，又是一封拒信。虽然 <code>coding</code> 过关，但是基础过于不扎实而不会要我。</p>\n<p>所以，基础 基础 基础！！！</p>\n<p>什么叫做基础呢？</p>\n<p>其实这些问题，老师课上也没有系统性的说过。我丢失了大一的时候看书的习惯，大二只是对课堂内的东西进行机械接受。最讽刺的就是，当字节面试官问“你觉得计网是一门怎么样的课”的时候，我第一反应回答就是“一门背书的课”。我现在回顾过来，真想好好打当时的自己一个巴掌。不过事实的确如此，我在大二下就是背书来学计网的，当时的我根本没有心思听老师讲课，只想着多做一些项目美滋滋。</p>\n<p>现在就到了要亡羊补牢的时候了，11月上旬的样子吧，我开始恶补我之前的 <code>JVM</code>, 计网，多线程，<code>linux</code> 内核相关的知识。加上后续几个面试的逼迫，我可以说拼了老命在学 (这么紧的课程还要面试，真的会折磨我自己)</p>\n<p><code>12.21</code> ，<em>TX</em> 的面试官突然打来电话，约了一面。可以说这次是我把握比较好的一次面试了。说着，人的确就是一个犯贱的种，需要一些外力压迫来威胁自己去学习。还有一个很重要的点就是，我真的过于浮躁了，急于求成想去学 <em>ML</em> 但是发现真实资源如此贫乏(一整个院搞什么ML? 我们又不是人工智能学院！) 没有一个前辈带领的路走得真心艰苦，没有方向，没有可以去追随的人，于是放弃。现在是时候好好静下心去听听自己了。</p>\n<blockquote>\n<p>冬至已至。</p>\n<p>希望新的一年，能够笃定，坚毅。</p>\n</blockquote>\n"},{"title":"聊一聊一致性的话题","date":"2020-04-09T13:02:05.000Z","cover_img":"https://images.unsplash.com/photo-1559251434-4e172832c9de?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=700&q=80","feature_img":"https://images.unsplash.com/photo-1571606809798-027ae70d593f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","description":null,"keywords":null,"_content":"\n## 主从复制\n\n在分布式的 *CAP* 理论中，一致和可用我们往往都只能够偏向于其中的一者。这一点这里只是简单提一下。例如我们的 `zk`满足的就是 *CP*\n\n<img src=\"https://img2018.cnblogs.com/blog/285763/201906/285763-20190621144256061-464757033.png\" alt=\"img\"  />\n\n今天主要谈一谈数据库当中的一个 **一致性** 话题\n\n### Mysql 主从复制\n\n> 在分布式的数据库系统中，如果主数据库发生了故障，那么需要能够及时切换到从数据库，并且进行数据的恢复工作。如何保证主从数据库之间的数据一致性也就成为了焦点问题。这次把目光聚焦在 `Mysql` 上，探究它的主从复制原理\n>\n> 对于这些数据库而言，严格的一致性是一个目标\n\n![image.png](https://i.loli.net/2020/04/09/e7iz9aotfqmlGHM.png)\n\n- 主节点 `Master` 进行数据更新之后，会将更新日志写入 `binlog` 当中。此时创建的是第一个线程 `binlong dump thread`\n- 随后从节点 `Slave`发起连接，连接到 `Master` ，从节点启东之后，启动线程 `IO thread` ，用于将 `binlog ` 内容写入到从节点的 `relay log` \n- 从节点随后创建 `SQL thread` ，用于从 `relay log` 中读取内容，并且开始进行写入操作\n\n### Redis 主从复制\n\n> 其主要的目的和 `Mysql` 一致，都是为了避免主节点失效之后的数据备份\n\n#### 完整复制过程\n\n- 启动 `Slave` ，建立和主节点 `Master` 的连接，发送 `sync` 命令\n- `Master` 启动一个后台进程，将当前的快照存储到 `RDB`当中\n  - 写入 `RDB` 的同时，可能会有数据的不一致性。这时候 `Master` 主进程会把写命令缓存\n- `Master` 发送 `RDB` 给 `Slave` ，随后 `Slave` 进行磁盘保存\n- `Slave` 加载 `RDB` 文件到内存恢复；\n- `Master` 发送缓存给 `Slave`\n\n> 存在的问题：\n>\n> 如果 `Slave` 停止运行，再次运行的时候可能部分的数据不同步；这时候的全数据恢复会非常耗时\n\n#### 部分复制过程 \n\n- `Slave` 连接 `Master` 之后，会主动发起 `PSYNC` 命令，`Slave` 提供 `runid` , `offset` 。如果 `Master` 认定无效，那么进行完整复制；否则根据  `offset` 进行部分数据的同步","source":"_posts/聊一聊一致性话题.md","raw":"---\ntitle: 聊一聊一致性的话题\ndate: 2020-04-09 21:02:05\ntags:\ncover_img: https://images.unsplash.com/photo-1559251434-4e172832c9de?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=700&q=80\nfeature_img: https://images.unsplash.com/photo-1571606809798-027ae70d593f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\ndescription:\nkeywords:\n---\n\n## 主从复制\n\n在分布式的 *CAP* 理论中，一致和可用我们往往都只能够偏向于其中的一者。这一点这里只是简单提一下。例如我们的 `zk`满足的就是 *CP*\n\n<img src=\"https://img2018.cnblogs.com/blog/285763/201906/285763-20190621144256061-464757033.png\" alt=\"img\"  />\n\n今天主要谈一谈数据库当中的一个 **一致性** 话题\n\n### Mysql 主从复制\n\n> 在分布式的数据库系统中，如果主数据库发生了故障，那么需要能够及时切换到从数据库，并且进行数据的恢复工作。如何保证主从数据库之间的数据一致性也就成为了焦点问题。这次把目光聚焦在 `Mysql` 上，探究它的主从复制原理\n>\n> 对于这些数据库而言，严格的一致性是一个目标\n\n![image.png](https://i.loli.net/2020/04/09/e7iz9aotfqmlGHM.png)\n\n- 主节点 `Master` 进行数据更新之后，会将更新日志写入 `binlog` 当中。此时创建的是第一个线程 `binlong dump thread`\n- 随后从节点 `Slave`发起连接，连接到 `Master` ，从节点启东之后，启动线程 `IO thread` ，用于将 `binlog ` 内容写入到从节点的 `relay log` \n- 从节点随后创建 `SQL thread` ，用于从 `relay log` 中读取内容，并且开始进行写入操作\n\n### Redis 主从复制\n\n> 其主要的目的和 `Mysql` 一致，都是为了避免主节点失效之后的数据备份\n\n#### 完整复制过程\n\n- 启动 `Slave` ，建立和主节点 `Master` 的连接，发送 `sync` 命令\n- `Master` 启动一个后台进程，将当前的快照存储到 `RDB`当中\n  - 写入 `RDB` 的同时，可能会有数据的不一致性。这时候 `Master` 主进程会把写命令缓存\n- `Master` 发送 `RDB` 给 `Slave` ，随后 `Slave` 进行磁盘保存\n- `Slave` 加载 `RDB` 文件到内存恢复；\n- `Master` 发送缓存给 `Slave`\n\n> 存在的问题：\n>\n> 如果 `Slave` 停止运行，再次运行的时候可能部分的数据不同步；这时候的全数据恢复会非常耗时\n\n#### 部分复制过程 \n\n- `Slave` 连接 `Master` 之后，会主动发起 `PSYNC` 命令，`Slave` 提供 `runid` , `offset` 。如果 `Master` 认定无效，那么进行完整复制；否则根据  `offset` 进行部分数据的同步","slug":"聊一聊一致性话题","published":1,"updated":"2020-10-19T09:47:13.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi1b000vx8meep3jevzr","content":"<h2 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h2><p>在分布式的 <em>CAP</em> 理论中，一致和可用我们往往都只能够偏向于其中的一者。这一点这里只是简单提一下。例如我们的 <code>zk</code>满足的就是 <em>CP</em></p>\n<img src=\"https://img2018.cnblogs.com/blog/285763/201906/285763-20190621144256061-464757033.png\" alt=\"img\"  />\n\n<p>今天主要谈一谈数据库当中的一个 <strong>一致性</strong> 话题</p>\n<h3 id=\"Mysql-主从复制\"><a href=\"#Mysql-主从复制\" class=\"headerlink\" title=\"Mysql 主从复制\"></a>Mysql 主从复制</h3><blockquote>\n<p>在分布式的数据库系统中，如果主数据库发生了故障，那么需要能够及时切换到从数据库，并且进行数据的恢复工作。如何保证主从数据库之间的数据一致性也就成为了焦点问题。这次把目光聚焦在 <code>Mysql</code> 上，探究它的主从复制原理</p>\n<p>对于这些数据库而言，严格的一致性是一个目标</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/04/09/e7iz9aotfqmlGHM.png\" alt=\"image.png\"></p>\n<ul>\n<li>主节点 <code>Master</code> 进行数据更新之后，会将更新日志写入 <code>binlog</code> 当中。此时创建的是第一个线程 <code>binlong dump thread</code></li>\n<li>随后从节点 <code>Slave</code>发起连接，连接到 <code>Master</code> ，从节点启东之后，启动线程 <code>IO thread</code> ，用于将 <code>binlog </code> 内容写入到从节点的 <code>relay log</code> </li>\n<li>从节点随后创建 <code>SQL thread</code> ，用于从 <code>relay log</code> 中读取内容，并且开始进行写入操作</li>\n</ul>\n<h3 id=\"Redis-主从复制\"><a href=\"#Redis-主从复制\" class=\"headerlink\" title=\"Redis 主从复制\"></a>Redis 主从复制</h3><blockquote>\n<p>其主要的目的和 <code>Mysql</code> 一致，都是为了避免主节点失效之后的数据备份</p>\n</blockquote>\n<h4 id=\"完整复制过程\"><a href=\"#完整复制过程\" class=\"headerlink\" title=\"完整复制过程\"></a>完整复制过程</h4><ul>\n<li>启动 <code>Slave</code> ，建立和主节点 <code>Master</code> 的连接，发送 <code>sync</code> 命令</li>\n<li><code>Master</code> 启动一个后台进程，将当前的快照存储到 <code>RDB</code>当中<ul>\n<li>写入 <code>RDB</code> 的同时，可能会有数据的不一致性。这时候 <code>Master</code> 主进程会把写命令缓存</li>\n</ul>\n</li>\n<li><code>Master</code> 发送 <code>RDB</code> 给 <code>Slave</code> ，随后 <code>Slave</code> 进行磁盘保存</li>\n<li><code>Slave</code> 加载 <code>RDB</code> 文件到内存恢复；</li>\n<li><code>Master</code> 发送缓存给 <code>Slave</code></li>\n</ul>\n<blockquote>\n<p>存在的问题：</p>\n<p>如果 <code>Slave</code> 停止运行，再次运行的时候可能部分的数据不同步；这时候的全数据恢复会非常耗时</p>\n</blockquote>\n<h4 id=\"部分复制过程\"><a href=\"#部分复制过程\" class=\"headerlink\" title=\"部分复制过程\"></a>部分复制过程</h4><ul>\n<li><code>Slave</code> 连接 <code>Master</code> 之后，会主动发起 <code>PSYNC</code> 命令，<code>Slave</code> 提供 <code>runid</code> , <code>offset</code> 。如果 <code>Master</code> 认定无效，那么进行完整复制；否则根据  <code>offset</code> 进行部分数据的同步</li>\n</ul>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603194477925-b65a2d92d015?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","excerpt":"","more":"<h2 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h2><p>在分布式的 <em>CAP</em> 理论中，一致和可用我们往往都只能够偏向于其中的一者。这一点这里只是简单提一下。例如我们的 <code>zk</code>满足的就是 <em>CP</em></p>\n<img src=\"https://img2018.cnblogs.com/blog/285763/201906/285763-20190621144256061-464757033.png\" alt=\"img\"  />\n\n<p>今天主要谈一谈数据库当中的一个 <strong>一致性</strong> 话题</p>\n<h3 id=\"Mysql-主从复制\"><a href=\"#Mysql-主从复制\" class=\"headerlink\" title=\"Mysql 主从复制\"></a>Mysql 主从复制</h3><blockquote>\n<p>在分布式的数据库系统中，如果主数据库发生了故障，那么需要能够及时切换到从数据库，并且进行数据的恢复工作。如何保证主从数据库之间的数据一致性也就成为了焦点问题。这次把目光聚焦在 <code>Mysql</code> 上，探究它的主从复制原理</p>\n<p>对于这些数据库而言，严格的一致性是一个目标</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/04/09/e7iz9aotfqmlGHM.png\" alt=\"image.png\"></p>\n<ul>\n<li>主节点 <code>Master</code> 进行数据更新之后，会将更新日志写入 <code>binlog</code> 当中。此时创建的是第一个线程 <code>binlong dump thread</code></li>\n<li>随后从节点 <code>Slave</code>发起连接，连接到 <code>Master</code> ，从节点启东之后，启动线程 <code>IO thread</code> ，用于将 <code>binlog </code> 内容写入到从节点的 <code>relay log</code> </li>\n<li>从节点随后创建 <code>SQL thread</code> ，用于从 <code>relay log</code> 中读取内容，并且开始进行写入操作</li>\n</ul>\n<h3 id=\"Redis-主从复制\"><a href=\"#Redis-主从复制\" class=\"headerlink\" title=\"Redis 主从复制\"></a>Redis 主从复制</h3><blockquote>\n<p>其主要的目的和 <code>Mysql</code> 一致，都是为了避免主节点失效之后的数据备份</p>\n</blockquote>\n<h4 id=\"完整复制过程\"><a href=\"#完整复制过程\" class=\"headerlink\" title=\"完整复制过程\"></a>完整复制过程</h4><ul>\n<li>启动 <code>Slave</code> ，建立和主节点 <code>Master</code> 的连接，发送 <code>sync</code> 命令</li>\n<li><code>Master</code> 启动一个后台进程，将当前的快照存储到 <code>RDB</code>当中<ul>\n<li>写入 <code>RDB</code> 的同时，可能会有数据的不一致性。这时候 <code>Master</code> 主进程会把写命令缓存</li>\n</ul>\n</li>\n<li><code>Master</code> 发送 <code>RDB</code> 给 <code>Slave</code> ，随后 <code>Slave</code> 进行磁盘保存</li>\n<li><code>Slave</code> 加载 <code>RDB</code> 文件到内存恢复；</li>\n<li><code>Master</code> 发送缓存给 <code>Slave</code></li>\n</ul>\n<blockquote>\n<p>存在的问题：</p>\n<p>如果 <code>Slave</code> 停止运行，再次运行的时候可能部分的数据不同步；这时候的全数据恢复会非常耗时</p>\n</blockquote>\n<h4 id=\"部分复制过程\"><a href=\"#部分复制过程\" class=\"headerlink\" title=\"部分复制过程\"></a>部分复制过程</h4><ul>\n<li><code>Slave</code> 连接 <code>Master</code> 之后，会主动发起 <code>PSYNC</code> 命令，<code>Slave</code> 提供 <code>runid</code> , <code>offset</code> 。如果 <code>Master</code> 认定无效，那么进行完整复制；否则根据  <code>offset</code> 进行部分数据的同步</li>\n</ul>\n"},{"title":"背包问题","date":"2020-01-15T09:13:36.000Z","description":"关注背包九讲中的内容, 重点考察DP的思考想法","cover_img":"https://images.unsplash.com/photo-1581463455583-40abcfc90be7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80","feature_img":"https://images.unsplash.com/photo-1581463455583-40abcfc90be7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80","_content":"\n### 1. 01背包问题\n\n有 $N$ 件物品和一个容量是 $V$ 的背包。每件物品只能使用一次。\n\n分析：\n\n- 每一个背包只有 **拿出 or 不拿出** 两种情况\n- 对于 **dp** 数组，我们某一个状态 `dp[i][j]` 表示 **前i种背包的情况下，他们的总重量是 j 的最优解**\n  - 如果 **i** 背包不拿，那么 `dp[i][j] = dp[i - 1][j]`\n  - 如果 **i** 背包拿取，那么 `dp[i][j] = dp[i - 1][j - weights[i]] + values[i]`\n    - 也就是说，拿取之后，需要看剩下的部分最优解\n\n#### 算法优化\n\n根据之前的状态转移方程，我们可以约减一维的 **dp** 空间\n\n改进之后的 **dp** 状态转移方程如下：\n\n`dp[i] = max(dp[j], dp[j - weights[i]] + values[i])`\n\n> 为什么在内层循环，**j** 需要逆序？\n>\n> 在没有开始计算的时候，**dp[i]表示的是dp\\[i-1]\\[j]** 。而当我们需要计算 `dp[i] = max(dp[j], dp[j - weights[i]] + values[i])`的时候，需要保证 `dp[j - w[i]]` 是 **没有被改变的**。因此需要**从后往前**\n\n### 2. 完全背包问题\n\n每一件物品可以 **无限次** 拿取\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\nint main(){\n    int N , V;\n    cin >> N >> V;\n    vector<int> w(N + 1) , v(N + 1);\n    for(int i = 1 ; i <= N ; ++i) cin >> w[i] >> v[i];\n    \n    vector<vector<int>> dp(N + 1 , vector<int>(V + 1 , 0));\n    \n    for(int i = 1; i <= N ; ++i){\n        for(int j = 0 ;j <= V; ++j){\n            dp[i][j] = dp[i - 1][j];\n            for(int k = 0 ; k*w[i] <= j; ++k){\n                dp[i][j] = max(dp[i][j] , dp[i][j - k * w[i]] + k * v[i]);\n            }\n        }\n    }\n    \n    cout << dp[N][V] << endl;\n    \n}\n```\n\n最重要的状态转移方程对比\n\n- **01背包** ：`dp[i][j] = max(dp[i-1][j],dp[i - 1][j - w[i]] + v[i])`\n- **完全背包** ：`dp[i][j] = max(dp[i][j] , dp[i - 1][j - k * w[i]] + k * v[i]);`\n\n不难看出，两者其实非常的类似。根据下标我们可以给出压缩之后的优化版本完全背包解法\n\n> **01背包** 和 **完全背包** 的不同\n>\n> ```cpp\n> //01背包\n> for i  in 0 ... N\n>     for  j = V ... 0\n>         f[j] = max{f[j], f[j - weight[i]] + value[i]}\n> //完全背包\n> for i int 0 ... N\n>   \tfor\t j = 0 ... V\n>       \tf[j] = max{f[j] , f[j - weight[j]] + value[i]}\n> ```\n>\n> 可以看出，只有内层循环的执行顺序不同\n\n给出 **完全背包问题** 的优化方案\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n    int n , capacity;\n    cin >> n >> capacity;\n    vector<int> c(n + 1) , w(n + 1);\n    vector<int> dp(max(n , capacity));\n    for(int i = 1 ; i <= n ;++i) cin >> c[i] >> w[i];\n    \n    for(int i = 1; i <= n ;++i)\n        for(int j = c[i] ; j <= capacity ; ++j)\n            dp[j] = max(dp[j] , dp[j - c[i]] + w[i]);\n    \n    cout << dp[capacity];\n}\n```\n\n","source":"_posts/背包问题.md","raw":"---\ntitle: 背包问题\ndate: 2020-01-15 17:13:36\ntags: 算法\ndescription: 关注背包九讲中的内容, 重点考察DP的思考想法\ncover_img: https://images.unsplash.com/photo-1581463455583-40abcfc90be7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80\nfeature_img: https://images.unsplash.com/photo-1581463455583-40abcfc90be7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80\n---\n\n### 1. 01背包问题\n\n有 $N$ 件物品和一个容量是 $V$ 的背包。每件物品只能使用一次。\n\n分析：\n\n- 每一个背包只有 **拿出 or 不拿出** 两种情况\n- 对于 **dp** 数组，我们某一个状态 `dp[i][j]` 表示 **前i种背包的情况下，他们的总重量是 j 的最优解**\n  - 如果 **i** 背包不拿，那么 `dp[i][j] = dp[i - 1][j]`\n  - 如果 **i** 背包拿取，那么 `dp[i][j] = dp[i - 1][j - weights[i]] + values[i]`\n    - 也就是说，拿取之后，需要看剩下的部分最优解\n\n#### 算法优化\n\n根据之前的状态转移方程，我们可以约减一维的 **dp** 空间\n\n改进之后的 **dp** 状态转移方程如下：\n\n`dp[i] = max(dp[j], dp[j - weights[i]] + values[i])`\n\n> 为什么在内层循环，**j** 需要逆序？\n>\n> 在没有开始计算的时候，**dp[i]表示的是dp\\[i-1]\\[j]** 。而当我们需要计算 `dp[i] = max(dp[j], dp[j - weights[i]] + values[i])`的时候，需要保证 `dp[j - w[i]]` 是 **没有被改变的**。因此需要**从后往前**\n\n### 2. 完全背包问题\n\n每一件物品可以 **无限次** 拿取\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\nint main(){\n    int N , V;\n    cin >> N >> V;\n    vector<int> w(N + 1) , v(N + 1);\n    for(int i = 1 ; i <= N ; ++i) cin >> w[i] >> v[i];\n    \n    vector<vector<int>> dp(N + 1 , vector<int>(V + 1 , 0));\n    \n    for(int i = 1; i <= N ; ++i){\n        for(int j = 0 ;j <= V; ++j){\n            dp[i][j] = dp[i - 1][j];\n            for(int k = 0 ; k*w[i] <= j; ++k){\n                dp[i][j] = max(dp[i][j] , dp[i][j - k * w[i]] + k * v[i]);\n            }\n        }\n    }\n    \n    cout << dp[N][V] << endl;\n    \n}\n```\n\n最重要的状态转移方程对比\n\n- **01背包** ：`dp[i][j] = max(dp[i-1][j],dp[i - 1][j - w[i]] + v[i])`\n- **完全背包** ：`dp[i][j] = max(dp[i][j] , dp[i - 1][j - k * w[i]] + k * v[i]);`\n\n不难看出，两者其实非常的类似。根据下标我们可以给出压缩之后的优化版本完全背包解法\n\n> **01背包** 和 **完全背包** 的不同\n>\n> ```cpp\n> //01背包\n> for i  in 0 ... N\n>     for  j = V ... 0\n>         f[j] = max{f[j], f[j - weight[i]] + value[i]}\n> //完全背包\n> for i int 0 ... N\n>   \tfor\t j = 0 ... V\n>       \tf[j] = max{f[j] , f[j - weight[j]] + value[i]}\n> ```\n>\n> 可以看出，只有内层循环的执行顺序不同\n\n给出 **完全背包问题** 的优化方案\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing namespace std;\n\nint main(){\n    int n , capacity;\n    cin >> n >> capacity;\n    vector<int> c(n + 1) , w(n + 1);\n    vector<int> dp(max(n , capacity));\n    for(int i = 1 ; i <= n ;++i) cin >> c[i] >> w[i];\n    \n    for(int i = 1; i <= n ;++i)\n        for(int j = c[i] ; j <= capacity ; ++j)\n            dp[j] = max(dp[j] , dp[j - c[i]] + w[i]);\n    \n    cout << dp[capacity];\n}\n```\n\n","slug":"背包问题","published":1,"updated":"2020-10-19T09:47:13.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi1c000xx8mees9s2pz7","content":"<h3 id=\"1-01背包问题\"><a href=\"#1-01背包问题\" class=\"headerlink\" title=\"1. 01背包问题\"></a>1. 01背包问题</h3><p>有 $N$ 件物品和一个容量是 $V$ 的背包。每件物品只能使用一次。</p>\n<p>分析：</p>\n<ul>\n<li>每一个背包只有 <strong>拿出 or 不拿出</strong> 两种情况</li>\n<li>对于 <strong>dp</strong> 数组，我们某一个状态 <code>dp[i][j]</code> 表示 <strong>前i种背包的情况下，他们的总重量是 j 的最优解</strong><ul>\n<li>如果 <strong>i</strong> 背包不拿，那么 <code>dp[i][j] = dp[i - 1][j]</code></li>\n<li>如果 <strong>i</strong> 背包拿取，那么 <code>dp[i][j] = dp[i - 1][j - weights[i]] + values[i]</code><ul>\n<li>也就是说，拿取之后，需要看剩下的部分最优解</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"算法优化\"><a href=\"#算法优化\" class=\"headerlink\" title=\"算法优化\"></a>算法优化</h4><p>根据之前的状态转移方程，我们可以约减一维的 <strong>dp</strong> 空间</p>\n<p>改进之后的 <strong>dp</strong> 状态转移方程如下：</p>\n<p><code>dp[i] = max(dp[j], dp[j - weights[i]] + values[i])</code></p>\n<blockquote>\n<p>为什么在内层循环，<strong>j</strong> 需要逆序？</p>\n<p>在没有开始计算的时候，<strong>dp[i]表示的是dp[i-1][j]</strong> 。而当我们需要计算 <code>dp[i] = max(dp[j], dp[j - weights[i]] + values[i])</code>的时候，需要保证 <code>dp[j - w[i]]</code> 是 <strong>没有被改变的</strong>。因此需要<strong>从后往前</strong></p>\n</blockquote>\n<h3 id=\"2-完全背包问题\"><a href=\"#2-完全背包问题\" class=\"headerlink\" title=\"2. 完全背包问题\"></a>2. 完全背包问题</h3><p>每一件物品可以 <strong>无限次</strong> 拿取</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> N <span class=\"token operator\">>></span> V<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>V <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> N <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> V<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> k<span class=\"token operator\">*</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>V<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>最重要的状态转移方程对比</p>\n<ul>\n<li><strong>01背包</strong> ：<code>dp[i][j] = max(dp[i-1][j],dp[i - 1][j - w[i]] + v[i])</code></li>\n<li><strong>完全背包</strong> ：<code>dp[i][j] = max(dp[i][j] , dp[i - 1][j - k * w[i]] + k * v[i]);</code></li>\n</ul>\n<p>不难看出，两者其实非常的类似。根据下标我们可以给出压缩之后的优化版本完全背包解法</p>\n<blockquote>\n<p><strong>01背包</strong> 和 <strong>完全背包</strong> 的不同</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">//01背包</span>\n<span class=\"token keyword\">for</span> i  in <span class=\"token number\">0</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> N\n    <span class=\"token keyword\">for</span>  j <span class=\"token operator\">=</span> V <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token number\">0</span>\n        f<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>f<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//完全背包</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">int</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> N\n      <span class=\"token keyword\">for</span>     j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> V\n          f<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>f<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> weight<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>可以看出，只有内层循环的执行顺序不同</p>\n</blockquote>\n<p>给出 <strong>完全背包问题</strong> 的优化方案</p>\n<pre class=\" language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> capacity<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>n <span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> capacity <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>\n            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> dp<span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603060044864-9c8826fb35af?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","excerpt":"","more":"<h3 id=\"1-01背包问题\"><a href=\"#1-01背包问题\" class=\"headerlink\" title=\"1. 01背包问题\"></a>1. 01背包问题</h3><p>有 $N$ 件物品和一个容量是 $V$ 的背包。每件物品只能使用一次。</p>\n<p>分析：</p>\n<ul>\n<li>每一个背包只有 <strong>拿出 or 不拿出</strong> 两种情况</li>\n<li>对于 <strong>dp</strong> 数组，我们某一个状态 <code>dp[i][j]</code> 表示 <strong>前i种背包的情况下，他们的总重量是 j 的最优解</strong><ul>\n<li>如果 <strong>i</strong> 背包不拿，那么 <code>dp[i][j] = dp[i - 1][j]</code></li>\n<li>如果 <strong>i</strong> 背包拿取，那么 <code>dp[i][j] = dp[i - 1][j - weights[i]] + values[i]</code><ul>\n<li>也就是说，拿取之后，需要看剩下的部分最优解</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"算法优化\"><a href=\"#算法优化\" class=\"headerlink\" title=\"算法优化\"></a>算法优化</h4><p>根据之前的状态转移方程，我们可以约减一维的 <strong>dp</strong> 空间</p>\n<p>改进之后的 <strong>dp</strong> 状态转移方程如下：</p>\n<p><code>dp[i] = max(dp[j], dp[j - weights[i]] + values[i])</code></p>\n<blockquote>\n<p>为什么在内层循环，<strong>j</strong> 需要逆序？</p>\n<p>在没有开始计算的时候，<strong>dp[i]表示的是dp[i-1][j]</strong> 。而当我们需要计算 <code>dp[i] = max(dp[j], dp[j - weights[i]] + values[i])</code>的时候，需要保证 <code>dp[j - w[i]]</code> 是 <strong>没有被改变的</strong>。因此需要<strong>从后往前</strong></p>\n</blockquote>\n<h3 id=\"2-完全背包问题\"><a href=\"#2-完全背包问题\" class=\"headerlink\" title=\"2. 完全背包问题\"></a>2. 完全背包问题</h3><p>每一件物品可以 <strong>无限次</strong> 拿取</p>\n<pre><code class=\"cpp\">#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nint main()&#123;\n    int N , V;\n    cin &gt;&gt; N &gt;&gt; V;\n    vector&lt;int&gt; w(N + 1) , v(N + 1);\n    for(int i = 1 ; i &lt;= N ; ++i) cin &gt;&gt; w[i] &gt;&gt; v[i];\n\n    vector&lt;vector&lt;int&gt;&gt; dp(N + 1 , vector&lt;int&gt;(V + 1 , 0));\n\n    for(int i = 1; i &lt;= N ; ++i)&#123;\n        for(int j = 0 ;j &lt;= V; ++j)&#123;\n            dp[i][j] = dp[i - 1][j];\n            for(int k = 0 ; k*w[i] &lt;= j; ++k)&#123;\n                dp[i][j] = max(dp[i][j] , dp[i][j - k * w[i]] + k * v[i]);\n            &#125;\n        &#125;\n    &#125;\n\n    cout &lt;&lt; dp[N][V] &lt;&lt; endl;\n\n&#125;</code></pre>\n<p>最重要的状态转移方程对比</p>\n<ul>\n<li><strong>01背包</strong> ：<code>dp[i][j] = max(dp[i-1][j],dp[i - 1][j - w[i]] + v[i])</code></li>\n<li><strong>完全背包</strong> ：<code>dp[i][j] = max(dp[i][j] , dp[i - 1][j - k * w[i]] + k * v[i]);</code></li>\n</ul>\n<p>不难看出，两者其实非常的类似。根据下标我们可以给出压缩之后的优化版本完全背包解法</p>\n<blockquote>\n<p><strong>01背包</strong> 和 <strong>完全背包</strong> 的不同</p>\n<pre><code class=\"cpp\">//01背包\nfor i  in 0 ... N\n    for  j = V ... 0\n        f[j] = max&#123;f[j], f[j - weight[i]] + value[i]&#125;\n//完全背包\nfor i int 0 ... N\n      for     j = 0 ... V\n          f[j] = max&#123;f[j] , f[j - weight[j]] + value[i]&#125;</code></pre>\n<p>可以看出，只有内层循环的执行顺序不同</p>\n</blockquote>\n<p>给出 <strong>完全背包问题</strong> 的优化方案</p>\n<pre><code class=\"cpp\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n\nusing namespace std;\n\nint main()&#123;\n    int n , capacity;\n    cin &gt;&gt; n &gt;&gt; capacity;\n    vector&lt;int&gt; c(n + 1) , w(n + 1);\n    vector&lt;int&gt; dp(max(n , capacity));\n    for(int i = 1 ; i &lt;= n ;++i) cin &gt;&gt; c[i] &gt;&gt; w[i];\n\n    for(int i = 1; i &lt;= n ;++i)\n        for(int j = c[i] ; j &lt;= capacity ; ++j)\n            dp[j] = max(dp[j] , dp[j - c[i]] + w[i]);\n\n    cout &lt;&lt; dp[capacity];\n&#125;</code></pre>\n"},{"title":"自己动手实现负载均衡算法","date":"2020-04-02T14:32:27.000Z","cover_img":"https://images.unsplash.com/photo-1584843863029-1bf7e8312a64?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1349&q=80","feature_img":"https://images.unsplash.com/12/car.jpg?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1429&q=80","description":null,"keywords":null,"_content":"\n#### 背景\n\n最近在看 `dubbo` ，它的服务治理当中有很大一个方面讲的就是负载均衡。由于我们的服务提供者可以有多个 `replication` ，究竟选择哪一个比较合适，就成为了我们需要去思考的一个问题。完全出于兴趣使然，我打算动手实现一下常见的负载均衡算法，来让自己加深一下理解。根据一个非常常见的请求调用，以参数作为请求内容，来判定多个备用选项中的选择策略制定\n\n设计了类 `Provider` 和 `Consumer` ，分别表示服务提供者和消费者。由消费者进行触发，来选取 `N` 个服务提供者的负载均衡策略。\n\n```java\n/**\n * Entity\n */\npublic class Provider {\n\tprivate String id;                //id信息\n\tprivate double weight;            //价值权重\n\tprivate long milliseconds;        //响应时间\n\n\tpublic Provider(String id,  double weight, long milliseconds) {\n\t\tthis.id = id;\n\t\tthis.weight = weight;\n\t\tthis.milliseconds = milliseconds;\n\t}\n\n\tpublic String getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(String id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic double getWeight() {\n\t\treturn weight;\n\t}\n\n\tpublic void setWeight(double weight) {\n\t\tthis.weight = weight;\n\t}\n\n\tpublic long getMilliseconds() {\n\t\treturn milliseconds;\n\t}\n\n\tpublic void setMilliseconds(long milliseconds) {\n\t\tthis.milliseconds = milliseconds;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"id:%s\\tweight:%f\\tlatency:%d\",\n\t\t\t\tid, weight, milliseconds);\n\t}\n}\n```\n\n\n\n#### LRU算法\n\n如下是我的实现策略，内部维护一个 `lruQueue` 队列，队头表示最少访问的节点，当访问某一个节点之后，直接把这个节点移动到队尾即可\n\n```java\n/**\n * 最近最少使用优先\n */\npublic class LruHandler implements BalanceHandler {\n\tprivate Queue<Provider> lruQueue = new LinkedList<>();\n\tprivate int providerCnt =0;\n\n\tpublic void run(List<Provider> providerList) {\n\t\tthis.providerCnt = providerList.size();\n\t\tlruQueue.addAll(providerList);\n\t\tassert this.providerCnt >= 1;\n\t\tSystem.out.println(String.format(\"Start choosing from all of the %d providers\", this.providerCnt));\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\t//choose random first\n\t\t\t\tRandom ran = new Random();\n\t\t\t\tint idx = ran.nextInt(this.providerCnt - 1);\n\t\t\t\tSystem.out.println(String.format(\"Choose provider %d\", idx));\n\t\t\t\t//choose idx and move it to\n\t\t\t\tProvider chosenP = providerList.get(idx);\n\t\t\t\tSystem.out.println(String.format(\"The provider infomation is %s\", chosenP.toString()\n\t\t\t\t));\n\t\t\t\tlruQueue.remove(chosenP);\n\t\t\t\tlruQueue.offer(chosenP);\n\t\t\t\tSystem.out.println(String.format(\"The current queue:%s\", queueToStr()));\n\t\t\t\tSystem.out.println(\"============================================================\");\n\n\t\t\t\tThread.sleep(4000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate String queueToStr() {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append('\\t');\n\t\tfor (Provider p : this.lruQueue) {\n\t\t\tsb.append(p.getId()).append(\"\\t\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n```\n\n#### 随机选取算法\n\n这一个随机化的选取算法主要采取了 `weight` 来进行权重排序，其实 `Dubbo` 里面基于最少活跃度的算法，也是一个特定的优先级队列。这些基于优先级队列的负载均衡算法，直接可以根据权值排序就能够得到\n\n```java\n/**\n * 随机加权选取\n */\npublic class RandomWeightHandler implements BalanceHandler {\n\n\t@Override\n\tpublic void run(List<Provider> providerList) {\n\t\tint size = providerList.size();\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tSystem.out.println(String.format(\"The pre queue:%s\", queueToStr(providerList)));\n\t\t\t\t// change all of the provider weight\n\t\t\t\tfor (int i = 0; i < size; ++i) {\n\t\t\t\t\tProvider en = providerList.get(i);\n\t\t\t\t\ten.setWeight(new Random().nextDouble());\n\t\t\t\t\tproviderList.set(i, en);\n\t\t\t\t}\n\t\t\t\tproviderList.sort((o1, o2) -> {\n\t\t\t\t\tif (o1.getWeight() < o2.getWeight()) return 1;\n\t\t\t\t\telse return -1;\n\t\t\t\t});\n\t\t\t\tProvider p = providerList.get(0);\n\t\t\t\tSystem.out.println(String.format(\"The provider information is %s\", p.toString()));\n\t\t\t\tSystem.out.println(String.format(\"The current queue:%s\", queueToStr(providerList)));\n\t\t\t\tSystem.out.println(\"========================================================\");\n\n\t\t\t\tThread.sleep(4000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate String queueToStr(List<Provider> queue) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append('\\t');\n\t\tfor (Provider p : queue) {\n\t\t\tsb.append(p.getId()).append(\"\\t\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n```\n\n","source":"_posts/让我们实现一些负载均衡算法.md","raw":"---\ntitle: 自己动手实现负载均衡算法\ndate: 2020-04-02 22:32:27\ntags: coding\ncover_img: https://images.unsplash.com/photo-1584843863029-1bf7e8312a64?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1349&q=80\nfeature_img: https://images.unsplash.com/12/car.jpg?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1429&q=80\ndescription:\nkeywords:\n---\n\n#### 背景\n\n最近在看 `dubbo` ，它的服务治理当中有很大一个方面讲的就是负载均衡。由于我们的服务提供者可以有多个 `replication` ，究竟选择哪一个比较合适，就成为了我们需要去思考的一个问题。完全出于兴趣使然，我打算动手实现一下常见的负载均衡算法，来让自己加深一下理解。根据一个非常常见的请求调用，以参数作为请求内容，来判定多个备用选项中的选择策略制定\n\n设计了类 `Provider` 和 `Consumer` ，分别表示服务提供者和消费者。由消费者进行触发，来选取 `N` 个服务提供者的负载均衡策略。\n\n```java\n/**\n * Entity\n */\npublic class Provider {\n\tprivate String id;                //id信息\n\tprivate double weight;            //价值权重\n\tprivate long milliseconds;        //响应时间\n\n\tpublic Provider(String id,  double weight, long milliseconds) {\n\t\tthis.id = id;\n\t\tthis.weight = weight;\n\t\tthis.milliseconds = milliseconds;\n\t}\n\n\tpublic String getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(String id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic double getWeight() {\n\t\treturn weight;\n\t}\n\n\tpublic void setWeight(double weight) {\n\t\tthis.weight = weight;\n\t}\n\n\tpublic long getMilliseconds() {\n\t\treturn milliseconds;\n\t}\n\n\tpublic void setMilliseconds(long milliseconds) {\n\t\tthis.milliseconds = milliseconds;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"id:%s\\tweight:%f\\tlatency:%d\",\n\t\t\t\tid, weight, milliseconds);\n\t}\n}\n```\n\n\n\n#### LRU算法\n\n如下是我的实现策略，内部维护一个 `lruQueue` 队列，队头表示最少访问的节点，当访问某一个节点之后，直接把这个节点移动到队尾即可\n\n```java\n/**\n * 最近最少使用优先\n */\npublic class LruHandler implements BalanceHandler {\n\tprivate Queue<Provider> lruQueue = new LinkedList<>();\n\tprivate int providerCnt =0;\n\n\tpublic void run(List<Provider> providerList) {\n\t\tthis.providerCnt = providerList.size();\n\t\tlruQueue.addAll(providerList);\n\t\tassert this.providerCnt >= 1;\n\t\tSystem.out.println(String.format(\"Start choosing from all of the %d providers\", this.providerCnt));\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\t//choose random first\n\t\t\t\tRandom ran = new Random();\n\t\t\t\tint idx = ran.nextInt(this.providerCnt - 1);\n\t\t\t\tSystem.out.println(String.format(\"Choose provider %d\", idx));\n\t\t\t\t//choose idx and move it to\n\t\t\t\tProvider chosenP = providerList.get(idx);\n\t\t\t\tSystem.out.println(String.format(\"The provider infomation is %s\", chosenP.toString()\n\t\t\t\t));\n\t\t\t\tlruQueue.remove(chosenP);\n\t\t\t\tlruQueue.offer(chosenP);\n\t\t\t\tSystem.out.println(String.format(\"The current queue:%s\", queueToStr()));\n\t\t\t\tSystem.out.println(\"============================================================\");\n\n\t\t\t\tThread.sleep(4000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate String queueToStr() {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append('\\t');\n\t\tfor (Provider p : this.lruQueue) {\n\t\t\tsb.append(p.getId()).append(\"\\t\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n```\n\n#### 随机选取算法\n\n这一个随机化的选取算法主要采取了 `weight` 来进行权重排序，其实 `Dubbo` 里面基于最少活跃度的算法，也是一个特定的优先级队列。这些基于优先级队列的负载均衡算法，直接可以根据权值排序就能够得到\n\n```java\n/**\n * 随机加权选取\n */\npublic class RandomWeightHandler implements BalanceHandler {\n\n\t@Override\n\tpublic void run(List<Provider> providerList) {\n\t\tint size = providerList.size();\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tSystem.out.println(String.format(\"The pre queue:%s\", queueToStr(providerList)));\n\t\t\t\t// change all of the provider weight\n\t\t\t\tfor (int i = 0; i < size; ++i) {\n\t\t\t\t\tProvider en = providerList.get(i);\n\t\t\t\t\ten.setWeight(new Random().nextDouble());\n\t\t\t\t\tproviderList.set(i, en);\n\t\t\t\t}\n\t\t\t\tproviderList.sort((o1, o2) -> {\n\t\t\t\t\tif (o1.getWeight() < o2.getWeight()) return 1;\n\t\t\t\t\telse return -1;\n\t\t\t\t});\n\t\t\t\tProvider p = providerList.get(0);\n\t\t\t\tSystem.out.println(String.format(\"The provider information is %s\", p.toString()));\n\t\t\t\tSystem.out.println(String.format(\"The current queue:%s\", queueToStr(providerList)));\n\t\t\t\tSystem.out.println(\"========================================================\");\n\n\t\t\t\tThread.sleep(4000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate String queueToStr(List<Provider> queue) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append('\\t');\n\t\tfor (Provider p : queue) {\n\t\t\tsb.append(p.getId()).append(\"\\t\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n```\n\n","slug":"让我们实现一些负载均衡算法","published":1,"updated":"2020-10-19T09:47:13.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi1d000zx8me50h6dcq3","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>最近在看 <code>dubbo</code> ，它的服务治理当中有很大一个方面讲的就是负载均衡。由于我们的服务提供者可以有多个 <code>replication</code> ，究竟选择哪一个比较合适，就成为了我们需要去思考的一个问题。完全出于兴趣使然，我打算动手实现一下常见的负载均衡算法，来让自己加深一下理解。根据一个非常常见的请求调用，以参数作为请求内容，来判定多个备用选项中的选择策略制定</p>\n<p>设计了类 <code>Provider</code> 和 <code>Consumer</code> ，分别表示服务提供者和消费者。由消费者进行触发，来选取 <code>N</code> 个服务提供者的负载均衡策略。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Entity\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String id<span class=\"token punctuation\">;</span>                <span class=\"token comment\" spellcheck=\"true\">//id信息</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">//价值权重</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> milliseconds<span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">//响应时间</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Provider</span><span class=\"token punctuation\">(</span>String id<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> milliseconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>milliseconds <span class=\"token operator\">=</span> milliseconds<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>String id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> milliseconds<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> milliseconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>milliseconds <span class=\"token operator\">=</span> milliseconds<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id:%s\\tweight:%f\\tlatency:%d\"</span><span class=\"token punctuation\">,</span>\n                id<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> milliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"LRU算法\"><a href=\"#LRU算法\" class=\"headerlink\" title=\"LRU算法\"></a>LRU算法</h4><p>如下是我的实现策略，内部维护一个 <code>lruQueue</code> 队列，队头表示最少访问的节点，当访问某一个节点之后，直接把这个节点移动到队尾即可</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 最近最少使用优先\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LruHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BalanceHandler</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Queue<span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span> lruQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> providerCnt <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>List<span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span> providerList<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>providerCnt <span class=\"token operator\">=</span> providerList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lruQueue<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>providerList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assert</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>providerCnt <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start choosing from all of the %d providers\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>providerCnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//choose random first</span>\n                Random ran <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> ran<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>providerCnt <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Choose provider %d\"</span><span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//choose idx and move it to</span>\n                Provider chosenP <span class=\"token operator\">=</span> providerList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The provider infomation is %s\"</span><span class=\"token punctuation\">,</span> chosenP<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                lruQueue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>chosenP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                lruQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>chosenP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The current queue:%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">queueToStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"============================================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String <span class=\"token function\">queueToStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        StringBuilder sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Provider p <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lruQueue<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"随机选取算法\"><a href=\"#随机选取算法\" class=\"headerlink\" title=\"随机选取算法\"></a>随机选取算法</h4><p>这一个随机化的选取算法主要采取了 <code>weight</code> 来进行权重排序，其实 <code>Dubbo</code> 里面基于最少活跃度的算法，也是一个特定的优先级队列。这些基于优先级队列的负载均衡算法，直接可以根据权值排序就能够得到</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 随机加权选取\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomWeightHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BalanceHandler</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>List<span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span> providerList<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> providerList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The pre queue:%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">queueToStr</span><span class=\"token punctuation\">(</span>providerList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// change all of the provider weight</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    Provider en <span class=\"token operator\">=</span> providerList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    en<span class=\"token punctuation\">.</span><span class=\"token function\">setWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    providerList<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> en<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                providerList<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span><span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> o2<span class=\"token punctuation\">.</span><span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Provider p <span class=\"token operator\">=</span> providerList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The provider information is %s\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The current queue:%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">queueToStr</span><span class=\"token punctuation\">(</span>providerList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String <span class=\"token function\">queueToStr</span><span class=\"token punctuation\">(</span>List<span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span> queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        StringBuilder sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Provider p <span class=\"token operator\">:</span> queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603060044864-9c8826fb35af?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>最近在看 <code>dubbo</code> ，它的服务治理当中有很大一个方面讲的就是负载均衡。由于我们的服务提供者可以有多个 <code>replication</code> ，究竟选择哪一个比较合适，就成为了我们需要去思考的一个问题。完全出于兴趣使然，我打算动手实现一下常见的负载均衡算法，来让自己加深一下理解。根据一个非常常见的请求调用，以参数作为请求内容，来判定多个备用选项中的选择策略制定</p>\n<p>设计了类 <code>Provider</code> 和 <code>Consumer</code> ，分别表示服务提供者和消费者。由消费者进行触发，来选取 <code>N</code> 个服务提供者的负载均衡策略。</p>\n<pre><code class=\"java\">/**\n * Entity\n */\npublic class Provider &#123;\n    private String id;                //id信息\n    private double weight;            //价值权重\n    private long milliseconds;        //响应时间\n\n    public Provider(String id,  double weight, long milliseconds) &#123;\n        this.id = id;\n        this.weight = weight;\n        this.milliseconds = milliseconds;\n    &#125;\n\n    public String getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(String id) &#123;\n        this.id = id;\n    &#125;\n\n    public double getWeight() &#123;\n        return weight;\n    &#125;\n\n    public void setWeight(double weight) &#123;\n        this.weight = weight;\n    &#125;\n\n    public long getMilliseconds() &#123;\n        return milliseconds;\n    &#125;\n\n    public void setMilliseconds(long milliseconds) &#123;\n        this.milliseconds = milliseconds;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return String.format(&quot;id:%s\\tweight:%f\\tlatency:%d&quot;,\n                id, weight, milliseconds);\n    &#125;\n&#125;</code></pre>\n<h4 id=\"LRU算法\"><a href=\"#LRU算法\" class=\"headerlink\" title=\"LRU算法\"></a>LRU算法</h4><p>如下是我的实现策略，内部维护一个 <code>lruQueue</code> 队列，队头表示最少访问的节点，当访问某一个节点之后，直接把这个节点移动到队尾即可</p>\n<pre><code class=\"java\">/**\n * 最近最少使用优先\n */\npublic class LruHandler implements BalanceHandler &#123;\n    private Queue&lt;Provider&gt; lruQueue = new LinkedList&lt;&gt;();\n    private int providerCnt =0;\n\n    public void run(List&lt;Provider&gt; providerList) &#123;\n        this.providerCnt = providerList.size();\n        lruQueue.addAll(providerList);\n        assert this.providerCnt &gt;= 1;\n        System.out.println(String.format(&quot;Start choosing from all of the %d providers&quot;, this.providerCnt));\n        while (true) &#123;\n            try &#123;\n                //choose random first\n                Random ran = new Random();\n                int idx = ran.nextInt(this.providerCnt - 1);\n                System.out.println(String.format(&quot;Choose provider %d&quot;, idx));\n                //choose idx and move it to\n                Provider chosenP = providerList.get(idx);\n                System.out.println(String.format(&quot;The provider infomation is %s&quot;, chosenP.toString()\n                ));\n                lruQueue.remove(chosenP);\n                lruQueue.offer(chosenP);\n                System.out.println(String.format(&quot;The current queue:%s&quot;, queueToStr()));\n                System.out.println(&quot;============================================================&quot;);\n\n                Thread.sleep(4000);\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n    &#125;\n\n    private String queueToStr() &#123;\n        StringBuilder sb = new StringBuilder();\n        sb.append(&#39;\\t&#39;);\n        for (Provider p : this.lruQueue) &#123;\n            sb.append(p.getId()).append(&quot;\\t&quot;);\n        &#125;\n        return sb.toString();\n    &#125;\n&#125;</code></pre>\n<h4 id=\"随机选取算法\"><a href=\"#随机选取算法\" class=\"headerlink\" title=\"随机选取算法\"></a>随机选取算法</h4><p>这一个随机化的选取算法主要采取了 <code>weight</code> 来进行权重排序，其实 <code>Dubbo</code> 里面基于最少活跃度的算法，也是一个特定的优先级队列。这些基于优先级队列的负载均衡算法，直接可以根据权值排序就能够得到</p>\n<pre><code class=\"java\">/**\n * 随机加权选取\n */\npublic class RandomWeightHandler implements BalanceHandler &#123;\n\n    @Override\n    public void run(List&lt;Provider&gt; providerList) &#123;\n        int size = providerList.size();\n\n        while (true) &#123;\n            try &#123;\n                System.out.println(String.format(&quot;The pre queue:%s&quot;, queueToStr(providerList)));\n                // change all of the provider weight\n                for (int i = 0; i &lt; size; ++i) &#123;\n                    Provider en = providerList.get(i);\n                    en.setWeight(new Random().nextDouble());\n                    providerList.set(i, en);\n                &#125;\n                providerList.sort((o1, o2) -&gt; &#123;\n                    if (o1.getWeight() &lt; o2.getWeight()) return 1;\n                    else return -1;\n                &#125;);\n                Provider p = providerList.get(0);\n                System.out.println(String.format(&quot;The provider information is %s&quot;, p.toString()));\n                System.out.println(String.format(&quot;The current queue:%s&quot;, queueToStr(providerList)));\n                System.out.println(&quot;========================================================&quot;);\n\n                Thread.sleep(4000);\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n    &#125;\n\n    private String queueToStr(List&lt;Provider&gt; queue) &#123;\n        StringBuilder sb = new StringBuilder();\n        sb.append(&#39;\\t&#39;);\n        for (Provider p : queue) &#123;\n            sb.append(p.getId()).append(&quot;\\t&quot;);\n        &#125;\n        return sb.toString();\n    &#125;\n&#125;</code></pre>\n"},{"title":"设计模式-单例","date":"2019-12-07T08:47:11.000Z","cover_img":"https://images.unsplash.com/photo-1507580433829-a0989f4d4469?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","feature_img":"https://images.unsplash.com/photo-1472512946974-cc09a294e210?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1115&q=80","_content":"\n## 单例模式\n\n给出最原始的代码\n\n```java\npublic class Singleton {\n\n    //一个静态的实例\n    private static Singleton singleton;\n    //私有化构造函数\n    private Singleton(){}\n    //给出一个公共的静态方法返回一个单一实例\n    public static Singleton getInstance(){\n        if (singleton == null) {\n            singleton = new Singleton();\n        }\n        return singleton;\n    }\n}\n```\n\n现在我们就需要考虑==多线程环境==下的单例模式实现了\n\n**懒汉模式**\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton(){}\n    public static Singleton getInstance(){\n        if (instance == null) {\n            //Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n**饿汉模式**\n\n```java\npublic class Singleton {\n    private static Singleton instance = new Singleton();\n    private Singleton(){}\n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n```\n\n> 多线程下的懒汉模式会出现问题——在判定是 *null* 的时候，还没来得及进行创建实例，另一个进程就进入进行判定\n\n#### 解决办法1\n\n方法上添加 **synchronized** 关键字\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton(){}\n    public static synchronized Singleton getInstance(){\n        if (instance == null) {\n            //Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n> 问题：如果两个线程都要获取单例引用，只能等一个线程获取后，另一个线程才能获取。\n\n#### 解决方法2\n\n双检查锁机制（Double Check Locking）,也叫”DCL“\n\n> 双锁的意思，是指 检测两次instance是否为空。\n\n```java\npublic class Singleton {  \n      \n    //使用volatile关键字保其可见性  \n    volatile private static Singleton instance = null;  \n      \n    private MySingleton(){}  \n       \n    public static MySingleton getInstance() {   \n            if(instance == null){//懒汉式   \n                  synchronized (Singleton.class) {  \n                    if(instance == null){//二次检查  \n                        instance = new MySingleton();  \n                    }  \n                } \n            }\n        return instance;  \n    }  \n}  \n```\n\n#### 解决办法3\n\n当然，我们最好还是采取**饿汉式**\n\n```java\npublic class Singleton{\n    //类加载时就初始化\n    private static final Singleton instance = new Singleton();\n    \n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n```\n\n#### 解决办法4\n\n采取 **静态内部类**\n\n```java\npublic class Singleton {  \n    private static class SingletonHolder {  \n        private static final Singleton INSTANCE = new Singleton();  \n    }  \n    private Singleton (){}  \n    \n    public static final Singleton getInstance() {  \n        return SingletonHolder.INSTANCE; \n    }  \n}\n```\n\n#### 解决办法5\n\n枚举 Enum\n\n```java\npublic enum EasySingleton{\n    INSTANCE;\n}\n```\n\n","source":"_posts/设计模式-单例.md","raw":"---\ntitle: 设计模式-单例\ndate: 2019-12-07 16:47:11\ntags: 设计模式\ncover_img: https://images.unsplash.com/photo-1507580433829-a0989f4d4469?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\nfeature_img: https://images.unsplash.com/photo-1472512946974-cc09a294e210?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1115&q=80\n---\n\n## 单例模式\n\n给出最原始的代码\n\n```java\npublic class Singleton {\n\n    //一个静态的实例\n    private static Singleton singleton;\n    //私有化构造函数\n    private Singleton(){}\n    //给出一个公共的静态方法返回一个单一实例\n    public static Singleton getInstance(){\n        if (singleton == null) {\n            singleton = new Singleton();\n        }\n        return singleton;\n    }\n}\n```\n\n现在我们就需要考虑==多线程环境==下的单例模式实现了\n\n**懒汉模式**\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton(){}\n    public static Singleton getInstance(){\n        if (instance == null) {\n            //Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n**饿汉模式**\n\n```java\npublic class Singleton {\n    private static Singleton instance = new Singleton();\n    private Singleton(){}\n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n```\n\n> 多线程下的懒汉模式会出现问题——在判定是 *null* 的时候，还没来得及进行创建实例，另一个进程就进入进行判定\n\n#### 解决办法1\n\n方法上添加 **synchronized** 关键字\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton(){}\n    public static synchronized Singleton getInstance(){\n        if (instance == null) {\n            //Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n> 问题：如果两个线程都要获取单例引用，只能等一个线程获取后，另一个线程才能获取。\n\n#### 解决方法2\n\n双检查锁机制（Double Check Locking）,也叫”DCL“\n\n> 双锁的意思，是指 检测两次instance是否为空。\n\n```java\npublic class Singleton {  \n      \n    //使用volatile关键字保其可见性  \n    volatile private static Singleton instance = null;  \n      \n    private MySingleton(){}  \n       \n    public static MySingleton getInstance() {   \n            if(instance == null){//懒汉式   \n                  synchronized (Singleton.class) {  \n                    if(instance == null){//二次检查  \n                        instance = new MySingleton();  \n                    }  \n                } \n            }\n        return instance;  \n    }  \n}  \n```\n\n#### 解决办法3\n\n当然，我们最好还是采取**饿汉式**\n\n```java\npublic class Singleton{\n    //类加载时就初始化\n    private static final Singleton instance = new Singleton();\n    \n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n```\n\n#### 解决办法4\n\n采取 **静态内部类**\n\n```java\npublic class Singleton {  \n    private static class SingletonHolder {  \n        private static final Singleton INSTANCE = new Singleton();  \n    }  \n    private Singleton (){}  \n    \n    public static final Singleton getInstance() {  \n        return SingletonHolder.INSTANCE; \n    }  \n}\n```\n\n#### 解决办法5\n\n枚举 Enum\n\n```java\npublic enum EasySingleton{\n    INSTANCE;\n}\n```\n\n","slug":"设计模式-单例","published":1,"updated":"2020-10-19T09:47:13.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi1f0013x8mebaf6etk4","content":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>给出最原始的代码</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//一个静态的实例</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Singleton singleton<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//私有化构造函数</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//给出一个公共的静态方法返回一个单一实例</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Singleton <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>现在我们就需要考虑==多线程环境==下的单例模式实现了</p>\n<p><strong>懒汉模式</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Singleton instance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Singleton <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>饿汉模式</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Singleton instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Singleton <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>多线程下的懒汉模式会出现问题——在判定是 <em>null</em> 的时候，还没来得及进行创建实例，另一个进程就进入进行判定</p>\n</blockquote>\n<h4 id=\"解决办法1\"><a href=\"#解决办法1\" class=\"headerlink\" title=\"解决办法1\"></a>解决办法1</h4><p>方法上添加 <strong>synchronized</strong> 关键字</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Singleton instance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> Singleton <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>问题：如果两个线程都要获取单例引用，只能等一个线程获取后，另一个线程才能获取。</p>\n</blockquote>\n<h4 id=\"解决方法2\"><a href=\"#解决方法2\" class=\"headerlink\" title=\"解决方法2\"></a>解决方法2</h4><p>双检查锁机制（Double Check Locking）,也叫”DCL“</p>\n<blockquote>\n<p>双锁的意思，是指 检测两次instance是否为空。</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  \n\n    <span class=\"token comment\" spellcheck=\"true\">//使用volatile关键字保其可见性  </span>\n    <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Singleton instance <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>  \n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">MySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>  \n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> MySingleton <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>   \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//懒汉式   </span>\n                  <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>Singleton<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  \n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//二次检查  </span>\n                        instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> \n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>  \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>  \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>  </code></pre>\n<h4 id=\"解决办法3\"><a href=\"#解决办法3\" class=\"headerlink\" title=\"解决办法3\"></a>解决办法3</h4><p>当然，我们最好还是采取<strong>饿汉式</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//类加载时就初始化</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Singleton instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Singleton <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"解决办法4\"><a href=\"#解决办法4\" class=\"headerlink\" title=\"解决办法4\"></a>解决办法4</h4><p>采取 <strong>静态内部类</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonHolder</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Singleton INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token function\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>  \n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Singleton <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> SingletonHolder<span class=\"token punctuation\">.</span>INSTANCE<span class=\"token punctuation\">;</span> \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>  \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"解决办法5\"><a href=\"#解决办法5\" class=\"headerlink\" title=\"解决办法5\"></a>解决办法5</h4><p>枚举 Enum</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> EasySingleton<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    INSTANCE<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603231320933-cdd361afc4f0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80","excerpt":"","more":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>给出最原始的代码</p>\n<pre><code class=\"java\">public class Singleton &#123;\n\n    //一个静态的实例\n    private static Singleton singleton;\n    //私有化构造函数\n    private Singleton()&#123;&#125;\n    //给出一个公共的静态方法返回一个单一实例\n    public static Singleton getInstance()&#123;\n        if (singleton == null) &#123;\n            singleton = new Singleton();\n        &#125;\n        return singleton;\n    &#125;\n&#125;</code></pre>\n<p>现在我们就需要考虑==多线程环境==下的单例模式实现了</p>\n<p><strong>懒汉模式</strong></p>\n<pre><code class=\"java\">public class Singleton &#123;\n    private static Singleton instance;\n    private Singleton()&#123;&#125;\n    public static Singleton getInstance()&#123;\n        if (instance == null) &#123;\n            //Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。\n            instance = new Singleton();\n        &#125;\n        return instance;\n    &#125;\n&#125;</code></pre>\n<p><strong>饿汉模式</strong></p>\n<pre><code class=\"java\">public class Singleton &#123;\n    private static Singleton instance = new Singleton();\n    private Singleton()&#123;&#125;\n    public static Singleton getInstance()&#123;\n        return instance;\n    &#125;\n&#125;</code></pre>\n<blockquote>\n<p>多线程下的懒汉模式会出现问题——在判定是 <em>null</em> 的时候，还没来得及进行创建实例，另一个进程就进入进行判定</p>\n</blockquote>\n<h4 id=\"解决办法1\"><a href=\"#解决办法1\" class=\"headerlink\" title=\"解决办法1\"></a>解决办法1</h4><p>方法上添加 <strong>synchronized</strong> 关键字</p>\n<pre><code class=\"java\">public class Singleton &#123;\n    private static Singleton instance;\n    private Singleton()&#123;&#125;\n    public static synchronized Singleton getInstance()&#123;\n        if (instance == null) &#123;\n            //Thread.sleep(1000)   这里延时，懒汉式多线程下的错误就会突显。\n            instance = new Singleton();\n        &#125;\n        return instance;\n    &#125;\n&#125;</code></pre>\n<blockquote>\n<p>问题：如果两个线程都要获取单例引用，只能等一个线程获取后，另一个线程才能获取。</p>\n</blockquote>\n<h4 id=\"解决方法2\"><a href=\"#解决方法2\" class=\"headerlink\" title=\"解决方法2\"></a>解决方法2</h4><p>双检查锁机制（Double Check Locking）,也叫”DCL“</p>\n<blockquote>\n<p>双锁的意思，是指 检测两次instance是否为空。</p>\n</blockquote>\n<pre><code class=\"java\">public class Singleton &#123;  \n\n    //使用volatile关键字保其可见性  \n    volatile private static Singleton instance = null;  \n\n    private MySingleton()&#123;&#125;  \n\n    public static MySingleton getInstance() &#123;   \n            if(instance == null)&#123;//懒汉式   \n                  synchronized (Singleton.class) &#123;  \n                    if(instance == null)&#123;//二次检查  \n                        instance = new MySingleton();  \n                    &#125;  \n                &#125; \n            &#125;\n        return instance;  \n    &#125;  \n&#125;  </code></pre>\n<h4 id=\"解决办法3\"><a href=\"#解决办法3\" class=\"headerlink\" title=\"解决办法3\"></a>解决办法3</h4><p>当然，我们最好还是采取<strong>饿汉式</strong></p>\n<pre><code class=\"java\">public class Singleton&#123;\n    //类加载时就初始化\n    private static final Singleton instance = new Singleton();\n\n    private Singleton()&#123;&#125;\n\n    public static Singleton getInstance()&#123;\n        return instance;\n    &#125;\n&#125;</code></pre>\n<h4 id=\"解决办法4\"><a href=\"#解决办法4\" class=\"headerlink\" title=\"解决办法4\"></a>解决办法4</h4><p>采取 <strong>静态内部类</strong></p>\n<pre><code class=\"java\">public class Singleton &#123;  \n    private static class SingletonHolder &#123;  \n        private static final Singleton INSTANCE = new Singleton();  \n    &#125;  \n    private Singleton ()&#123;&#125;  \n\n    public static final Singleton getInstance() &#123;  \n        return SingletonHolder.INSTANCE; \n    &#125;  \n&#125;</code></pre>\n<h4 id=\"解决办法5\"><a href=\"#解决办法5\" class=\"headerlink\" title=\"解决办法5\"></a>解决办法5</h4><p>枚举 Enum</p>\n<pre><code class=\"java\">public enum EasySingleton&#123;\n    INSTANCE;\n&#125;</code></pre>\n"},{"title":"Java集合","date":"2020-03-14T09:26:21.000Z","cover_img":"https://images.unsplash.com/photo-1496507161348-aeec0403f141?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80","feature_img":"https://images.unsplash.com/photo-1517958911667-09c05f6cd698?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80","description":null,"keywords":"笔记","_content":"\n## Java 集合类整理\n\n> *JDK* 版本 **1.8**\n>\n> 本文章就最近看的一些jdk源码来进行总结，可能会比较简洁\n\n### 1. List 大类\n\n主要包含了 **ArrayList , Vector , LinkedList**\n\n#### 1.1 ArrayList\n\n> 基本思想：\n>\n> - 默认大小为 10 ，初始化的时候不进行对象数组空间分配，直到第一次 `add(E e)`\n> - 缓冲区满才进行扩容。扩容策略采取 *OldCapacity* * 1.5\n> - `remove` 不进行容量调整 (会有浪费)\n\n关键代码部分 `grow(int minCapacity)`\n\n```java\nprivate void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n}\nprivate static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n}\n```\n\n根据之前计算得到的 `minCapacity` , 进行 `ArrayList` 的扩容操作。如果计算得到的容量大于了 `MAX_ARRAY_SIZE = INT_MAX - 8` ，那么会直接扩容到 `Integer.MAX_VALUE` \n\n> 这里的 `MAX_ARRAY_SIZE` 设置为 `INT_MAX - 8` 主要是为了考虑到，有一些*JVM* 的对象数组 (这里是 `Object[] elementData`) 会采取一定长度的 *header* 。如果直接设置为 `INT_MAX` 可能会引发 OOM\n\n此外，可以看出 `ArrayList` 扩容其实是采取了复制的方法，将原来空间的所有数据放到了另一块空间。这种做法其实在复制上消耗特别大\n\n#### 1.2 Vector\n\n> 基本思想：\n>\n> - 和 `ArrayList` 颇为类似，它也是以10作为初始容量，初始化不分配对象数组的空间\n> - 扩容采取  *OldCapacity* * 2\n> - `remove` 不进行容量调整\n> - 线程安全 `synchronized`\n\n核心代码如下：\n\n```java\nprivate void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + ((capacityIncrement > 0) ?\n                                         capacityIncrement : oldCapacity);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        elementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n\n> 这里的 `capacityIncrement` 是在初始化的时候可以额外指定的变量。如果指定了，那么就不进行乘以二扩容，而是每一次增加这个 `capacityIncrement` 变量\n\n#### 1.3 LinkedList\n\n> - 双向链表\n> - 内部额外存储头结点和尾结点\n\n### 2. KV 大类\n\n#### 2.1 HashMap\n\n> 面试里面最喜欢问的了，没有之一\n>\n> 主要几个流程：\n>\n> - `put`\n> - `get`\n> - `remove`\n>\n> 线程安全问题\n>\n> - put的时候导致的多线程数据不一致 \n>   - 两个线程前后写入，产生数据覆盖\n>   - 成环问题\n>\n> <img src=\"https://i.loli.net/2020/03/14/2WzkGAQVg9Rnpou.png\" alt=\"image.png\" style=\"zoom:80%;\" />\n\n基本数据结构：\n\n- `class Node<K,V>` 是桶节点和链表节点的基本数据结构\n- `Node<K,V>[] table` 是哈希表内部的实现，其实就是 **链表数组**\n\n##### 2.1.1 put 添加 K,V 对\n\n1. 计算 `key` 的 `hashcode` 值，将对象的 `hashcode` 进行高16位和低16位的异或操作。可以看到， `HashMap` 支持对 `null` 键的处理\n\n```java\nstatic final int hash(Object key) {\n  int h;\n\treturn (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n\n2. `putValue` 主体部分\n\n在之前的 `hash` 获取之后，接下来一步就是进行哈希表的一个处理了，由于细节比较多，我直接在源代码里面加注释来解释了\n\n```java\n/**\n     * Implements Map.put and related methods.\n     *\n     * @param hash hash for key\n     * @param key the key\n     * @param value the value to put\n     * @param onlyIfAbsent if true, don't change existing value\n     * @param evict if false, the table is in creation mode.\n     * @return previous value, or null if none\n     */\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n      \t//如果tab没有初始化\n        if ((tab = table) == null || (n = tab.length) == 0)\n            //resize进行空间分配.\n          \tn = (tab = resize()).length;\n      \t//如果当前桶是空的 , 那么新建节点 , 直接插入\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        //当前桶已经有节点 , 需要在后面进行插入\n      \telse {\n            Node<K,V> e; K k;\n          \t//对于桶的第一个节点 p , 如果插入的点和第一个点 p 一样\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n          \t//如果是红黑树 , 就进行红黑树插入\n          \telse if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            //如果第一个节点不同 , 并且后面是链表\n          \telse {\n                  //遍历链表\n              \t\tfor (int binCount = 0; ; ++binCount) {\n \t\t\t\t\t\t\t\t\t\t//遇到空节点 , 表示可以插入 (1.7进行头插 , 1.8 进行尾插)         \n                    if ((e = p.next) == null) {\n                      \t//插入到尾端\n                        p.next = newNode(hash, key, value, null);\n                      \t//如果 binCount >= 8 - 1 (链表长度为8) , 就把链表转红黑树\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                  \t//如果遇到相同的节点\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\t // p = p.next\n                }\n            }\n          \t//如果这个键值对存在 , 就进行覆盖\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n      \t//如果map大小大于了阈值 , 再次进行 resize\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n```\n\n有几个细节要提及：\n\n- `1.8` 中 , 链表和红黑树是交替使用的。\n  - 当链表长度达到了 **8** 之后，会转换为红黑树\n  - 当 `size` 是 **6** 之后，红黑树退化为链表\n  - 原因分析：\n    - 红黑树**平均**查询效率 O(logN) , 链表 O(N) / 2。在长度是 **8** 的时候，红黑树时间复杂度为 3 , 链表是 *8 / 2 = 4* 。这时候使用红黑树是效率更高的。而另一边退化的阈值设置为 **6** , 主要是中间有一个 **7** 的 *gap* , 从而避免红黑树和链表直接的频繁切换\n    - 当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件\n\n这里还有一个重要的调用函数 `resize()` 需要看一下\n\n```java\n// Cap 指的是哈希表中 , 链表数组的长度\n// Thr 指的是键值对的个数\nfinal Node<K,V>[] resize() {\n        Node<K,V>[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length;\n        int oldThr = threshold;\n        int newCap, newThr = 0;\n  \t\t\t//阈值更新 (也就是整个哈希表的可容纳大小)\n        if (oldCap > 0) {\n          \t// 如果旧有oldCap很大 , 就把阈值设置为 Integer.MAX_VALUE\n            if (oldCap >= MAXIMUM_CAPACITY) {\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            }\n          \t//DEFAULT_INITIAL_CAPACITY = 16\n          \t//MAXIMUM_CAPACITY = 1 << 30\n          \t//如果 oldCap * 2 比 MAXIMUM_CAPACITY 小 , 那么阈值更新到 2 倍\n            else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                     oldCap >= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr << 1; // double threshold\n        }\n  \t\t\t// 把新的链表数组长度设置为原来的 KV 对个数\n        else if (oldThr > 0) // initial capacity was placed in threshold\n            newCap = oldThr;\n        // 对于初始化的情况\n  \t\t\t// 数组长度设置 16\n  \t\t\t// 阈值设置 0.75f * 16 = 12\n  \t\t\telse {\n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        }\n        if (newThr == 0) {\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        }\n  \t\t\t//更新阈值 , 替换原有的哈希表. 数组长度为 newCap\n        threshold = newThr;\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n        table = newTab;\n  \t\t\t//如果不是初始化的情形 , 需要进行rehash\n        if (oldTab != null) {\n          \t//遍历数组每一个桶\n            for (int j = 0; j < oldCap; ++j) {\n                Node<K,V> e;\n              \t//当前桶非空 , 需要进行rehash\n                if ((e = oldTab[j]) != null) {\n                  \t//原有桶清空\n                    oldTab[j] = null;\n                  \t//如果只有一个节点 , 直接再次计算hash , 填入就可以\n                    if (e.next == null)\n                        newTab[e.hash & (newCap - 1)] = e;\n                  \t//如果是红黑树 , 那么红黑树的 split\n                    else if (e instanceof TreeNode)\n                        ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                    //如果是链表\n                  \telse { // preserve order\n                        Node<K,V> loHead = null, loTail = null;\n                        Node<K,V> hiHead = null, hiTail = null;\n                        Node<K,V> next;\n                        do {\n                          \t//获取next节点\n                            next = e.next;\n                          \t// e 作为前驱节点 , 同时记录下头节点和尾节点\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 低若干位 , 和原来的一致\n                            if ((e.hash & oldCap) == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 插入到 loTail  , 进行尾插\n                              \tif (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            }\n                            else {\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            }\n                        } while ((e = next) != null);\n                      \t//到这里 , 已经形成了单独的链表 \n                      \t//如果是低位 , 那么直接重新插入到原来的桶\n                        if (loTail != null) {\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        }\n                      \t//插入到高位桶\n                        if (hiTail != null) {\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        }\n                    }\n                }\n            }\n        }\n        return newTab;\n    }\n```\n\n#### 2.2 HashTable\n\n> 基本要点\n>\n> - 采用链表实现\n> - 线程安全 `synchronized`\n> - 默认的 Capacity (链表数组长度)是 **11** , 装载因子 0.75f\n> - *index* 计算：`index = (hash & 0x7FFFFFFF) % tab.length`\n> - 头插\n> - rehash的变化为 `newCapacity = (oldCapacity << 1) + 1`\n> - KV 不可以为空\n\n#### 2.3 LinkedHashMap\n\n这个类继承自 `HashMap`，内部维护了一个双向链表。这个链表可以决定迭代的遍历顺序\n\n在添加新节点的时候，将新节点链接在**内部双向链表的尾部**。\n\n`accessOrder=true`的模式下,在`afterNodeAccess()`函数中，会将当前被访问到的节点e，移动至内部的双向链表的尾部。\n\n> 重点关注：afterNodeAccess()函数中，会修改modCount,因此当你正在accessOrder=true的模式下,迭代LinkedHashMap时，如果同时查询访问数据，也会导致fail-fast，因为迭代的顺序已经改变。\n\n#### 2.4 TreeMap\n\n> LinkedHashMap保证数据可以保持插入顺序\n>\n> 而如果我们希望Map可以保持key的大小顺序的时候，我们就需要利用TreeMap了\n\n内部采用了红黑树，并不是基于 **hash** 来进行实现的\n\n### 3. SET 大类\n\n#### 3.1 HashSet\n\n内部实现完全使用了 `HashMap`\n\n#### 3.2 TreeSet\n\n内部实现采用了 `TreeMap` ， 持有 `NavigableMap` 类型的引用\n\n### 4. 线程安全大类\n\n#### 4.1 ConcurrentHashMap\n\n> - *Key , Value* 不可以为空\n> - Hash计算如下 `(h ^ (h >>> 16)) & HASH_BITS`\n> - 链表 & 红黑树使用。链表进行尾插\n> - 链表和红黑树的临界值也是 **8**\n\n主要讲述一下和 *HashMap* 的不同\n\n##### Node定义\n\n在 *ConcurrentHashMap* 中，*Value,next* 都设置为了 `volatile` 内存可见\n\n```java\nprivate final Node<K,V>[] initTable() {\n        Node<K,V>[] tab; int sc;\n        while ((tab = table) == null || tab.length == 0) {\n            if ((sc = sizeCtl) < 0)\n                Thread.yield(); // lost initialization race; just spin\n          \t//CAS控制\n            else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n                try {\n                    if ((tab = table) == null || tab.length == 0) {\n                        int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                        @SuppressWarnings(\"unchecked\")\n                        Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                        table = tab = nt;\n                        sc = n - (n >>> 2);\n                    }\n                } finally {\n                    sizeCtl = sc;\n                }\n                break;\n            }\n        }\n        return tab;\n    }\n```\n\n**yield 和 sleep 的异同**\n\n1）yield, sleep 都能暂停当前线程，sleep 可以指定具体休眠的时间，而 yield 则依赖 CPU 的时间片划分。\n\n2）yield, sleep 两个在暂停过程中，如已经持有锁，则都不会释放锁资源。\n\n3）yield 不能被中断，而 sleep 则可以接受中断。\n\n在 *1.8* 之前，采用了 **分段锁** ； 而 *1.8* 中主要使用了 **CAS** 和 **synchronized** 来进行并发控制\n\n**CAS** 没什么能说的，主要看一下分段锁 *Segment* \n\n这是一种 *ReentrantLock*，段的结构和 *HashMap* 类似，也是数组 + 链表。每一个段包含了 *HashEntry* 数组。当要对这个数组进行修改的时候，必须要先获得对应的锁(*Get*不需要获取锁，因为共享变量设置为了 `volatile`，除非读到的值是空的才会加锁重读)\n\n*volatile* 底层使用了**内存屏障**来加以完成，实现对内存操作的顺序控制。\n\n> *ReentrantLock* 可重入锁，表示已经获取到这个资源的线程，可以再次进入。*Synchronized* 也是可以重入的。每一个线程进入一次，那么锁计数器+1.直到计数器为0的时候才释放\n>\n> - *ReentrantLock* 采用 **JDK** 实现；*Synchronized*则是 **JVM** 实现的\n> - *Synchronized* 底层使用监视器（管程）实现，管程的本质就是操作系统的 *Mutex Lock*，需要牵涉到用户态和核心态的切换。 优化之前，性能比可重入锁差；\n> - *1.6* 之后引入了*Synchronized* 轻量级锁和偏向锁，也是默认开启的。此外还有自适应自旋锁的优化\n\n","source":"_posts/Java集合.md","raw":"---\ntitle: Java集合\ndate: 2020-03-14 17:26:21\ntags: 笔记\ncover_img: https://images.unsplash.com/photo-1496507161348-aeec0403f141?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80\nfeature_img: https://images.unsplash.com/photo-1517958911667-09c05f6cd698?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\ndescription:\nkeywords: 笔记\n---\n\n## Java 集合类整理\n\n> *JDK* 版本 **1.8**\n>\n> 本文章就最近看的一些jdk源码来进行总结，可能会比较简洁\n\n### 1. List 大类\n\n主要包含了 **ArrayList , Vector , LinkedList**\n\n#### 1.1 ArrayList\n\n> 基本思想：\n>\n> - 默认大小为 10 ，初始化的时候不进行对象数组空间分配，直到第一次 `add(E e)`\n> - 缓冲区满才进行扩容。扩容策略采取 *OldCapacity* * 1.5\n> - `remove` 不进行容量调整 (会有浪费)\n\n关键代码部分 `grow(int minCapacity)`\n\n```java\nprivate void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n}\nprivate static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n}\n```\n\n根据之前计算得到的 `minCapacity` , 进行 `ArrayList` 的扩容操作。如果计算得到的容量大于了 `MAX_ARRAY_SIZE = INT_MAX - 8` ，那么会直接扩容到 `Integer.MAX_VALUE` \n\n> 这里的 `MAX_ARRAY_SIZE` 设置为 `INT_MAX - 8` 主要是为了考虑到，有一些*JVM* 的对象数组 (这里是 `Object[] elementData`) 会采取一定长度的 *header* 。如果直接设置为 `INT_MAX` 可能会引发 OOM\n\n此外，可以看出 `ArrayList` 扩容其实是采取了复制的方法，将原来空间的所有数据放到了另一块空间。这种做法其实在复制上消耗特别大\n\n#### 1.2 Vector\n\n> 基本思想：\n>\n> - 和 `ArrayList` 颇为类似，它也是以10作为初始容量，初始化不分配对象数组的空间\n> - 扩容采取  *OldCapacity* * 2\n> - `remove` 不进行容量调整\n> - 线程安全 `synchronized`\n\n核心代码如下：\n\n```java\nprivate void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + ((capacityIncrement > 0) ?\n                                         capacityIncrement : oldCapacity);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        elementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n\n> 这里的 `capacityIncrement` 是在初始化的时候可以额外指定的变量。如果指定了，那么就不进行乘以二扩容，而是每一次增加这个 `capacityIncrement` 变量\n\n#### 1.3 LinkedList\n\n> - 双向链表\n> - 内部额外存储头结点和尾结点\n\n### 2. KV 大类\n\n#### 2.1 HashMap\n\n> 面试里面最喜欢问的了，没有之一\n>\n> 主要几个流程：\n>\n> - `put`\n> - `get`\n> - `remove`\n>\n> 线程安全问题\n>\n> - put的时候导致的多线程数据不一致 \n>   - 两个线程前后写入，产生数据覆盖\n>   - 成环问题\n>\n> <img src=\"https://i.loli.net/2020/03/14/2WzkGAQVg9Rnpou.png\" alt=\"image.png\" style=\"zoom:80%;\" />\n\n基本数据结构：\n\n- `class Node<K,V>` 是桶节点和链表节点的基本数据结构\n- `Node<K,V>[] table` 是哈希表内部的实现，其实就是 **链表数组**\n\n##### 2.1.1 put 添加 K,V 对\n\n1. 计算 `key` 的 `hashcode` 值，将对象的 `hashcode` 进行高16位和低16位的异或操作。可以看到， `HashMap` 支持对 `null` 键的处理\n\n```java\nstatic final int hash(Object key) {\n  int h;\n\treturn (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n\n2. `putValue` 主体部分\n\n在之前的 `hash` 获取之后，接下来一步就是进行哈希表的一个处理了，由于细节比较多，我直接在源代码里面加注释来解释了\n\n```java\n/**\n     * Implements Map.put and related methods.\n     *\n     * @param hash hash for key\n     * @param key the key\n     * @param value the value to put\n     * @param onlyIfAbsent if true, don't change existing value\n     * @param evict if false, the table is in creation mode.\n     * @return previous value, or null if none\n     */\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n      \t//如果tab没有初始化\n        if ((tab = table) == null || (n = tab.length) == 0)\n            //resize进行空间分配.\n          \tn = (tab = resize()).length;\n      \t//如果当前桶是空的 , 那么新建节点 , 直接插入\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        //当前桶已经有节点 , 需要在后面进行插入\n      \telse {\n            Node<K,V> e; K k;\n          \t//对于桶的第一个节点 p , 如果插入的点和第一个点 p 一样\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n          \t//如果是红黑树 , 就进行红黑树插入\n          \telse if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            //如果第一个节点不同 , 并且后面是链表\n          \telse {\n                  //遍历链表\n              \t\tfor (int binCount = 0; ; ++binCount) {\n \t\t\t\t\t\t\t\t\t\t//遇到空节点 , 表示可以插入 (1.7进行头插 , 1.8 进行尾插)         \n                    if ((e = p.next) == null) {\n                      \t//插入到尾端\n                        p.next = newNode(hash, key, value, null);\n                      \t//如果 binCount >= 8 - 1 (链表长度为8) , 就把链表转红黑树\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                  \t//如果遇到相同的节点\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\t // p = p.next\n                }\n            }\n          \t//如果这个键值对存在 , 就进行覆盖\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n      \t//如果map大小大于了阈值 , 再次进行 resize\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n```\n\n有几个细节要提及：\n\n- `1.8` 中 , 链表和红黑树是交替使用的。\n  - 当链表长度达到了 **8** 之后，会转换为红黑树\n  - 当 `size` 是 **6** 之后，红黑树退化为链表\n  - 原因分析：\n    - 红黑树**平均**查询效率 O(logN) , 链表 O(N) / 2。在长度是 **8** 的时候，红黑树时间复杂度为 3 , 链表是 *8 / 2 = 4* 。这时候使用红黑树是效率更高的。而另一边退化的阈值设置为 **6** , 主要是中间有一个 **7** 的 *gap* , 从而避免红黑树和链表直接的频繁切换\n    - 当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件\n\n这里还有一个重要的调用函数 `resize()` 需要看一下\n\n```java\n// Cap 指的是哈希表中 , 链表数组的长度\n// Thr 指的是键值对的个数\nfinal Node<K,V>[] resize() {\n        Node<K,V>[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length;\n        int oldThr = threshold;\n        int newCap, newThr = 0;\n  \t\t\t//阈值更新 (也就是整个哈希表的可容纳大小)\n        if (oldCap > 0) {\n          \t// 如果旧有oldCap很大 , 就把阈值设置为 Integer.MAX_VALUE\n            if (oldCap >= MAXIMUM_CAPACITY) {\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            }\n          \t//DEFAULT_INITIAL_CAPACITY = 16\n          \t//MAXIMUM_CAPACITY = 1 << 30\n          \t//如果 oldCap * 2 比 MAXIMUM_CAPACITY 小 , 那么阈值更新到 2 倍\n            else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                     oldCap >= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr << 1; // double threshold\n        }\n  \t\t\t// 把新的链表数组长度设置为原来的 KV 对个数\n        else if (oldThr > 0) // initial capacity was placed in threshold\n            newCap = oldThr;\n        // 对于初始化的情况\n  \t\t\t// 数组长度设置 16\n  \t\t\t// 阈值设置 0.75f * 16 = 12\n  \t\t\telse {\n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        }\n        if (newThr == 0) {\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        }\n  \t\t\t//更新阈值 , 替换原有的哈希表. 数组长度为 newCap\n        threshold = newThr;\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n        table = newTab;\n  \t\t\t//如果不是初始化的情形 , 需要进行rehash\n        if (oldTab != null) {\n          \t//遍历数组每一个桶\n            for (int j = 0; j < oldCap; ++j) {\n                Node<K,V> e;\n              \t//当前桶非空 , 需要进行rehash\n                if ((e = oldTab[j]) != null) {\n                  \t//原有桶清空\n                    oldTab[j] = null;\n                  \t//如果只有一个节点 , 直接再次计算hash , 填入就可以\n                    if (e.next == null)\n                        newTab[e.hash & (newCap - 1)] = e;\n                  \t//如果是红黑树 , 那么红黑树的 split\n                    else if (e instanceof TreeNode)\n                        ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                    //如果是链表\n                  \telse { // preserve order\n                        Node<K,V> loHead = null, loTail = null;\n                        Node<K,V> hiHead = null, hiTail = null;\n                        Node<K,V> next;\n                        do {\n                          \t//获取next节点\n                            next = e.next;\n                          \t// e 作为前驱节点 , 同时记录下头节点和尾节点\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 低若干位 , 和原来的一致\n                            if ((e.hash & oldCap) == 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 插入到 loTail  , 进行尾插\n                              \tif (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            }\n                            else {\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            }\n                        } while ((e = next) != null);\n                      \t//到这里 , 已经形成了单独的链表 \n                      \t//如果是低位 , 那么直接重新插入到原来的桶\n                        if (loTail != null) {\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        }\n                      \t//插入到高位桶\n                        if (hiTail != null) {\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        }\n                    }\n                }\n            }\n        }\n        return newTab;\n    }\n```\n\n#### 2.2 HashTable\n\n> 基本要点\n>\n> - 采用链表实现\n> - 线程安全 `synchronized`\n> - 默认的 Capacity (链表数组长度)是 **11** , 装载因子 0.75f\n> - *index* 计算：`index = (hash & 0x7FFFFFFF) % tab.length`\n> - 头插\n> - rehash的变化为 `newCapacity = (oldCapacity << 1) + 1`\n> - KV 不可以为空\n\n#### 2.3 LinkedHashMap\n\n这个类继承自 `HashMap`，内部维护了一个双向链表。这个链表可以决定迭代的遍历顺序\n\n在添加新节点的时候，将新节点链接在**内部双向链表的尾部**。\n\n`accessOrder=true`的模式下,在`afterNodeAccess()`函数中，会将当前被访问到的节点e，移动至内部的双向链表的尾部。\n\n> 重点关注：afterNodeAccess()函数中，会修改modCount,因此当你正在accessOrder=true的模式下,迭代LinkedHashMap时，如果同时查询访问数据，也会导致fail-fast，因为迭代的顺序已经改变。\n\n#### 2.4 TreeMap\n\n> LinkedHashMap保证数据可以保持插入顺序\n>\n> 而如果我们希望Map可以保持key的大小顺序的时候，我们就需要利用TreeMap了\n\n内部采用了红黑树，并不是基于 **hash** 来进行实现的\n\n### 3. SET 大类\n\n#### 3.1 HashSet\n\n内部实现完全使用了 `HashMap`\n\n#### 3.2 TreeSet\n\n内部实现采用了 `TreeMap` ， 持有 `NavigableMap` 类型的引用\n\n### 4. 线程安全大类\n\n#### 4.1 ConcurrentHashMap\n\n> - *Key , Value* 不可以为空\n> - Hash计算如下 `(h ^ (h >>> 16)) & HASH_BITS`\n> - 链表 & 红黑树使用。链表进行尾插\n> - 链表和红黑树的临界值也是 **8**\n\n主要讲述一下和 *HashMap* 的不同\n\n##### Node定义\n\n在 *ConcurrentHashMap* 中，*Value,next* 都设置为了 `volatile` 内存可见\n\n```java\nprivate final Node<K,V>[] initTable() {\n        Node<K,V>[] tab; int sc;\n        while ((tab = table) == null || tab.length == 0) {\n            if ((sc = sizeCtl) < 0)\n                Thread.yield(); // lost initialization race; just spin\n          \t//CAS控制\n            else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n                try {\n                    if ((tab = table) == null || tab.length == 0) {\n                        int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                        @SuppressWarnings(\"unchecked\")\n                        Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                        table = tab = nt;\n                        sc = n - (n >>> 2);\n                    }\n                } finally {\n                    sizeCtl = sc;\n                }\n                break;\n            }\n        }\n        return tab;\n    }\n```\n\n**yield 和 sleep 的异同**\n\n1）yield, sleep 都能暂停当前线程，sleep 可以指定具体休眠的时间，而 yield 则依赖 CPU 的时间片划分。\n\n2）yield, sleep 两个在暂停过程中，如已经持有锁，则都不会释放锁资源。\n\n3）yield 不能被中断，而 sleep 则可以接受中断。\n\n在 *1.8* 之前，采用了 **分段锁** ； 而 *1.8* 中主要使用了 **CAS** 和 **synchronized** 来进行并发控制\n\n**CAS** 没什么能说的，主要看一下分段锁 *Segment* \n\n这是一种 *ReentrantLock*，段的结构和 *HashMap* 类似，也是数组 + 链表。每一个段包含了 *HashEntry* 数组。当要对这个数组进行修改的时候，必须要先获得对应的锁(*Get*不需要获取锁，因为共享变量设置为了 `volatile`，除非读到的值是空的才会加锁重读)\n\n*volatile* 底层使用了**内存屏障**来加以完成，实现对内存操作的顺序控制。\n\n> *ReentrantLock* 可重入锁，表示已经获取到这个资源的线程，可以再次进入。*Synchronized* 也是可以重入的。每一个线程进入一次，那么锁计数器+1.直到计数器为0的时候才释放\n>\n> - *ReentrantLock* 采用 **JDK** 实现；*Synchronized*则是 **JVM** 实现的\n> - *Synchronized* 底层使用监视器（管程）实现，管程的本质就是操作系统的 *Mutex Lock*，需要牵涉到用户态和核心态的切换。 优化之前，性能比可重入锁差；\n> - *1.6* 之后引入了*Synchronized* 轻量级锁和偏向锁，也是默认开启的。此外还有自适应自旋锁的优化\n\n","slug":"Java集合","published":1,"updated":"2020-10-19T09:47:13.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgj9qi1p001fx8me49c67yfo","content":"<h2 id=\"Java-集合类整理\"><a href=\"#Java-集合类整理\" class=\"headerlink\" title=\"Java 集合类整理\"></a>Java 集合类整理</h2><blockquote>\n<p><em>JDK</em> 版本 <strong>1.8</strong></p>\n<p>本文章就最近看的一些jdk源码来进行总结，可能会比较简洁</p>\n</blockquote>\n<h3 id=\"1-List-大类\"><a href=\"#1-List-大类\" class=\"headerlink\" title=\"1. List 大类\"></a>1. List 大类</h3><p>主要包含了 <strong>ArrayList , Vector , LinkedList</strong></p>\n<h4 id=\"1-1-ArrayList\"><a href=\"#1-1-ArrayList\" class=\"headerlink\" title=\"1.1 ArrayList\"></a>1.1 ArrayList</h4><blockquote>\n<p>基本思想：</p>\n<ul>\n<li>默认大小为 10 ，初始化的时候不进行对象数组空间分配，直到第一次 <code>add(E e)</code></li>\n<li>缓冲区满才进行扩容。扩容策略采取 <em>OldCapacity</em> * 1.5</li>\n<li><code>remove</code> 不进行容量调整 (会有浪费)</li>\n</ul>\n</blockquote>\n<p>关键代码部分 <code>grow(int minCapacity)</code></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// overflow-conscious code</span>\n        <span class=\"token keyword\">int</span> oldCapacity <span class=\"token operator\">=</span> elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> oldCapacity <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>oldCapacity <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> minCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            newCapacity <span class=\"token operator\">=</span> minCapacity<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> MAX_ARRAY_SIZE <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            newCapacity <span class=\"token operator\">=</span> <span class=\"token function\">hugeCapacity</span><span class=\"token punctuation\">(</span>minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// minCapacity is usually close to size, so this is a win:</span>\n        elementData <span class=\"token operator\">=</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hugeCapacity</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// overflow</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutOfMemoryError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>minCapacity <span class=\"token operator\">></span> MAX_ARRAY_SIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n            Integer<span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">:</span>\n            MAX_ARRAY_SIZE<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>根据之前计算得到的 <code>minCapacity</code> , 进行 <code>ArrayList</code> 的扩容操作。如果计算得到的容量大于了 <code>MAX_ARRAY_SIZE = INT_MAX - 8</code> ，那么会直接扩容到 <code>Integer.MAX_VALUE</code> </p>\n<blockquote>\n<p>这里的 <code>MAX_ARRAY_SIZE</code> 设置为 <code>INT_MAX - 8</code> 主要是为了考虑到，有一些<em>JVM</em> 的对象数组 (这里是 <code>Object[] elementData</code>) 会采取一定长度的 <em>header</em> 。如果直接设置为 <code>INT_MAX</code> 可能会引发 OOM</p>\n</blockquote>\n<p>此外，可以看出 <code>ArrayList</code> 扩容其实是采取了复制的方法，将原来空间的所有数据放到了另一块空间。这种做法其实在复制上消耗特别大</p>\n<h4 id=\"1-2-Vector\"><a href=\"#1-2-Vector\" class=\"headerlink\" title=\"1.2 Vector\"></a>1.2 Vector</h4><blockquote>\n<p>基本思想：</p>\n<ul>\n<li>和 <code>ArrayList</code> 颇为类似，它也是以10作为初始容量，初始化不分配对象数组的空间</li>\n<li>扩容采取  <em>OldCapacity</em> * 2</li>\n<li><code>remove</code> 不进行容量调整</li>\n<li>线程安全 <code>synchronized</code></li>\n</ul>\n</blockquote>\n<p>核心代码如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// overflow-conscious code</span>\n        <span class=\"token keyword\">int</span> oldCapacity <span class=\"token operator\">=</span> elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> oldCapacity <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>capacityIncrement <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n                                         capacityIncrement <span class=\"token operator\">:</span> oldCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> minCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            newCapacity <span class=\"token operator\">=</span> minCapacity<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> MAX_ARRAY_SIZE <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            newCapacity <span class=\"token operator\">=</span> <span class=\"token function\">hugeCapacity</span><span class=\"token punctuation\">(</span>minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        elementData <span class=\"token operator\">=</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>这里的 <code>capacityIncrement</code> 是在初始化的时候可以额外指定的变量。如果指定了，那么就不进行乘以二扩容，而是每一次增加这个 <code>capacityIncrement</code> 变量</p>\n</blockquote>\n<h4 id=\"1-3-LinkedList\"><a href=\"#1-3-LinkedList\" class=\"headerlink\" title=\"1.3 LinkedList\"></a>1.3 LinkedList</h4><blockquote>\n<ul>\n<li>双向链表</li>\n<li>内部额外存储头结点和尾结点</li>\n</ul>\n</blockquote>\n<h3 id=\"2-KV-大类\"><a href=\"#2-KV-大类\" class=\"headerlink\" title=\"2. KV 大类\"></a>2. KV 大类</h3><h4 id=\"2-1-HashMap\"><a href=\"#2-1-HashMap\" class=\"headerlink\" title=\"2.1 HashMap\"></a>2.1 HashMap</h4><blockquote>\n<p>面试里面最喜欢问的了，没有之一</p>\n<p>主要几个流程：</p>\n<ul>\n<li><code>put</code></li>\n<li><code>get</code></li>\n<li><code>remove</code></li>\n</ul>\n<p>线程安全问题</p>\n<ul>\n<li>put的时候导致的多线程数据不一致 <ul>\n<li>两个线程前后写入，产生数据覆盖</li>\n<li>成环问题</li>\n</ul>\n</li>\n</ul>\n<img src=\"https://i.loli.net/2020/03/14/2WzkGAQVg9Rnpou.png\" alt=\"image.png\" style=\"zoom:80%;\" />\n</blockquote>\n<p>基本数据结构：</p>\n<ul>\n<li><code>class Node&lt;K,V&gt;</code> 是桶节点和链表节点的基本数据结构</li>\n<li><code>Node&lt;K,V&gt;[] table</code> 是哈希表内部的实现，其实就是 <strong>链表数组</strong></li>\n</ul>\n<h5 id=\"2-1-1-put-添加-K-V-对\"><a href=\"#2-1-1-put-添加-K-V-对\" class=\"headerlink\" title=\"2.1.1 put 添加 K,V 对\"></a>2.1.1 put 添加 K,V 对</h5><ol>\n<li>计算 <code>key</code> 的 <code>hashcode</code> 值，将对象的 <code>hashcode</code> 进行高16位和低16位的异或操作。可以看到， <code>HashMap</code> 支持对 <code>null</code> 键的处理</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>Object key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<ol start=\"2\">\n<li><code>putValue</code> 主体部分</li>\n</ol>\n<p>在之前的 <code>hash</code> 获取之后，接下来一步就是进行哈希表的一个处理了，由于细节比较多，我直接在源代码里面加注释来解释了</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n     * Implements Map.put and related methods.\n     *\n     * @param hash hash for key\n     * @param key the key\n     * @param value the value to put\n     * @param onlyIfAbsent if true, don't change existing value\n     * @param evict if false, the table is in creation mode.\n     * @return previous value, or null if none\n     */</span>\n    <span class=\"token keyword\">final</span> V <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> K key<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">//如果tab没有初始化</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">//resize进行空间分配.</span>\n              n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">//如果当前桶是空的 , 那么新建节点 , 直接插入</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n            tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//当前桶已经有节点 , 需要在后面进行插入</span>\n          <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> e<span class=\"token punctuation\">;</span> K k<span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">//对于桶的第一个节点 p , 如果插入的点和第一个点 p 一样</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">//如果是红黑树 , 就进行红黑树插入</span>\n              <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span>\n                e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//如果第一个节点不同 , 并且后面是链表</span>\n              <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token comment\" spellcheck=\"true\">//遍历链表</span>\n                      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                                         <span class=\"token comment\" spellcheck=\"true\">//遇到空节点 , 表示可以插入 (1.7进行头插 , 1.8 进行尾插)         </span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token comment\" spellcheck=\"true\">//插入到尾端</span>\n                        p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token comment\" spellcheck=\"true\">//如果 binCount >= 8 - 1 (链表长度为8) , 就把链表转红黑树</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">>=</span> TREEIFY_THRESHOLD <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// -1 for 1st</span>\n                            <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token comment\" spellcheck=\"true\">//如果遇到相同的节点</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// p = p.next</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">//如果这个键值对存在 , 就进行覆盖</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// existing mapping for key</span>\n                V oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">//如果map大小大于了阈值 , 再次进行 resize</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>有几个细节要提及：</p>\n<ul>\n<li><code>1.8</code> 中 , 链表和红黑树是交替使用的。<ul>\n<li>当链表长度达到了 <strong>8</strong> 之后，会转换为红黑树</li>\n<li>当 <code>size</code> 是 <strong>6</strong> 之后，红黑树退化为链表</li>\n<li>原因分析：<ul>\n<li>红黑树<strong>平均</strong>查询效率 O(logN) , 链表 O(N) / 2。在长度是 <strong>8</strong> 的时候，红黑树时间复杂度为 3 , 链表是 <em>8 / 2 = 4</em> 。这时候使用红黑树是效率更高的。而另一边退化的阈值设置为 <strong>6</strong> , 主要是中间有一个 <strong>7</strong> 的 <em>gap</em> , 从而避免红黑树和链表直接的频繁切换</li>\n<li>当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>这里还有一个重要的调用函数 <code>resize()</code> 需要看一下</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// Cap 指的是哈希表中 , 链表数组的长度</span>\n<span class=\"token comment\" spellcheck=\"true\">// Thr 指的是键值对的个数</span>\n<span class=\"token keyword\">final</span> Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> oldCap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> oldTab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> oldThr <span class=\"token operator\">=</span> threshold<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> newCap<span class=\"token punctuation\">,</span> newThr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">//阈值更新 (也就是整个哈希表的可容纳大小)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 如果旧有oldCap很大 , 就把阈值设置为 Integer.MAX_VALUE</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">>=</span> MAXIMUM_CAPACITY<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                threshold <span class=\"token operator\">=</span> Integer<span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> oldTab<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">//DEFAULT_INITIAL_CAPACITY = 16</span>\n              <span class=\"token comment\" spellcheck=\"true\">//MAXIMUM_CAPACITY = 1 &lt;&lt; 30</span>\n              <span class=\"token comment\" spellcheck=\"true\">//如果 oldCap * 2 比 MAXIMUM_CAPACITY 小 , 那么阈值更新到 2 倍</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">=</span> oldCap <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> MAXIMUM_CAPACITY <span class=\"token operator\">&amp;&amp;</span>\n                     oldCap <span class=\"token operator\">>=</span> DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">)</span>\n                newThr <span class=\"token operator\">=</span> oldThr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// double threshold</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 把新的链表数组长度设置为原来的 KV 对个数</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldThr <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// initial capacity was placed in threshold</span>\n            newCap <span class=\"token operator\">=</span> oldThr<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 对于初始化的情况</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 数组长度设置 16</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 阈值设置 0.75f * 16 = 12</span>\n              <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            newCap <span class=\"token operator\">=</span> DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">;</span>\n            newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>DEFAULT_LOAD_FACTOR <span class=\"token operator\">*</span> DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newThr <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> ft <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>newCap <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">;</span>\n            newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">&lt;</span> MAXIMUM_CAPACITY <span class=\"token operator\">&amp;&amp;</span> ft <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>MAXIMUM_CAPACITY <span class=\"token operator\">?</span>\n                      <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ft <span class=\"token operator\">:</span> Integer<span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">//更新阈值 , 替换原有的哈希表. 数组长度为 newCap</span>\n        threshold <span class=\"token operator\">=</span> newThr<span class=\"token punctuation\">;</span>\n        Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span>newCap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        table <span class=\"token operator\">=</span> newTab<span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">//如果不是初始化的情形 , 需要进行rehash</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">//遍历数组每一个桶</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> oldCap<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> e<span class=\"token punctuation\">;</span>\n                  <span class=\"token comment\" spellcheck=\"true\">//当前桶非空 , 需要进行rehash</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token comment\" spellcheck=\"true\">//原有桶清空</span>\n                    oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                      <span class=\"token comment\" spellcheck=\"true\">//如果只有一个节点 , 直接再次计算hash , 填入就可以</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n                        newTab<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                      <span class=\"token comment\" spellcheck=\"true\">//如果是红黑树 , 那么红黑树的 split</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> newTab<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> oldCap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//如果是链表</span>\n                      <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// preserve order</span>\n                        Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> loHead <span class=\"token operator\">=</span> null<span class=\"token punctuation\">,</span> loTail <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                        Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> hiHead <span class=\"token operator\">=</span> null<span class=\"token punctuation\">,</span> hiTail <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                        Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> next<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">do</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                              <span class=\"token comment\" spellcheck=\"true\">//获取next节点</span>\n                            next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n                              <span class=\"token comment\" spellcheck=\"true\">// e 作为前驱节点 , 同时记录下头节点和尾节点</span>\n                                                        <span class=\"token comment\" spellcheck=\"true\">// 低若干位 , 和原来的一致</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> oldCap<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                                                                <span class=\"token comment\" spellcheck=\"true\">// 插入到 loTail  , 进行尾插</span>\n                                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n                                    loHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">else</span>\n                                    loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                                loTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n                                    hiHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">else</span>\n                                    hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                                hiTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n                            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token comment\" spellcheck=\"true\">//到这里 , 已经形成了单独的链表 </span>\n                          <span class=\"token comment\" spellcheck=\"true\">//如果是低位 , 那么直接重新插入到原来的桶</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                            loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                            newTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loHead<span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                          <span class=\"token comment\" spellcheck=\"true\">//插入到高位桶</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                            hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                            newTab<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> oldCap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hiHead<span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newTab<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"2-2-HashTable\"><a href=\"#2-2-HashTable\" class=\"headerlink\" title=\"2.2 HashTable\"></a>2.2 HashTable</h4><blockquote>\n<p>基本要点</p>\n<ul>\n<li>采用链表实现</li>\n<li>线程安全 <code>synchronized</code></li>\n<li>默认的 Capacity (链表数组长度)是 <strong>11</strong> , 装载因子 0.75f</li>\n<li><em>index</em> 计算：<code>index = (hash &amp; 0x7FFFFFFF) % tab.length</code></li>\n<li>头插</li>\n<li>rehash的变化为 <code>newCapacity = (oldCapacity &lt;&lt; 1) + 1</code></li>\n<li>KV 不可以为空</li>\n</ul>\n</blockquote>\n<h4 id=\"2-3-LinkedHashMap\"><a href=\"#2-3-LinkedHashMap\" class=\"headerlink\" title=\"2.3 LinkedHashMap\"></a>2.3 LinkedHashMap</h4><p>这个类继承自 <code>HashMap</code>，内部维护了一个双向链表。这个链表可以决定迭代的遍历顺序</p>\n<p>在添加新节点的时候，将新节点链接在<strong>内部双向链表的尾部</strong>。</p>\n<p><code>accessOrder=true</code>的模式下,在<code>afterNodeAccess()</code>函数中，会将当前被访问到的节点e，移动至内部的双向链表的尾部。</p>\n<blockquote>\n<p>重点关注：afterNodeAccess()函数中，会修改modCount,因此当你正在accessOrder=true的模式下,迭代LinkedHashMap时，如果同时查询访问数据，也会导致fail-fast，因为迭代的顺序已经改变。</p>\n</blockquote>\n<h4 id=\"2-4-TreeMap\"><a href=\"#2-4-TreeMap\" class=\"headerlink\" title=\"2.4 TreeMap\"></a>2.4 TreeMap</h4><blockquote>\n<p>LinkedHashMap保证数据可以保持插入顺序</p>\n<p>而如果我们希望Map可以保持key的大小顺序的时候，我们就需要利用TreeMap了</p>\n</blockquote>\n<p>内部采用了红黑树，并不是基于 <strong>hash</strong> 来进行实现的</p>\n<h3 id=\"3-SET-大类\"><a href=\"#3-SET-大类\" class=\"headerlink\" title=\"3. SET 大类\"></a>3. SET 大类</h3><h4 id=\"3-1-HashSet\"><a href=\"#3-1-HashSet\" class=\"headerlink\" title=\"3.1 HashSet\"></a>3.1 HashSet</h4><p>内部实现完全使用了 <code>HashMap</code></p>\n<h4 id=\"3-2-TreeSet\"><a href=\"#3-2-TreeSet\" class=\"headerlink\" title=\"3.2 TreeSet\"></a>3.2 TreeSet</h4><p>内部实现采用了 <code>TreeMap</code> ， 持有 <code>NavigableMap</code> 类型的引用</p>\n<h3 id=\"4-线程安全大类\"><a href=\"#4-线程安全大类\" class=\"headerlink\" title=\"4. 线程安全大类\"></a>4. 线程安全大类</h3><h4 id=\"4-1-ConcurrentHashMap\"><a href=\"#4-1-ConcurrentHashMap\" class=\"headerlink\" title=\"4.1 ConcurrentHashMap\"></a>4.1 ConcurrentHashMap</h4><blockquote>\n<ul>\n<li><em>Key , Value</em> 不可以为空</li>\n<li>Hash计算如下 <code>(h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS</code></li>\n<li>链表 &amp; 红黑树使用。链表进行尾插</li>\n<li>链表和红黑树的临界值也是 <strong>8</strong></li>\n</ul>\n</blockquote>\n<p>主要讲述一下和 <em>HashMap</em> 的不同</p>\n<h5 id=\"Node定义\"><a href=\"#Node定义\" class=\"headerlink\" title=\"Node定义\"></a>Node定义</h5><p>在 <em>ConcurrentHashMap</em> 中，<em>Value,next</em> 都设置为了 <code>volatile</code> 内存可见</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">initTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> sc<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sc <span class=\"token operator\">=</span> sizeCtl<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// lost initialization race; just spin</span>\n              <span class=\"token comment\" spellcheck=\"true\">//CAS控制</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> SIZECTL<span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sc <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> sc <span class=\"token operator\">:</span> DEFAULT_CAPACITY<span class=\"token punctuation\">;</span>\n                        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n                        Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        table <span class=\"token operator\">=</span> tab <span class=\"token operator\">=</span> nt<span class=\"token punctuation\">;</span>\n                        sc <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    sizeCtl <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> tab<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>yield 和 sleep 的异同</strong></p>\n<p>1）yield, sleep 都能暂停当前线程，sleep 可以指定具体休眠的时间，而 yield 则依赖 CPU 的时间片划分。</p>\n<p>2）yield, sleep 两个在暂停过程中，如已经持有锁，则都不会释放锁资源。</p>\n<p>3）yield 不能被中断，而 sleep 则可以接受中断。</p>\n<p>在 <em>1.8</em> 之前，采用了 <strong>分段锁</strong> ； 而 <em>1.8</em> 中主要使用了 <strong>CAS</strong> 和 <strong>synchronized</strong> 来进行并发控制</p>\n<p><strong>CAS</strong> 没什么能说的，主要看一下分段锁 <em>Segment</em> </p>\n<p>这是一种 <em>ReentrantLock</em>，段的结构和 <em>HashMap</em> 类似，也是数组 + 链表。每一个段包含了 <em>HashEntry</em> 数组。当要对这个数组进行修改的时候，必须要先获得对应的锁(<em>Get</em>不需要获取锁，因为共享变量设置为了 <code>volatile</code>，除非读到的值是空的才会加锁重读)</p>\n<p><em>volatile</em> 底层使用了<strong>内存屏障</strong>来加以完成，实现对内存操作的顺序控制。</p>\n<blockquote>\n<p><em>ReentrantLock</em> 可重入锁，表示已经获取到这个资源的线程，可以再次进入。<em>Synchronized</em> 也是可以重入的。每一个线程进入一次，那么锁计数器+1.直到计数器为0的时候才释放</p>\n<ul>\n<li><em>ReentrantLock</em> 采用 <strong>JDK</strong> 实现；<em>Synchronized</em>则是 <strong>JVM</strong> 实现的</li>\n<li><em>Synchronized</em> 底层使用监视器（管程）实现，管程的本质就是操作系统的 <em>Mutex Lock</em>，需要牵涉到用户态和核心态的切换。 优化之前，性能比可重入锁差；</li>\n<li><em>1.6</em> 之后引入了<em>Synchronized</em> 轻量级锁和偏向锁，也是默认开启的。此外还有自适应自旋锁的优化</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1603247133426-705532600985?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80","excerpt":"","more":"<h2 id=\"Java-集合类整理\"><a href=\"#Java-集合类整理\" class=\"headerlink\" title=\"Java 集合类整理\"></a>Java 集合类整理</h2><blockquote>\n<p><em>JDK</em> 版本 <strong>1.8</strong></p>\n<p>本文章就最近看的一些jdk源码来进行总结，可能会比较简洁</p>\n</blockquote>\n<h3 id=\"1-List-大类\"><a href=\"#1-List-大类\" class=\"headerlink\" title=\"1. List 大类\"></a>1. List 大类</h3><p>主要包含了 <strong>ArrayList , Vector , LinkedList</strong></p>\n<h4 id=\"1-1-ArrayList\"><a href=\"#1-1-ArrayList\" class=\"headerlink\" title=\"1.1 ArrayList\"></a>1.1 ArrayList</h4><blockquote>\n<p>基本思想：</p>\n<ul>\n<li>默认大小为 10 ，初始化的时候不进行对象数组空间分配，直到第一次 <code>add(E e)</code></li>\n<li>缓冲区满才进行扩容。扩容策略采取 <em>OldCapacity</em> * 1.5</li>\n<li><code>remove</code> 不进行容量调整 (会有浪费)</li>\n</ul>\n</blockquote>\n<p>关键代码部分 <code>grow(int minCapacity)</code></p>\n<pre><code class=\"java\">private void grow(int minCapacity) &#123;\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);\n        if (newCapacity - minCapacity &lt; 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n&#125;\nprivate static int hugeCapacity(int minCapacity) &#123;\n        if (minCapacity &lt; 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity &gt; MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n&#125;</code></pre>\n<p>根据之前计算得到的 <code>minCapacity</code> , 进行 <code>ArrayList</code> 的扩容操作。如果计算得到的容量大于了 <code>MAX_ARRAY_SIZE = INT_MAX - 8</code> ，那么会直接扩容到 <code>Integer.MAX_VALUE</code> </p>\n<blockquote>\n<p>这里的 <code>MAX_ARRAY_SIZE</code> 设置为 <code>INT_MAX - 8</code> 主要是为了考虑到，有一些<em>JVM</em> 的对象数组 (这里是 <code>Object[] elementData</code>) 会采取一定长度的 <em>header</em> 。如果直接设置为 <code>INT_MAX</code> 可能会引发 OOM</p>\n</blockquote>\n<p>此外，可以看出 <code>ArrayList</code> 扩容其实是采取了复制的方法，将原来空间的所有数据放到了另一块空间。这种做法其实在复制上消耗特别大</p>\n<h4 id=\"1-2-Vector\"><a href=\"#1-2-Vector\" class=\"headerlink\" title=\"1.2 Vector\"></a>1.2 Vector</h4><blockquote>\n<p>基本思想：</p>\n<ul>\n<li>和 <code>ArrayList</code> 颇为类似，它也是以10作为初始容量，初始化不分配对象数组的空间</li>\n<li>扩容采取  <em>OldCapacity</em> * 2</li>\n<li><code>remove</code> 不进行容量调整</li>\n<li>线程安全 <code>synchronized</code></li>\n</ul>\n</blockquote>\n<p>核心代码如下：</p>\n<pre><code class=\"java\">private void grow(int minCapacity) &#123;\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?\n                                         capacityIncrement : oldCapacity);\n        if (newCapacity - minCapacity &lt; 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)\n            newCapacity = hugeCapacity(minCapacity);\n        elementData = Arrays.copyOf(elementData, newCapacity);\n&#125;</code></pre>\n<blockquote>\n<p>这里的 <code>capacityIncrement</code> 是在初始化的时候可以额外指定的变量。如果指定了，那么就不进行乘以二扩容，而是每一次增加这个 <code>capacityIncrement</code> 变量</p>\n</blockquote>\n<h4 id=\"1-3-LinkedList\"><a href=\"#1-3-LinkedList\" class=\"headerlink\" title=\"1.3 LinkedList\"></a>1.3 LinkedList</h4><blockquote>\n<ul>\n<li>双向链表</li>\n<li>内部额外存储头结点和尾结点</li>\n</ul>\n</blockquote>\n<h3 id=\"2-KV-大类\"><a href=\"#2-KV-大类\" class=\"headerlink\" title=\"2. KV 大类\"></a>2. KV 大类</h3><h4 id=\"2-1-HashMap\"><a href=\"#2-1-HashMap\" class=\"headerlink\" title=\"2.1 HashMap\"></a>2.1 HashMap</h4><blockquote>\n<p>面试里面最喜欢问的了，没有之一</p>\n<p>主要几个流程：</p>\n<ul>\n<li><code>put</code></li>\n<li><code>get</code></li>\n<li><code>remove</code></li>\n</ul>\n<p>线程安全问题</p>\n<ul>\n<li>put的时候导致的多线程数据不一致 <ul>\n<li>两个线程前后写入，产生数据覆盖</li>\n<li>成环问题</li>\n</ul>\n</li>\n</ul>\n<img src=\"https://i.loli.net/2020/03/14/2WzkGAQVg9Rnpou.png\" alt=\"image.png\" style=\"zoom:80%;\" />\n</blockquote>\n<p>基本数据结构：</p>\n<ul>\n<li><code>class Node&lt;K,V&gt;</code> 是桶节点和链表节点的基本数据结构</li>\n<li><code>Node&lt;K,V&gt;[] table</code> 是哈希表内部的实现，其实就是 <strong>链表数组</strong></li>\n</ul>\n<h5 id=\"2-1-1-put-添加-K-V-对\"><a href=\"#2-1-1-put-添加-K-V-对\" class=\"headerlink\" title=\"2.1.1 put 添加 K,V 对\"></a>2.1.1 put 添加 K,V 对</h5><ol>\n<li>计算 <code>key</code> 的 <code>hashcode</code> 值，将对象的 <code>hashcode</code> 进行高16位和低16位的异或操作。可以看到， <code>HashMap</code> 支持对 <code>null</code> 键的处理</li>\n</ol>\n<pre><code class=\"java\">static final int hash(Object key) &#123;\n  int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n&#125;</code></pre>\n<ol start=\"2\">\n<li><code>putValue</code> 主体部分</li>\n</ol>\n<p>在之前的 <code>hash</code> 获取之后，接下来一步就是进行哈希表的一个处理了，由于细节比较多，我直接在源代码里面加注释来解释了</p>\n<pre><code class=\"java\">/**\n     * Implements Map.put and related methods.\n     *\n     * @param hash hash for key\n     * @param key the key\n     * @param value the value to put\n     * @param onlyIfAbsent if true, don&#39;t change existing value\n     * @param evict if false, the table is in creation mode.\n     * @return previous value, or null if none\n     */\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) &#123;\n        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;\n          //如果tab没有初始化\n        if ((tab = table) == null || (n = tab.length) == 0)\n            //resize进行空间分配.\n              n = (tab = resize()).length;\n          //如果当前桶是空的 , 那么新建节点 , 直接插入\n        if ((p = tab[i = (n - 1) &amp; hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        //当前桶已经有节点 , 需要在后面进行插入\n          else &#123;\n            Node&lt;K,V&gt; e; K k;\n              //对于桶的第一个节点 p , 如果插入的点和第一个点 p 一样\n            if (p.hash == hash &amp;&amp;\n                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))\n                e = p;\n              //如果是红黑树 , 就进行红黑树插入\n              else if (p instanceof TreeNode)\n                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);\n            //如果第一个节点不同 , 并且后面是链表\n              else &#123;\n                  //遍历链表\n                      for (int binCount = 0; ; ++binCount) &#123;\n                                         //遇到空节点 , 表示可以插入 (1.7进行头插 , 1.8 进行尾插)         \n                    if ((e = p.next) == null) &#123;\n                          //插入到尾端\n                        p.next = newNode(hash, key, value, null);\n                          //如果 binCount &gt;= 8 - 1 (链表长度为8) , 就把链表转红黑树\n                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    &#125;\n                      //如果遇到相同的节点\n                    if (e.hash == hash &amp;&amp;\n                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                        break;\n                    p = e;     // p = p.next\n                &#125;\n            &#125;\n              //如果这个键值对存在 , 就进行覆盖\n            if (e != null) &#123; // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            &#125;\n        &#125;\n        ++modCount;\n          //如果map大小大于了阈值 , 再次进行 resize\n        if (++size &gt; threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    &#125;</code></pre>\n<p>有几个细节要提及：</p>\n<ul>\n<li><code>1.8</code> 中 , 链表和红黑树是交替使用的。<ul>\n<li>当链表长度达到了 <strong>8</strong> 之后，会转换为红黑树</li>\n<li>当 <code>size</code> 是 <strong>6</strong> 之后，红黑树退化为链表</li>\n<li>原因分析：<ul>\n<li>红黑树<strong>平均</strong>查询效率 O(logN) , 链表 O(N) / 2。在长度是 <strong>8</strong> 的时候，红黑树时间复杂度为 3 , 链表是 <em>8 / 2 = 4</em> 。这时候使用红黑树是效率更高的。而另一边退化的阈值设置为 <strong>6</strong> , 主要是中间有一个 <strong>7</strong> 的 <em>gap</em> , 从而避免红黑树和链表直接的频繁切换</li>\n<li>当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>这里还有一个重要的调用函数 <code>resize()</code> 需要看一下</p>\n<pre><code class=\"java\">// Cap 指的是哈希表中 , 链表数组的长度\n// Thr 指的是键值对的个数\nfinal Node&lt;K,V&gt;[] resize() &#123;\n        Node&lt;K,V&gt;[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length;\n        int oldThr = threshold;\n        int newCap, newThr = 0;\n              //阈值更新 (也就是整个哈希表的可容纳大小)\n        if (oldCap &gt; 0) &#123;\n              // 如果旧有oldCap很大 , 就把阈值设置为 Integer.MAX_VALUE\n            if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            &#125;\n              //DEFAULT_INITIAL_CAPACITY = 16\n              //MAXIMUM_CAPACITY = 1 &lt;&lt; 30\n              //如果 oldCap * 2 比 MAXIMUM_CAPACITY 小 , 那么阈值更新到 2 倍\n            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;\n                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr &lt;&lt; 1; // double threshold\n        &#125;\n              // 把新的链表数组长度设置为原来的 KV 对个数\n        else if (oldThr &gt; 0) // initial capacity was placed in threshold\n            newCap = oldThr;\n        // 对于初始化的情况\n              // 数组长度设置 16\n              // 阈值设置 0.75f * 16 = 12\n              else &#123;\n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        &#125;\n        if (newThr == 0) &#123;\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        &#125;\n              //更新阈值 , 替换原有的哈希表. 数组长度为 newCap\n        threshold = newThr;\n        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];\n        table = newTab;\n              //如果不是初始化的情形 , 需要进行rehash\n        if (oldTab != null) &#123;\n              //遍历数组每一个桶\n            for (int j = 0; j &lt; oldCap; ++j) &#123;\n                Node&lt;K,V&gt; e;\n                  //当前桶非空 , 需要进行rehash\n                if ((e = oldTab[j]) != null) &#123;\n                      //原有桶清空\n                    oldTab[j] = null;\n                      //如果只有一个节点 , 直接再次计算hash , 填入就可以\n                    if (e.next == null)\n                        newTab[e.hash &amp; (newCap - 1)] = e;\n                      //如果是红黑树 , 那么红黑树的 split\n                    else if (e instanceof TreeNode)\n                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);\n                    //如果是链表\n                      else &#123; // preserve order\n                        Node&lt;K,V&gt; loHead = null, loTail = null;\n                        Node&lt;K,V&gt; hiHead = null, hiTail = null;\n                        Node&lt;K,V&gt; next;\n                        do &#123;\n                              //获取next节点\n                            next = e.next;\n                              // e 作为前驱节点 , 同时记录下头节点和尾节点\n                                                        // 低若干位 , 和原来的一致\n                            if ((e.hash &amp; oldCap) == 0) &#123;\n                                                                // 插入到 loTail  , 进行尾插\n                                  if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            &#125;\n                            else &#123;\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            &#125;\n                        &#125; while ((e = next) != null);\n                          //到这里 , 已经形成了单独的链表 \n                          //如果是低位 , 那么直接重新插入到原来的桶\n                        if (loTail != null) &#123;\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        &#125;\n                          //插入到高位桶\n                        if (hiTail != null) &#123;\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        return newTab;\n    &#125;</code></pre>\n<h4 id=\"2-2-HashTable\"><a href=\"#2-2-HashTable\" class=\"headerlink\" title=\"2.2 HashTable\"></a>2.2 HashTable</h4><blockquote>\n<p>基本要点</p>\n<ul>\n<li>采用链表实现</li>\n<li>线程安全 <code>synchronized</code></li>\n<li>默认的 Capacity (链表数组长度)是 <strong>11</strong> , 装载因子 0.75f</li>\n<li><em>index</em> 计算：<code>index = (hash &amp; 0x7FFFFFFF) % tab.length</code></li>\n<li>头插</li>\n<li>rehash的变化为 <code>newCapacity = (oldCapacity &lt;&lt; 1) + 1</code></li>\n<li>KV 不可以为空</li>\n</ul>\n</blockquote>\n<h4 id=\"2-3-LinkedHashMap\"><a href=\"#2-3-LinkedHashMap\" class=\"headerlink\" title=\"2.3 LinkedHashMap\"></a>2.3 LinkedHashMap</h4><p>这个类继承自 <code>HashMap</code>，内部维护了一个双向链表。这个链表可以决定迭代的遍历顺序</p>\n<p>在添加新节点的时候，将新节点链接在<strong>内部双向链表的尾部</strong>。</p>\n<p><code>accessOrder=true</code>的模式下,在<code>afterNodeAccess()</code>函数中，会将当前被访问到的节点e，移动至内部的双向链表的尾部。</p>\n<blockquote>\n<p>重点关注：afterNodeAccess()函数中，会修改modCount,因此当你正在accessOrder=true的模式下,迭代LinkedHashMap时，如果同时查询访问数据，也会导致fail-fast，因为迭代的顺序已经改变。</p>\n</blockquote>\n<h4 id=\"2-4-TreeMap\"><a href=\"#2-4-TreeMap\" class=\"headerlink\" title=\"2.4 TreeMap\"></a>2.4 TreeMap</h4><blockquote>\n<p>LinkedHashMap保证数据可以保持插入顺序</p>\n<p>而如果我们希望Map可以保持key的大小顺序的时候，我们就需要利用TreeMap了</p>\n</blockquote>\n<p>内部采用了红黑树，并不是基于 <strong>hash</strong> 来进行实现的</p>\n<h3 id=\"3-SET-大类\"><a href=\"#3-SET-大类\" class=\"headerlink\" title=\"3. SET 大类\"></a>3. SET 大类</h3><h4 id=\"3-1-HashSet\"><a href=\"#3-1-HashSet\" class=\"headerlink\" title=\"3.1 HashSet\"></a>3.1 HashSet</h4><p>内部实现完全使用了 <code>HashMap</code></p>\n<h4 id=\"3-2-TreeSet\"><a href=\"#3-2-TreeSet\" class=\"headerlink\" title=\"3.2 TreeSet\"></a>3.2 TreeSet</h4><p>内部实现采用了 <code>TreeMap</code> ， 持有 <code>NavigableMap</code> 类型的引用</p>\n<h3 id=\"4-线程安全大类\"><a href=\"#4-线程安全大类\" class=\"headerlink\" title=\"4. 线程安全大类\"></a>4. 线程安全大类</h3><h4 id=\"4-1-ConcurrentHashMap\"><a href=\"#4-1-ConcurrentHashMap\" class=\"headerlink\" title=\"4.1 ConcurrentHashMap\"></a>4.1 ConcurrentHashMap</h4><blockquote>\n<ul>\n<li><em>Key , Value</em> 不可以为空</li>\n<li>Hash计算如下 <code>(h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS</code></li>\n<li>链表 &amp; 红黑树使用。链表进行尾插</li>\n<li>链表和红黑树的临界值也是 <strong>8</strong></li>\n</ul>\n</blockquote>\n<p>主要讲述一下和 <em>HashMap</em> 的不同</p>\n<h5 id=\"Node定义\"><a href=\"#Node定义\" class=\"headerlink\" title=\"Node定义\"></a>Node定义</h5><p>在 <em>ConcurrentHashMap</em> 中，<em>Value,next</em> 都设置为了 <code>volatile</code> 内存可见</p>\n<pre><code class=\"java\">private final Node&lt;K,V&gt;[] initTable() &#123;\n        Node&lt;K,V&gt;[] tab; int sc;\n        while ((tab = table) == null || tab.length == 0) &#123;\n            if ((sc = sizeCtl) &lt; 0)\n                Thread.yield(); // lost initialization race; just spin\n              //CAS控制\n            else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) &#123;\n                try &#123;\n                    if ((tab = table) == null || tab.length == 0) &#123;\n                        int n = (sc &gt; 0) ? sc : DEFAULT_CAPACITY;\n                        @SuppressWarnings(&quot;unchecked&quot;)\n                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n];\n                        table = tab = nt;\n                        sc = n - (n &gt;&gt;&gt; 2);\n                    &#125;\n                &#125; finally &#123;\n                    sizeCtl = sc;\n                &#125;\n                break;\n            &#125;\n        &#125;\n        return tab;\n    &#125;</code></pre>\n<p><strong>yield 和 sleep 的异同</strong></p>\n<p>1）yield, sleep 都能暂停当前线程，sleep 可以指定具体休眠的时间，而 yield 则依赖 CPU 的时间片划分。</p>\n<p>2）yield, sleep 两个在暂停过程中，如已经持有锁，则都不会释放锁资源。</p>\n<p>3）yield 不能被中断，而 sleep 则可以接受中断。</p>\n<p>在 <em>1.8</em> 之前，采用了 <strong>分段锁</strong> ； 而 <em>1.8</em> 中主要使用了 <strong>CAS</strong> 和 <strong>synchronized</strong> 来进行并发控制</p>\n<p><strong>CAS</strong> 没什么能说的，主要看一下分段锁 <em>Segment</em> </p>\n<p>这是一种 <em>ReentrantLock</em>，段的结构和 <em>HashMap</em> 类似，也是数组 + 链表。每一个段包含了 <em>HashEntry</em> 数组。当要对这个数组进行修改的时候，必须要先获得对应的锁(<em>Get</em>不需要获取锁，因为共享变量设置为了 <code>volatile</code>，除非读到的值是空的才会加锁重读)</p>\n<p><em>volatile</em> 底层使用了<strong>内存屏障</strong>来加以完成，实现对内存操作的顺序控制。</p>\n<blockquote>\n<p><em>ReentrantLock</em> 可重入锁，表示已经获取到这个资源的线程，可以再次进入。<em>Synchronized</em> 也是可以重入的。每一个线程进入一次，那么锁计数器+1.直到计数器为0的时候才释放</p>\n<ul>\n<li><em>ReentrantLock</em> 采用 <strong>JDK</strong> 实现；<em>Synchronized</em>则是 <strong>JVM</strong> 实现的</li>\n<li><em>Synchronized</em> 底层使用监视器（管程）实现，管程的本质就是操作系统的 <em>Mutex Lock</em>，需要牵涉到用户态和核心态的切换。 优化之前，性能比可重入锁差；</li>\n<li><em>1.6</em> 之后引入了<em>Synchronized</em> 轻量级锁和偏向锁，也是默认开启的。此外还有自适应自旋锁的优化</li>\n</ul>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckgj9qi0u0001x8me779nh0z1","category_id":"ckgj9qi0z0004x8me53mwacz9","_id":"ckgj9qi16000gx8me7e0g72ph"},{"post_id":"ckgj9qi0y0003x8me6bvm6t44","category_id":"ckgj9qi13000bx8me257dgae4","_id":"ckgj9qi18000lx8meh5el69w7"},{"post_id":"ckgj9qi16000ix8me0sro8yg4","category_id":"ckgj9qi13000bx8me257dgae4","_id":"ckgj9qi1a000rx8megeypft2w"},{"post_id":"ckgj9qi18000ox8megf3i7c4j","category_id":"ckgj9qi1b000sx8mefyihgo29","_id":"ckgj9qi1g0014x8mefhipgqoq"},{"post_id":"ckgj9qi1a000qx8mefr8oc7d9","category_id":"ckgj9qi1d0010x8me85okfnil","_id":"ckgj9qi1g0017x8me8owt0bzy"}],"PostTag":[{"post_id":"ckgj9qi0u0001x8me779nh0z1","tag_id":"ckgj9qi100005x8mehdc4azfi","_id":"ckgj9qi14000dx8meesht9mgy"},{"post_id":"ckgj9qi0y0003x8me6bvm6t44","tag_id":"ckgj9qi14000cx8me2fmx29u1","_id":"ckgj9qi17000jx8mebh889wt1"},{"post_id":"ckgj9qi16000ix8me0sro8yg4","tag_id":"ckgj9qi14000cx8me2fmx29u1","_id":"ckgj9qi18000nx8meb6hx08ba"},{"post_id":"ckgj9qi110007x8me7lxw253z","tag_id":"ckgj9qi16000hx8me8rgxgh5h","_id":"ckgj9qi19000px8megq2s4lc8"},{"post_id":"ckgj9qi17000kx8med5vv1deb","tag_id":"ckgj9qi16000hx8me8rgxgh5h","_id":"ckgj9qi1b000tx8me197m60xv"},{"post_id":"ckgj9qi18000ox8megf3i7c4j","tag_id":"ckgj9qi16000hx8me8rgxgh5h","_id":"ckgj9qi1c000wx8me7mkmfn41"},{"post_id":"ckgj9qi120009x8me0sjjcgnj","tag_id":"ckgj9qi18000mx8me913aarmc","_id":"ckgj9qi1d000yx8mebqbl3tns"},{"post_id":"ckgj9qi14000ex8me42hnfko3","tag_id":"ckgj9qi1b000ux8meb3hf1o1h","_id":"ckgj9qi1f0012x8me6l6s6d0r"},{"post_id":"ckgj9qi15000fx8me83ci1thw","tag_id":"ckgj9qi16000hx8me8rgxgh5h","_id":"ckgj9qi1g0016x8meey778ewx"},{"post_id":"ckgj9qi1a000qx8mefr8oc7d9","tag_id":"ckgj9qi1g0015x8meg32pfcax","_id":"ckgj9qi1i0019x8mee066bfik"},{"post_id":"ckgj9qi1c000xx8mees9s2pz7","tag_id":"ckgj9qi1g0018x8me80pu291k","_id":"ckgj9qi1i001bx8me3hligz1j"},{"post_id":"ckgj9qi1d000zx8me50h6dcq3","tag_id":"ckgj9qi1i001ax8me9o8mdpxz","_id":"ckgj9qi1j001dx8me08td0up2"},{"post_id":"ckgj9qi1f0013x8mebaf6etk4","tag_id":"ckgj9qi1i001cx8mebjrmgmho","_id":"ckgj9qi1j001ex8me7md7ewdu"},{"post_id":"ckgj9qi1p001fx8me49c67yfo","tag_id":"ckgj9qi16000hx8me8rgxgh5h","_id":"ckgj9qi1q001gx8me751ihxdx"}],"Tag":[{"name":"K8S","_id":"ckgj9qi100005x8mehdc4azfi"},{"name":"competition","_id":"ckgj9qi14000cx8me2fmx29u1"},{"name":"笔记","_id":"ckgj9qi16000hx8me8rgxgh5h"},{"name":"读书笔记","_id":"ckgj9qi18000mx8me913aarmc"},{"name":"整理","_id":"ckgj9qi1b000ux8meb3hf1o1h"},{"name":"UpUp","_id":"ckgj9qi1g0015x8meg32pfcax"},{"name":"算法","_id":"ckgj9qi1g0018x8me80pu291k"},{"name":"coding","_id":"ckgj9qi1i001ax8me9o8mdpxz"},{"name":"设计模式","_id":"ckgj9qi1i001cx8mebjrmgmho"}]}}